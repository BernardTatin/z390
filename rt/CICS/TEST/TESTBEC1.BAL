* ZCOBOL PGM='RT\CICS\TEST\TESTBEC1' VER=V1.5.01a MM/DD/YY 
* ZCOBOL OPTIONS=(CICS)
         COPY  TESTBEC1_ZC_LABELS.CPY
*      ****************************************************************X
                              *
*      * Copyright 2006 Automated Software Tools Corporation           X
                              *
*      * This source code is part of z390 assembler/emulator package   X
                              *
*      * The z390 package is distributed under GNU general public      X
                              *
*      * license                                                       X
                              *
*      * Author - Don Higgins                                          X
                              *
*      ****************************************************************X
                              *
*         IDENTIFICATION DIVISION.
*      * TEST BED 1 (COBOL)
*      *    TESTBED3 HAS BEEN LEFT AS ASM TO PROVE LINKAGE
*      *    TEST RETURN TRANSID AND COMMAREA
*      *    BEC1 DISPLAYS 1ST LINE
*      *    EACH SUBSEQUENT LINE INDEX COMES FROM IMPORTED COMMAREA
*      *    TEST LINK WITH DIFFERENT COMMAREAS
*      *    TEST XCTL WITH COMMAREA
*         PROGRAM-ID. TESTBEC1.
         PRINT NOLIST,NOGEN,NOLISTUSE    SET LIST OPTION FOR INTERNAL CX
               ODE
DFHEIBR  EQU   11
         USING DFHEIBLK_DSECT,DFHEIBR
*
* TERMINAL CONTROL TABLE - TERMINAL ENTRY
*
DFHTCTTE DSECT
TCTTEHED DS    CL8         'DFHTCTTE'
TCTTETI  DS    CL4         TERMINAL ID
TCTTEDA  DS    AL4         A(TIOA)
TCTTETC  DS    CL4         NEXT TRANSID
TCTTEINT DS    CL4         INITIAL TRANSID
TCTTECA  DS    AL4         RETURN COMMAREA ADDRESS
TCTTECAL DS    XL2         RETURN COMMAREA ADDRESS LENGTH
TCTTELNK DS    XL2         RETURN LINK LEVEL, 0 RETURNS TO Z390KCP
TCTTELKA DS    AL4         LINK LEVEL AREA POINTER
*                          EACH 4-BYTE ENTRY HAS THE DSA ADDRESS
TCTTEABD DS    AL4         HANDLE ABEND BLOCK
TCTTESCC DS    AL4         STORAGE CONTROL CHAIN
TCTTEIMM DS    X           FF=RETURN IMMEDIATE
TCTTETS  DS    X           FF=SHUTDOWN REQUEST
TCTTETYP DS    C           TRANSID START TYPE (FROM Z390KCP/KCPGOTYP)
*                             A = .INI INITIAL TRANSID
*                             B = SCREEN INPUT
*                             C = RETURN TRANSID()
*                             D = IC START-NO DATA
*                             E = IC START-DATA
TCTTECND DS    X           FF=XCTL COMMAREA MUST BE FREED ON RETURN
TCTTEEDF DS    X           FF=EDF IS ACTIVE
TCTTEEBA DS    X           00='BEFORE'  FF='AFTER' CEDF INTERCEPT
TCTTEEDL DS    X           00=NORMAL LINKAGE  FF=DIRECT LINKAGE
TCTTEEDT DS    CL4         TERMID FOR EDF OUTPUT
TCTTEEDA DS    AL4         ADDRESS OF EDF PROCESSOR LCLCEDF
TCTTEQFN DS    PL3         SEQUENTIAL TERMINAL FILE NUMBER
TCTTEQFO DS    X           FF=CURRENT SEQUENTIAL FILE IS OPEN
TCTTEQFL DS    AL4         ADDRESS OF SEQUENTIAL TERMINAL FILENAME
TCTTEQDI DS    AL4         ADDRESS OF RECEIVE DCB
TCTTEQDO DS    AL4         ADDRESS OF SEND DCB
TCTTECWA DS    AL4         ADDRESS OF LOCAL CWA COPY
TCTTECWL DS    XL4         LENGTH OF LOCAL CWA COPY
TCTTELCL DS    AL4         ADDRESS OF LCL MODULE INDEXER
TCTTEIQF DS    X           FF=INQUIRE FILE BROWSE IN PROGRESS
TCTTEIFN DS    CL8         INQUIRE FILE CURRENT POSITION
* FIELDS FOR ASSIGN
TCTTEABP DS    X           ABDUMP INDICATOR
TCTTEABG DS    CL8         ABENDING PROGRAM
TCTTEPSW DS    XL8         ASRA PSW
TCTTEASR DS    XL64        ASRA REGS
TCTTEINV DS    CL8         INVOKING PROGRAM
TCTTERET DS    CL8         RETURN PROGRAM
TCTTELNA EQU   *-TCTTEABP  ASSIGN FIELDS TO CLEAR
TCTTEABC DS    CL4         ABCODE OR BLANK
TCTTENXT DS    CL4         RETURN TRANSID OR BLANK
TCTTEMCL DS    AL2         MAP COLUMN
TCTTEMHT DS    AL2         MAP HEIGHT
TCTTEMLN DS    AL2         MAP LINE
TCTTEMWH DS    AL2         MAP WIDTH
TCTTELEN EQU   *-DFHTCTTE
TCTTEAR  EQU   10
         USING DFHTCTTE,TCTTEAR
R0 EQU 0
R1 EQU 1
R2 EQU 2
R3 EQU 3
R4 EQU 4
R5 EQU 5
R6 EQU 6
R7 EQU 7
R8 EQU 8
R9 EQU 9
R10 EQU 10
R11 EQU 11
R12 EQU 12
R13 EQU 13
R14 EQU 14
R15 EQU 15
TESTBEC1       CSECT
*            R1 >>> A(EIB,COMMAREA)
* TCTTEAR (R10) >>> TCTTE
* DFHEIBR (R11) >>> EIB
*         (R14) >>> RETURN ADDRESS (LINK ONLY)
*
         LR    R2,R1              R2=SAVE USER PARM POINTER
* ENTRY IS ONLY BY DIRECT BRANCH FROM MODULES LCL0E02 (LINK)
* OR LCL0E04 (XCTL)
*
* DON'T SAVE THE REGS IF XCTL, THIS ISN'T A NEW LINK LEVEL
         CHHSI EIBFN,X'0E04'      XCTL ?
         JE    CICS_EIENT_0007_NOSAVE EXIT IF IT IS
* FIND LAST LINKER AND ESTABLISH LINKAGE
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         AHI   R15,-1             -1
         SLL   R15,2              *4
         L     R1,TCTTELKA        R0=LKA ADDRESS
         AR    R1,R15             INDEX TO LAST LINK-LEVEL ENTRY
         L     R13,0(R1)          SAVE AREA OF LAST LINK-LEVEL
         STM   14,12,12+4*(14-14)(13)
CICS_EIENT_0007_NOSAVE EQU *
*
* GETMAIN THE DSA, AND SET UP THE CHAIN
*
         LAY   R1,(DFHEIEND-DFHEISTG) R1=DSA LENGTH
         LA    0,B'00'
         SVC   4 GMAIN R0=(X'02'=31B,X'01'=COND),R1=LEN OUT(R0=L,R1=A)
         ST    R1,8(R13)          SAVE NEW DSA SAVE AREA IN PRIOR SAVE
         ST    R13,4(R1)          SAVE OLD SAVE AREA IN NEW DSA SAVE
         LR    R13,R1             DSA BASE 1
         USING DFHEISTG,R13
         XC    DFHEICAP(DFHEIUSR-DFHEICAP),DFHEICAP CLEAR PREFIX DSA
*
* SAVE DSA LENGTH
*
         ST    R0,DFHEILEN        SAVE DSA LENGTH FOR FREEMAIN
*
* SET EIB AND COMMAREA ADDRESSES
*
         MVC   DFHEIEIB,0(R2)     SET EIB ADDRESS IN DSA
         MVC   DFHEICAP,4(R2)     SET COMMAREA ADDRESS IN DSA
*
* IF WE CAME FROM XCTL, WE MUST FREE THE PARM STORAGE AREA
*
         CHHSI EIBFN,X'0E04'      XCTL ?
         JNE   CICS_EIENT_0007_01 EXIT IF NOT
         LA    R0,8               LENGTH OF 8
         LR    1,R2
         SVC   5 FREEMAIN R0=LEN, R1=ADDR
         LA    R2,DFHEIEIB        SET UP THE PARM AGAIN
CICS_EIENT_0007_01 DS 0H
*
* FIND OUR LKA ENTRY AND STORE OUR DSA ADDRESS
*
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         SLL   R15,2              *4
         L     R1,TCTTELKA        R1=LKA ADDRESS
         AR    R1,R15             INDEX TO OUR LINK LEVEL ENTRY
         ST    R13,0(R1)          SAVE OUR DSA ADDRESS
         MVC   DFHEIINV,TCTTEINV  SET INVOKING PROGRAM FOR ASSIGN
         MVC   DFHEIRET,TCTTERET  SET RETURN PROGRAM FOR ASSIGN
*
         CNOP  4,8             FORCE ZC390PVT TO DOUBLEWORD BOUNDARY
         BRAS  ZC_R8,ZC_LOAD
         USING *,ZC_R8            BASE FOR LOAD AND CICS V5 USE
*
*  THESE FIELDS MUST BE KEPT IN SYNC WITH zcobol\ZC390PVT.CPY
*
         DC    CL8'TESTBEC1'    PVTPGM   ZCOBOL PGM NAME
         DC    CL8'01/02/05'   PVTDATE  ZCOBOL COMPILE DATE
         DC    CL8'22.33'   PVTTIME  ZCOBOL COMPILE TIME
         DC    CL8'V1.5.01a'    PVTVER   ZCOBOL COMPILER VERSION
         DC    C'1'     PVTCICS  ZCOBOL EXEC CICS PGM
         DC    C'1'   PVTEXTND ZCOBOL EXTENDED PRECISION
         DC    C'0'    PVTTRUNC ZCOBOL TRUNCATE TO PICTURE
         DC    C'1'      PVTR64   ZCOBOL USE 64 BIT REGISTERS
ZC_LOAD  DS    0H
         LA    0,=CL8'ZC390LIB'
         SR    15,15 USE DEFAULT SYS390 SEARCH
         SVC   8 LOAD R0=A(NAME) R15=DDNAME/DSNAME ADDR OR 0
         LTR   ZC_R15,ZC_R15
         JZ    ZC_LOAD_OK
         BRAS  1,*+(WTO#0017_EOT-*+1)/2*2
         DC    AL2(WTO#0017_EOT-*,0),C'ZC390LIB NOT FOUND'
WTO#0017_EOT EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
ZC_LOAD_OK DS  0H
         LR    ZC_R9,ZC_R0
         USING ZC390CVT,ZC_R9    R9=CVT
         CLC   ZCVT_ID,=C'ZCVT'              CHECK ZCVT ID AND LENGTH
         JNE   ZC_VER_ERR                    IN ZC390LIB.390 MATCH
         CLC   ZCVT_LEN,=A(ZCVT_END-ZCVT_ID) ZCOBOL PGM COMPILED ID/LEN
         BNE   ZC_VER_ERR
         L     ZC_R15,ZCVT_ZC390NUC
         BASR  ZC_R14,ZC_R15 CALL ZC390NUC TO VERIFY VER, OPTIONS
         J     ZC_VER_OK
ZC_VER_ERR DS 0H
         BRAS  1,*+(WTO#0018_EOT-*+1)/2*2
         DC    AL2(WTO#0018_EOT-*,0),C'ZC390LIB ZCVT VERIFY ERROR'
WTO#0018_EOT EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
         LTORG
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
ZC_R0    EQU   0
ZC_R1    EQU   1
ZC_R2    EQU   2
ZC_R3    EQU   3
ZC_R4    EQU   4
ZC_R5    EQU   5
ZC_R6    EQU   6
ZC_R7    EQU   7
ZC_R8    EQU   8
ZC_R9    EQU   9
ZC_R10   EQU  10
ZC_R11   EQU  11
ZC_R12   EQU  12
ZC_R13   EQU  13
ZC_R14   EQU  14
ZC_R15   EQU  15
ZC_F0    EQU   0
ZC_F1    EQU   1
ZC_F2    EQU   2
ZC_F3    EQU   3
ZC_F4    EQU   4
ZC_F5    EQU   5
ZC_F6    EQU   6
ZC_F7    EQU   7
ZC_F8    EQU   8
ZC_F9    EQU   9
ZC_F10   EQU  10
ZC_F11   EQU  11
ZC_F12   EQU  12
ZC_F13   EQU  13
ZC_F14   EQU  14
ZC_F15   EQU  15
ZC_H     EQU   2   HIGH
ZC_L     EQU   4   LOW
ZC_E     EQU   8   EQUAL
ZC_NH    EQU   13  NOT HIGHT
ZC_NL    EQU   11  NOT LOW
ZC_NE    EQU   7   NOT EQUAL
ZC_O     EQU   1   OVERFLOW
ZC_P     EQU   2   POSITIVE
ZC_M     EQU   4   MINUS
ZC_Z     EQU   8   ZERO
ZC_NP    EQU   13  NOT POSITIVE
ZC_NM    EQU   11  NOT MINUS
ZC_NZ    EQU   7   NOT ZERO
ZC_NO    EQU   14  NOT OVERFLOW
ZC_EQ    EQU   8   EQUAL
ZC_GT    EQU   2   GREATER THAN
ZC_LT    EQU   4   LESS    THAN
ZC_GE    EQU   11  GREATER THAN OR EQUAL
ZC_LE    EQU   13  LESS    THAN OR EQUAL
         POP   PRINT,NOPRINT
PFPO_TEST    EQU  X'80' PFPO TEST IF VALID OPCODE (NOT SUPPORTED YET)
PFPO_RADIX   EQU  1 PFPO OPCODE - CONVERT FROM ONE RADIX TO ANOTHER
PFPO_RND     EQU  0 PFOP ROUNDING OPTION (ONLY DEFAULT ALLOWED)
PFPO_TYPE_EH EQU  0 EH HFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DH EQU  1 ED HFP LONG      64 BITS 15 DIGITS
PFPO_TYPE_LH EQU  2 EL HFP EXTENDED 128 BITS 30 DIGITS
PFPO_TYPE_EB EQU  5 EB BFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DB EQU  6 DB BFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LB EQU  7 LB BFP EXTENDED 128 BITS 34 DIGITS
PFPO_TYPE_ED EQU  8 ED DFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DD EQU  9 DD DFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LD EQU 10 LD DFP EXTENDED 128 BITS 34 DIGITS
ZC_VER_OK DS   0H
ZC390CVT DSECT                ZCOBOL CVT AT ENTRY TO ZC390LIB.390
ZCVT_ID            DC    C'ZCVT'             ZCVT ID  VERIFIED BY ZCOB
ZCVT_LEN           DC    A(ZCVT_END-ZCVT_ID) ZCVT LEN VERIFIED BY ZCOB
ZCVT_VER           DC    CL8'V1.5.01a'    ZCVT VER VERIFIED BY ZC390NUC
ZCVT_ZC390NUC  DC V(ZC390NUC)      MODULE  SYSTEM ROUTINE MODULE INIT
ZCVT_CALL           DC V(CALL)       ENTRY R0=A(PGM),R1=A(PARMLIST)
ZCVT_CMP64R32       DC V(CMP64R32)   ENTRY COMPARE R0-1=FLD1 R2-3=FLD2
ZCVT_CVTLBTQ        DC V(CVTLBTQ)    ENTRY CVT LB IN F4-6 TO Q IN R0-1
ZCVT_CVTLDTP        DC V(CVTLDTP)    ENTRY CVT LD IN F0-2 TO PL31 R0-1
ZCVT_CVTQTLB        DC V(CVTQTLB)    ENTRY CVT Q IN R0-1 TO LB IN F4-6
ZCVT_DIV64R32       DC V(DIV64R32)   ENTRY DIVIDE R0-1=N64, R2-3=MAX64
ZCVT_DIVQ128        DC V(DIVQ128)    ENTRY DIVIDE Q128 R0-R1 BY R2-R3
ZCVT_GOBACK         DC V(GOBACK)     ENTRY R1=RC
ZCVT_MPYQ128        DC V(MPYQ128)    ENTRY MULTIPLY Q128 R0-R1 BY R2-R3
ZCVT_OSE64R32       DC V(OSE64R32)   ENTRY ON SIZE ERR R0-1=N, R2-3=MAX
ZCVT_PERFORM        DC V(PERFORM)    ENTRY R14=PGTAR,R0=PGEXT,R1=PMRET
ZCVT_PMCHECK        DC V(PMCHECK)    ENTRY R14=RETURN TO NEXT INSTR.
ZCVT_ROUNDF         DC V(ROUNDF)     ENTRY R0=REM,R1=QUO,R2=DIVISOR
ZCVT_STACKORG       DC V(STACKORG)   ENTRY PERFORM STACK ORIGIN
ZCVT_STACKPTR       DC V(STACKPTR)   ENTRY CUR ENTRY A(PG_END+4,RET)
ZCVT_STACKEND       DC V(STACKEND)   ENTRY PERFORM STACK END
ZCVT_STOPRUN        DC V(STOPRUN)    ENTRY R1=RC
ZCVT_TALPHAX        DC V(TALPHAX)    ENTRY TEST ALPHABETIC X
ZCVT_TNUMP          DC V(TNUMP)      ENTRY TEST NUMERIC P
ZCVT_TNUMX          DC V(TNUMX)      ENTRY TEST NUMERIC X
ZCVT_TNUMZ          DC V(TNUMZ)      ENTRY TEST NUMERIC Z
*
* ADDITIONAL SEPARATE MODULES LINKED WITH Z390NUC IN ZC390LIB.390
*
ZCVT_ABORT     DC V(ABORT)         MODULE  R1=ABORT ERROR MSG #
ZCVT_ABORT_ALTER   EQU    1 ABORT ALTER DUE TO BRC NOT FOUND AT TARGET
ZCVT_ABORT_CALL    EQU    2 ABORT DYNAMIC CALL - PGM NOT FOUND
ZCVT_ABORT_DISPLAY EQU    3 ABORT DISPLAY DUE TO BUFFER EXCEEDED
ZCVT_ABORT_OPEN    EQU    4 ABORT OPEN  INVALID DCB
ZCVT_ABORT_STACK   EQU    6 ABORT PEROFRM STACK OVERFLOW
ZCVT_ABORT_VERSION EQU    7 ABORT ZC390NUC INIT ZCOBOL VERSION ERROR
ZCVT_ABORT_INT128  EQU    8 ABORT INTEGER 128 CONVERSION OVERFLO
ZCVT_ABORT_DIVQ    EQU    9 ABORT DIVIDE Q IF DIVISOR 0 OR > 2**63
ZCVT_ABORT_CICS    EQU   10 ABORT THIS PGM REQUIRES EXEC CICS TRANS MGR
ZCVT_ABORT_ACCEPT  EQU   11 ABORT ACCEPT EOF
ZCVT_ABORT_MAXERR  EQU   11 ABORT MAX ERROR CODE
ZCVT_ACCEPT    DC V(ACCEPT)        MODULE  R1=A(TYPE,FLD_ADD,FLD_LEN)
ZCVT_ACCEPT_DEFAULT EQU   1 INPUT DEFAULT DDNAME=SYSIN
ZCVT_ACCEPT_CONSOLE EQU   2 INPUT VIA WTOR FROM CONSOLE
ZCVT_ACCEPT_DDNAME  EQU   3 INPUT FROM DDNAME WITH DDNAME ADDR IN R3
ZCVT_ACCEPT_DATE    EQU   4 RETURN DAY OF WEEK PIC 9(8) MMDDYYYY
ZCVT_ACCEPT_TIME    EQU   5 RETURN DAY OF WEEK PIC 9(8) HHMMSSTH
ZCVT_ACCEPT_DOW     EQU   6 RETURN DAY OF WEEK PIC 9 1-7
ZCVT_DISPLAY   DC V(DISPLAY)       MODULE  R1=A(ADDR,LEN,TYPE)
ZCVT_INSPECT   DC V(INSPECT)       MODULE  R0=TYPE,R1=PARMLIST
ZCVT_TALLYING      EQU   0 INSPECT TALLYING
ZCVT_REPLACING     EQU   4 INSPECT REPLACING
ZCVT_CONVERTING    EQU   8 INSPECT CONVERTING
*
* SHARED DATA AREAS
*
               DS 0D
ZCVT_ZERO      DC XL16'00'   BINARY ZEROS
ZCVT_HIGH_VALUES DC XL16'00' BINARY FF'S
ZCVT_PWORK     DS PL8     CVD/CVB WORK
ZCVT_PWORK1    DS PL16    DIV DIVIDEND, CVDG/CVBG WORK
ZCVT_PWORK2    DS PL16    DIV DIVISOR
ZCVT_PWORK3    DS PL16    DIV QUOTIENT
ZCVT_PWORK4    DS PL16    DIV REMAINDER
ZCVT_NDDX      DS XL16    DIV DIVIDEND HOLD AREA
ZCVT_WORKAREA  DS XL256   GEN_INSPECT PARMS, GEN_EDIT WORK, ETC.
*
* END OF ZC390CVT
*
ZCVT_END   EQU   *
ZC390PVT DSECT
PVTPGM   DS    CL8  ZCOBOL PGM NAME
PVTDATE  DS    CL8  ZCOBOL COMPILE DATE
PVTTIME  DS    CL8  ZCOBOL COMPILE TIME
PVTVER   DS    CL8  ZCOBOL COMPILER VERSION
PVTCICS  DS    C    ZCOBOL EXEC CICS PGM
PVTEXTND DS    C    ZCOBOL EXTENDED PRECISION
PVTTRUNC DS    C    ZCOBOL TRUNCATE TO PICTURE
PVTR64   DS    C    ZCOBOL USE 64 BIT REGISTERS
DFHEISTG DSECT
         DS    18F  SAVE AREA
DFHEIEIB DS    A    EIB POINTER
DFHEICAP DS    A    COMMAREA POINTER
DFHEICAL DS    H    COMMAREA LENGTH, COPY OF EIBCALEN
DFHEILEN DS    A    LENGTH OF DSA SET BY DFHEIENT
DFHEIAID DS    A    ADDRESS OF HANDLE AID BLOCK (DSECT=DFHADBLK)
DFHEIHCN DS    A    ADDRESS OF HANDLE CONDITION BLOCK (DSECT=DFHHCBLK)
DFHEIINV DS    CL8  INVOKING PROGRAM FOR ASSIGN
DFHEIRET DS    CL8  RETURN PROGRAM FOR ASSIGN
DFHEIUSR DS    0D   USER PROGRAM STORAGE (SEE DFHEIEND FOR END)
ZC_WS    EQU   DFHEISTG
*         ENVIRONMENT DIVISION.
*         DATA DIVISION.
*         WORKING-STORAGE SECTION.
*         77  SENDWCC  PIC X.
*         77  SENDSBA  PIC X(3).
*         77  SENDLINE PIC X(45).
*         77  MYCOMM   PIC 9(4)  COMP.
*         77  WCC      PIC X     VALUE X'F5'.
*         77  MYBEC2   PIC X(8)  VALUE 'TESTBEC2'.
*         77  COMM1    PIC X(6)  VALUE 'QUOTE2'.
*         77  COMM2    PIC X(6)  VALUE 'QUOTE3'.
*         77  COMM3    PIC X(6)  VALUE 'QUOTE6'.
*         01  SBAS.
*      * SBA,3,2 THRU SBA,11,2
*             02  FILLER   PIC X(3)  VALUE X'11C261'.
*             02  FILLER   PIC X(3)  VALUE X'11C3F1'.
*             02  FILLER   PIC X(3)  VALUE X'11C5C1'.
*             02  FILLER   PIC X(3)  VALUE X'11C6D1'.
*             02  FILLER   PIC X(3)  VALUE X'11C761'.
*             02  FILLER   PIC X(3)  VALUE X'11C8F1'.
*             02  FILLER   PIC X(3)  VALUE X'114AC1'.
*             02  FILLER   PIC X(3)  VALUE X'114BD1'.
*             02  FILLER   PIC X(3)  VALUE X'114C61'.
*          01 FILLER REDEFINES SBAS.
*             02  SBA      OCCURS 9 TIMES PIC X(3).
*         01  LINES.
*             02  LINE1    PIC X(45) VALUE 'What a piece of work is manX
               '.
*             02  FILLER   PIC X(45) VALUE 'How noble in reason'.
*             02  FILLER   PIC X(45) VALUE 'How infinite in faculties'.
*             02  FILLER   PIC X(45) VALUE
*                       'In form and moving, how express and admirable'X
                              .
*             02  FILLER   PIC X(45) VALUE 'In action, how like an angeX
               l'.
*             02  FILLER   PIC X(45) VALUE
*                       'In apprehension, how like a god'.
*             02  FILLER   PIC X(45) VALUE 'The beauty of the world'.
*             02  FILLER   PIC X(45) VALUE 'The paragon of animals'.
*             02  FILLER   PIC X(45) VALUE 'END'.
*          01 FILLER REDEFINES LINES.
*             02  LINE_N   OCCURS 9 TIMES PIC X(45).
*         LINKAGE SECTION.
*         01  DFHCOMMAREA.
*             02  INCOMM   PIC 9(4)  COMP.
*         PROCEDURE DIVISION USING DFHEIBLK DFHCOMMAREA.
*      * EXEC INTERFACE BLOCK
*            02  EIBHEAD  PIC X(8).
*            02  EIBTIME  PIC 9(7) COMP-3.
*            02  EIBDATE  PIC 9(7) COMP-3.
*            02  EIBTRNID PIC X(4).
*            02  EIBTASKN PIC 9(7) COMP-3.
*            02  EIBTRMID PIC X(4).
*            02  FILLER   PIC X(2).
*            02  EIBCPOSN PIC 9(4) COMP.
*            02  EIBCALEN PIC 9(4) COMP.
*            02  EIBAID   PIC X.
*            02  EIBFN    PIC 9(4) COMP.
*            02  EIBRCODE PIC X(6).
*            02  EIBREQID PIC X(8).
*            02  EIBDS    PIC X(8).
*            02  EIBRSRCE PIC X(8).
*            02  EIBRESP  PIC 9(9) COMP.
*            02  EIBRESP2 PIC 9(9) COMP.
*            02  EIBPROG  PIC X(8).
*            02  EIBDTFRM PIC X.
         PRINT LIST,GEN,LISTUSE TURN PRINT LISTING ON FOR USER CODE GEN
TESTBEC1  CSECT                SWITCH TO PROCEDURE CODE AHEAD OF WS
         L     ZC_R0,0(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHEIBLK_PTR STORE PARM POINTER
         L     ZC_R0,4(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHCOMMAREA_PTR STORE PARM POINTER
         MVI   WCC,X'F5'
         LARL  ZC_R1,=CL8'TESTBEC2'
         MVC   MYBEC2,0(ZC_R1)
         LARL  ZC_R1,=CL6'QUOTE2'
         MVC   COMM1,0(ZC_R1)
         LARL  ZC_R1,=CL6'QUOTE3'
         MVC   COMM2,0(ZC_R1)
         LARL  ZC_R1,=CL6'QUOTE6'
         MVC   COMM3,0(ZC_R1)
         LARL  ZC_R1,=XL4'11C261'
         MVC   ZC_FILLER_V1,1(ZC_R1)
         LARL  ZC_R1,=XL4'11C3F1'
         MVC   ZC_FILLER_V2,1(ZC_R1)
         LARL  ZC_R1,=XL4'11C5C1'
         MVC   ZC_FILLER_V3,1(ZC_R1)
         LARL  ZC_R1,=XL4'11C6D1'
         MVC   ZC_FILLER_V4,1(ZC_R1)
         LARL  ZC_R1,=XL4'11C761'
         MVC   ZC_FILLER_V5,1(ZC_R1)
         LARL  ZC_R1,=XL4'11C8F1'
         MVC   ZC_FILLER_V6,1(ZC_R1)
         LARL  ZC_R1,=XL4'114AC1'
         MVC   ZC_FILLER_V7,1(ZC_R1)
         LARL  ZC_R1,=XL4'114BD1'
         MVC   ZC_FILLER_V8,1(ZC_R1)
         LARL  ZC_R1,=XL4'114C61'
         MVC   ZC_FILLER_V9,1(ZC_R1)
         LARL  ZC_R1,=CL46'What a piece of work is man'
         MVC   LINE1,0(ZC_R1)
         LARL  ZC_R1,=CL46'How noble in reason'
         MVC   ZC_FILLER_V10,0(ZC_R1)
         LARL  ZC_R1,=CL46'How infinite in faculties'
         MVC   ZC_FILLER_V11,0(ZC_R1)
         LARL  ZC_R1,=CL46'In form and moving, how express and admirablX
               e'
         MVC   ZC_FILLER_V12,0(ZC_R1)
         LARL  ZC_R1,=CL46'In action, how like an angel'
         MVC   ZC_FILLER_V13,0(ZC_R1)
         LARL  ZC_R1,=CL46'In apprehension, how like a god'
         MVC   ZC_FILLER_V14,0(ZC_R1)
         LARL  ZC_R1,=CL46'The beauty of the world'
         MVC   ZC_FILLER_V15,0(ZC_R1)
         LARL  ZC_R1,=CL46'The paragon of animals'
         MVC   ZC_FILLER_V16,0(ZC_R1)
         LARL  ZC_R1,=CL46'END'
         MVC   ZC_FILLER_V17,0(ZC_R1)
         MVI   ZC_FILLER_V18,C' '
         MVI   ZC_FILLER_V19,C' '
         MVI   ZC_FILLER_V20,C' '
         MVI   ZC_FILLER_V21,C' '
         MVI   ZC_FILLER_V22,C' '
         MVHHI RETURN_CODE,0
*      * XC    MYCOMM,MYCOMM      INITIALISE COMMAREA
*             MOVE 1 TO MYCOMM.
*      *  MVC   SENDWCC,WCC        MOVE WCC
*ZC     91         MOVE  1,TO,MYCOMM
         MVHHI MYCOMM,1
*             MOVE WCC TO SENDWCC.
*      *  OC    TCTTECA,TCTTECA    ANY COMMAREA ?
*      *  BNZ   NOT1ST             EXIT IF NOT FIRST
*ZC     93         MOVE  WCC,TO,SENDWCC
         MVC   SENDWCC,WCC
*             IF EIBCALEN = 0 THEN
*      * FIRST LINE
*      *  MVC   SENDSBA,SBA1       1ST SBA
*ZC     96         IF    EIBCALEN,=,0,THEN
         LH    0,EIBCALEN
         CHI   0,0
         BRC   15-ZC_EQ,PG_IF_1_1
*                MOVE SBA (1) TO SENDSBA
*      *  MVC   SENDLINE,LINE1     1ST LINE
*ZC     99         MOVE  SBA,'(',1,')',TO,SENDSBA
         MVC   SENDSBA,SBA
*                MOVE LINE_N (1) TO SENDLINE
*ZC    101         MOVE  LINE_N,'(',1,')',TO,SENDLINE
         MVC   SENDLINE,LINE_N
*                EXEC CICS SEND FROM(SENDWCC) LENGTH(49) END-EXEC
*ZC    102         EXEC  CICS,SEND,FROM(SENDWCC),LENGTH(49)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(49)         ADDRESS SOURCE
         LARL  R15,P0404LEN        ADDRESS TARGET
         MVC   0(L'P0404LEN,R15),0(R1) MVC IT
         LA    R0,SENDWCC           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         J     P0404BYP_0317   EXIT
*
P0404    DS    0H
P0404FN  DS    XL2                FUNCTION CODE
P0404EIB DS    AL4                EIB
P0404TCT DS    AL4                TCTTE
P0404FRM DS    AL4                FROM
P0404LEN DS    AL2                LENGTH
P0404NOH DS    X                  FF=NOHANDLE
         DS    X
P0404RSP DS    AL4                RESP
P0404RS2 DS    AL4                RESP2
P0404END EQU   *                  END MARKER
*
P0404BYP_0317 DS 0H
*                EXEC CICS RETURN TRANSID('BEC1')
*                                 COMMAREA(MYCOMM) END-EXEC
*ZC    103         EXEC  CICS,RETURN,TRANSID('BEC1'),COMMAREA(MYCOMM)
         LARL  R1,P0E08         ADDRESS SOURCE
         LARL  R15,P0E08        ADDRESS TARGET
         XC    0(P0E08END-P0E08,R15),0(R1) XC IT
         LARL  R1,=X'0E08'         ADDRESS SOURCE
         LARL  R15,P0E08FN        ADDRESS TARGET
         MVC   0(L'P0E08FN,R15),0(R1) MVC IT
         LARL  R1,=CL4'BEC1'         ADDRESS SOURCE
         LARL  R15,P0E08TRN        ADDRESS TARGET
         MVC   0(L'P0E08TRN,R15),0(R1) MVC IT
         LA    R0,MYCOMM       R0=COMMAREA ADDRESS FROM LABEL
         LARL  R1,P0E08COM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'MYCOMM     R0=IMPLIED LENGTH OF COMMAREA
         LARL  R1,P0E08CLN         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
* SPECIAL LINKAGE
         LARL  R1,P0E08           R1=PARAMETER LIST
         LARL  R14,P0E08RTN_0326 RETURN ADDRESS
         LRL   R15,=V(LCL0E08)    R15=EXTERNAL RETURN MODULE ADDRESS
         BR    R15                GO TO IT
*
P0E08RTN_0326 EQU *
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E08BYP_0326   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(0)             IGNORE HERE IS NOT PERMITTED
*
P0E08    DS    0H
P0E08FN  DS    XL2                FUNCTION CODE
P0E08TRN DS    CL4                TRANSID
P0E08COM DS    AL4                COMMAREA ADDRESS
P0E08CLN DS    XL2                COMMAREA LENGTH
P0E08IMM DS    X                  FF=IMMEDIATE
         DS    X
P0E08CNR DS    X                  FF=CLEANER
         DS    X
P0E08RSP DS    AL4                RESP
P0E08RS2 DS    AL4                RESP2
P0E08END EQU   *                  END MARKER
         DS    0H
*
P0E08BYP_0326 DS 0H
*             ELSE
*      * NOT FIRST LINE
*      *  L     R5,TCTTECA         ADDRESS RECEIVED COMMAREA
*      *  LH    R6,0(R5)           R6=INDEX
*      *  AHI   R6,1               INCREMENT
*      *  STH   R6,0(R5)           SAVE
*ZC    111         ELSE
         J     PG_IF_1_E
PG_IF_1_1  DS    0H  ELSE
*                ADD 1 TO INCOMM
*      *  MS    R6,=F'3'           INDEX TO SBA
*      *  LA    R7,SBA1(R6)        R7=ADDRESS OF NEXT SBA
*      *  MVC   SENDSBA,0(R7)      MOVE NEXT SBA TO OUTPUT
*ZC    111         ADD   1,TO,INCOMM
         L     ZC_R5,ZC_DFHCOMMAREA_PTR
         USING DFHCOMMAREA_DSECT,ZC_R5
         LH    ZC_R0,INCOMM
         AHI   ZC_R0,1
         STH   ZC_R0,INCOMM
*                MOVE SBA (INCOMM) TO SENDSBA
*      *  LH    R6,0(R5)           R6=INDEX
*      *  MS    R6,=F'45'          INDEX TO NEXT LINE
*      *  LA    R7,LINE1(R6)       R7=ADDRESS OF NEXT LINE
*      *  MVC   SENDLINE,0(R7)     MOVE NEXT LINE TO OUTPUT
*ZC    115         MOVE  SBA,'(',INCOMM,')',TO,SENDSBA
         LH    ZC_R2,INCOMM
         BCTR  ZC_R2,0
         MSFI  ZC_R2,3 L'SBA
         LA    ZC_R2,SBA(ZC_R2)
         MVC   SENDSBA,0(ZC_R2)
*                MOVE LINE_N (INCOMM) TO SENDLINE
*ZC    120         MOVE  LINE_N,'(',INCOMM,')',TO,SENDLINE
         LH    ZC_R2,INCOMM
         BCTR  ZC_R2,0
         MSFI  ZC_R2,45 L'LINE_N
         LA    ZC_R2,LINE_N(ZC_R2)
         MVC   SENDLINE,0(ZC_R2)
*                EXEC CICS SEND FROM(SENDWCC) LENGTH(49) END-EXEC
*      *  CLC   0(2,R5),=H'8'      DISPLAYED LAST ?
*      *  BE    NEXT1              EXIT IF WE HAVE
*ZC    121         EXEC  CICS,SEND,FROM(SENDWCC),LENGTH(49)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(49)         ADDRESS SOURCE
         LARL  R15,P0404LEN        ADDRESS TARGET
         MVC   0(L'P0404LEN,R15),0(R1) MVC IT
         LA    R0,SENDWCC           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*                IF INCOMM NOT = 9 THEN
*ZC    124         IF    INCOMM,NOT,=,9,THEN
         LH    0,INCOMM
         CHI   0,9
         BRC   15-ZC_NE,PG_IF_2_1
*                   EXEC CICS RETURN TRANSID('BEC1') COMMAREA(INCOMM)
*                                    LENGTH(2) END-EXEC
*ZC    125         EXEC  CICS,RETURN,TRANSID('BEC1'),COMMAREA(INCOMM),LX
               ENGTH(2)
         LARL  R1,P0E08         ADDRESS SOURCE
         LARL  R15,P0E08        ADDRESS TARGET
         XC    0(P0E08END-P0E08,R15),0(R1) XC IT
         LARL  R1,=X'0E08'         ADDRESS SOURCE
         LARL  R15,P0E08FN        ADDRESS TARGET
         MVC   0(L'P0E08FN,R15),0(R1) MVC IT
         LARL  R1,=CL4'BEC1'         ADDRESS SOURCE
         LARL  R15,P0E08TRN        ADDRESS TARGET
         MVC   0(L'P0E08TRN,R15),0(R1) MVC IT
         LA    R0,INCOMM       R0=COMMAREA ADDRESS FROM LABEL
         LARL  R1,P0E08COM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,2         R0=COMMAREA LENGTH
         LARL  R1,P0E08CLN         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
* SPECIAL LINKAGE
         LARL  R1,P0E08           R1=PARAMETER LIST
         LARL  R14,P0E08RTN_0377 RETURN ADDRESS
         LRL   R15,=V(LCL0E08)    R15=EXTERNAL RETURN MODULE ADDRESS
         BR    R15                GO TO IT
*
P0E08RTN_0377 EQU *
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E08BYP_0377   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(0)             IGNORE HERE IS NOT PERMITTED
*
P0E08BYP_0377 DS 0H
*                ELSE
*      * TEST LINK
*ZC    129         ELSE
         J     PG_IF_2_E
PG_IF_2_1  DS    0H  ELSE
*                   EXEC CICS LINK PROGRAM(MYBEC2) END-EXEC
*      * TEST LINK WITH COMMAREA 1
*ZC    129         EXEC  CICS,LINK,PROGRAM(MYBEC2)
         LARL  R1,P0E02         ADDRESS SOURCE
         LARL  R15,P0E02        ADDRESS TARGET
         XC    0(P0E02END-P0E02,R15),0(R1) XC IT
         LARL  R1,=X'0E02'         ADDRESS SOURCE
         LARL  R15,P0E02FN        ADDRESS TARGET
         MVC   0(L'P0E02FN,R15),0(R1) MVC IT
         LARL  R15,P0E02PGM       ADDRESS TARGET
         MVC   0(8,R15),MYBEC2  MOVE PROGRAM FROM LABEL
         LARL  R1,P0E02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
* SPECIAL LINKAGE
         LARL  R1,P0E02           R1=PARAMETER LIST
         LARL  R14,P0E02RTN_0387 RETURN ADDRESS
         LRL   R15,=V(LCL0E02)    R15=EXTERNAL LINK MODULE ADDRESS
         BR    R15                GO TO IT
*
P0E02RTN_0387 EQU *
         LARL  R1,P0E02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E02BYP_0387   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E02BYP_0387   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E02BYP_0387) ENTRYPOINT FOR IGNORE CONDITION
*
P0E02    DS    0H
P0E02FN  DS    XL2                FUNCTION CODE
P0E02PGM DS    CL8                PROGRAM
P0E02EIB DS    AL4                EIB
P0E02COM DS    AL4                COMMAREA ADDRESS
P0E02CLN DS    XL2                COMMAREA LENGTH
P0E02LV0 DS    X                  FF=LINK LEVEL 0
         DS    X
P0E02NOH DS    X                  FF=NOHANDLE
         DS    X
P0E02RSP DS    AL4                RESP
P0E02RS2 DS    AL4                RESP2
P0E02END EQU   *                  END MARKER
         DS    0H
*
P0E02BYP_0387 DS 0H
         MVC   EIBCALEN,DFHEICAL  RESTORE EIB COMMAREA LENGTH
         MVC   EIBPROG,TCTTERET   RESTORE EIBPROG
         MVC   TCTTEINV,DFHEIINV  RESTORE INVOKINGPROG FOR ASSIGN
         MVC   TCTTERET,DFHEIRET  RESTORE RETURNPROG FOR ASSIGN
*                   EXEC CICS LINK PROGRAM('TESTBEC2') COMMAREA(COMM1)
*                                  END-EXEC
*      * TEST LINK WITH COMMAREA 2
*ZC    131         EXEC  CICS,LINK,PROGRAM('TESTBEC2'),COMMAREA(COMM1)
         LARL  R1,P0E02         ADDRESS SOURCE
         LARL  R15,P0E02        ADDRESS TARGET
         XC    0(P0E02END-P0E02,R15),0(R1) XC IT
         LARL  R1,=X'0E02'         ADDRESS SOURCE
         LARL  R15,P0E02FN        ADDRESS TARGET
         MVC   0(L'P0E02FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'TESTBEC2'         ADDRESS SOURCE
         LARL  R15,P0E02PGM        ADDRESS TARGET
         MVC   0(L'P0E02PGM,R15),0(R1) MVC IT
         LA    R0,COMM1       R0=COMMAREA ADDRESS FROM LABEL
         LARL  R1,P0E02COM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'COMM1     R0=IMPLIED LENGTH OF COMMAREA
         LARL  R1,P0E02CLN         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,P0E02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
* SPECIAL LINKAGE
         LARL  R1,P0E02           R1=PARAMETER LIST
         LARL  R14,P0E02RTN_0393 RETURN ADDRESS
         LRL   R15,=V(LCL0E02)    R15=EXTERNAL LINK MODULE ADDRESS
         BR    R15                GO TO IT
*
P0E02RTN_0393 EQU *
         LARL  R1,P0E02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E02BYP_0393   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E02BYP_0393   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E02BYP_0393) ENTRYPOINT FOR IGNORE CONDITION
*
P0E02BYP_0393 DS 0H
         MVC   EIBCALEN,DFHEICAL  RESTORE EIB COMMAREA LENGTH
         MVC   EIBPROG,TCTTERET   RESTORE EIBPROG
         MVC   TCTTEINV,DFHEIINV  RESTORE INVOKINGPROG FOR ASSIGN
         MVC   TCTTERET,DFHEIRET  RESTORE RETURNPROG FOR ASSIGN
*                   EXEC CICS LINK PROGRAM('TESTBEC2') COMMAREA(COMM2)
*                                  LENGTH(6) END-EXEC
*      * TEST XCTL WITH COMMAREA 3
*ZC    134         EXEC  CICS,LINK,PROGRAM('TESTBEC2'),COMMAREA(COMM2),X
               LENGTH(6)
         LARL  R1,P0E02         ADDRESS SOURCE
         LARL  R15,P0E02        ADDRESS TARGET
         XC    0(P0E02END-P0E02,R15),0(R1) XC IT
         LARL  R1,=X'0E02'         ADDRESS SOURCE
         LARL  R15,P0E02FN        ADDRESS TARGET
         MVC   0(L'P0E02FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'TESTBEC2'         ADDRESS SOURCE
         LARL  R15,P0E02PGM        ADDRESS TARGET
         MVC   0(L'P0E02PGM,R15),0(R1) MVC IT
         LA    R0,COMM2       R0=COMMAREA ADDRESS FROM LABEL
         LARL  R1,P0E02COM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,6         R0=COMMAREA LENGTH
         LARL  R1,P0E02CLN         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,P0E02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
* SPECIAL LINKAGE
         LARL  R1,P0E02           R1=PARAMETER LIST
         LARL  R14,P0E02RTN_0402 RETURN ADDRESS
         LRL   R15,=V(LCL0E02)    R15=EXTERNAL LINK MODULE ADDRESS
         BR    R15                GO TO IT
*
P0E02RTN_0402 EQU *
         LARL  R1,P0E02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E02BYP_0402   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E02BYP_0402   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E02BYP_0402) ENTRYPOINT FOR IGNORE CONDITION
*
P0E02BYP_0402 DS 0H
         MVC   EIBCALEN,DFHEICAL  RESTORE EIB COMMAREA LENGTH
         MVC   EIBPROG,TCTTERET   RESTORE EIBPROG
         MVC   TCTTEINV,DFHEIINV  RESTORE INVOKINGPROG FOR ASSIGN
         MVC   TCTTERET,DFHEIRET  RESTORE RETURNPROG FOR ASSIGN
*                   EXEC CICS XCTL PROGRAM('TESTBED3') COMMAREA(COMM3)
*ZC    137         EXEC  CICS,XCTL,PROGRAM('TESTBED3'),COMMAREA(COMM3)
         LARL  R1,P0E04         ADDRESS SOURCE
         LARL  R15,P0E04        ADDRESS TARGET
         XC    0(P0E04END-P0E04,R15),0(R1) XC IT
         LARL  R1,=X'0E04'         ADDRESS SOURCE
         LARL  R15,P0E04FN        ADDRESS TARGET
         MVC   0(L'P0E04FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'TESTBED3'         ADDRESS SOURCE
         LARL  R15,P0E04PGM        ADDRESS TARGET
         MVC   0(L'P0E04PGM,R15),0(R1) MVC IT
         LA    R0,COMM3       R0=COMMAREA ADDRESS FROM LABEL
         LARL  R1,P0E04COM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'COMM3     R0=IMPLIED LENGTH OF COMMAREA
         LARL  R1,P0E04CLN         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
* SPECIAL LINKAGE
         LARL  R1,P0E04           R1=PARAMETER LIST
         LARL  R14,P0E04RTN_0411 RETURN ADDRESS
         LRL   R15,=V(LCL0E04)    R15=EXTERNAL XCTL MODULE ADDRESS
         BR    R15                GO TO IT
*
P0E04RTN_0411 EQU *
         LARL  R1,P0E04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E04BYP_0411   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E04BYP_0411   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E04BYP_0411) ENTRYPOINT FOR IGNORE CONDITION
*
P0E04    DS    0H
P0E04FN  DS    XL2                FUNCTION CODE
P0E04PGM DS    CL8                PROGRAM
P0E04COM DS    AL4                COMMAREA ADDRESS
P0E04CLN DS    XL2                COMMAREA LENGTH
P0E04NOH DS    X                  FF=NOHANDLE
         DS    X
P0E04RSP DS    AL4                RESP
P0E04RS2 DS    AL4                RESP2
P0E04END EQU   *                  END MARKER
         DS    0H
*
P0E04BYP_0411 DS 0H
         DROP     ZC_R5
PG_IF_2_E  DS    0H  END_IF
PG_IF_1_E  DS    0H  END_IF
SN_END_PROCEDURE  DS 0H SECTION
*        PROCEDURE END
         LH    ZC_R1,RETURN_CODE
         L     ZC_R15,ZCVT_GOBACK
         BASR  ZC_R14,ZC_R15
         LTORG
* ZCOBOL WORKING STORAGE SECTION DATA ITEMS
* LVL DATA NAME                      ADDR     LEN      DUP TYP PIC     X
                  VALUE
* 01  SENDWCC                        00000070 00000001 1   X   X       X
                  
* 01  SENDSBA                        00000071 00000003 1   X   X(3)    X
                  
* 01  SENDLINE                       00000074 0000002D 1   X   X(45)   X
                  
* 01  MYCOMM                         000000A1 00000002 1   H   9(4)    X
                  
* 01  WCC                            000000A3 00000001 1   X   X       X
                  X''F5''
* 01  MYBEC2                         000000A4 00000008 1   X   X(8)    X
                  ''TESTBEC2''
* 01  COMM1                          000000AC 00000006 1   X   X(6)    X
                  ''QUOTE2''
* 01  COMM2                          000000B2 00000006 1   X   X(6)    X
                  ''QUOTE3''
* 01  COMM3                          000000B8 00000006 1   X   X(6)    X
                  ''QUOTE6''
* 01  SBAS                           000000BE 0000001B 1   X           X
                  
* 02  ZC_FILLER_V1                   000000BE 00000003 1   X   X(3)    X
                  X''11C261''
* 02  ZC_FILLER_V2                   000000C1 00000003 1   X   X(3)    X
                  X''11C3F1''
* 02  ZC_FILLER_V3                   000000C4 00000003 1   X   X(3)    X
                  X''11C5C1''
* 02  ZC_FILLER_V4                   000000C7 00000003 1   X   X(3)    X
                  X''11C6D1''
* 02  ZC_FILLER_V5                   000000CA 00000003 1   X   X(3)    X
                  X''11C761''
* 02  ZC_FILLER_V6                   000000CD 00000003 1   X   X(3)    X
                  X''11C8F1''
* 02  ZC_FILLER_V7                   000000D0 00000003 1   X   X(3)    X
                  X''114AC1''
* 02  ZC_FILLER_V8                   000000D3 00000003 1   X   X(3)    X
                  X''114BD1''
* 02  ZC_FILLER_V9                   000000D6 00000003 1   X   X(3)    X
                  X''114C61''
* 01  FILLER                         000000BE 0000001B 1   X           X
                  
* 02  SBA                            000000BE 00000003 9   X   X(3)    X
                  
* 01  LINES                          000000D9 00000195 1   X           X
                  
* 02  LINE1                          000000D9 0000002D 1   X   X(45)   X
                  ''What a piece of work is man''
* 02  ZC_FILLER_V10                  00000106 0000002D 1   X   X(45)   X
                  ''How noble in reason''
* 02  ZC_FILLER_V11                  00000133 0000002D 1   X   X(45)   X
                  ''How infinite in faculties''
* 02  ZC_FILLER_V12                  00000160 0000002D 1   X   X(45)   X
                  ''In form and moving, how express and admirable''
* 02  ZC_FILLER_V13                  0000018D 0000002D 1   X   X(45)   X
                  ''In action, how like an angel''
* 02  ZC_FILLER_V14                  000001BA 0000002D 1   X   X(45)   X
                  ''In apprehension, how like a god''
* 02  ZC_FILLER_V15                  000001E7 0000002D 1   X   X(45)   X
                  ''The beauty of the world''
* 02  ZC_FILLER_V16                  00000214 0000002D 1   X   X(45)   X
                  ''The paragon of animals''
* 02  ZC_FILLER_V17                  00000241 0000002D 1   X   X(45)   X
                  ''END''
* 01  FILLER                         000000D9 00000195 1   X           X
                  
* 02  LINE_N                         000000D9 0000002D 9   X   X(45)   X
                  
* 01  DEBUG_ITEM                     0000026E 00000058 1   X           X
                  
* 02  DEBUG_LINE                     0000026E 00000006 1   X   X(6)    X
                  
* 02  ZC_FILLER_V18                  00000274 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_NAME                     00000275 0000001E 1   X   X(30)   X
                  
* 02  ZC_FILLER_V19                  00000293 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_SUB_1                    00000294 00000004 1   Z   9999    X
                  
* 02  ZC_FILLER_V20                  00000298 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_SUB_2                    00000299 00000004 1   Z   9999    X
                  
* 02  ZC_FILLER_V21                  0000029D 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_SUB_3                    0000029E 00000004 1   Z   9999    X
                  
* 02  ZC_FILLER_V22                  000002A2 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_CONTENTS                 000002A3 00000023 1   X   X(35)   X
                  
* 01  RETURN_CODE                    000002C6 00000002 1   H   9(4)    X
                  0
* 01  ZC_DFHCOMMAREA_PTR             000002C8 00000004 1   A           X
                  
* 01  ZC_DFHEIBLK_PTR                000002CC 00000004 1   A           X
                  
* 01  ZC_ZC_LK_END_PTR               000002D0 00000004 1   A           X
                  
DFHEISTG DSECT
ZC_WS_LOC_1 EQU *-ZC_WS CHECK SENDWCC WS LOC
SENDWCC     DS  CL1
ZC_WS_LOC_2 EQU *-ZC_WS CHECK SENDSBA WS LOC
SENDSBA     DS  CL3
ZC_WS_LOC_3 EQU *-ZC_WS CHECK SENDLINE WS LOC
SENDLINE    DS  CL45
ZC_WS_LOC_4 EQU *-ZC_WS CHECK MYCOMM WS LOC
MYCOMM      DS  HL2
ZC_WS_LOC_5 EQU *-ZC_WS CHECK WCC WS LOC
WCC         DC XL1'F5'
ZC_WS_LOC_6 EQU *-ZC_WS CHECK MYBEC2 WS LOC
MYBEC2      DC CL8'TESTBEC2'
ZC_WS_LOC_7 EQU *-ZC_WS CHECK COMM1 WS LOC
COMM1       DC CL6'QUOTE2'
ZC_WS_LOC_8 EQU *-ZC_WS CHECK COMM2 WS LOC
COMM2       DC CL6'QUOTE3'
ZC_WS_LOC_9 EQU *-ZC_WS CHECK COMM3 WS LOC
COMM3       DC CL6'QUOTE6'
ZC_WS_LOC_10 EQU *-ZC_WS CHECK SBAS WS LOC
SBAS        DS  0CL27
ZC_WS_LOC_11 EQU *-ZC_WS CHECK ZC_FILLER_V1 WS LOC
ZC_FILLER_V1    DC XL3'11C261'
ZC_WS_LOC_12 EQU *-ZC_WS CHECK ZC_FILLER_V2 WS LOC
ZC_FILLER_V2    DC XL3'11C3F1'
ZC_WS_LOC_13 EQU *-ZC_WS CHECK ZC_FILLER_V3 WS LOC
ZC_FILLER_V3    DC XL3'11C5C1'
ZC_WS_LOC_14 EQU *-ZC_WS CHECK ZC_FILLER_V4 WS LOC
ZC_FILLER_V4    DC XL3'11C6D1'
ZC_WS_LOC_15 EQU *-ZC_WS CHECK ZC_FILLER_V5 WS LOC
ZC_FILLER_V5    DC XL3'11C761'
ZC_WS_LOC_16 EQU *-ZC_WS CHECK ZC_FILLER_V6 WS LOC
ZC_FILLER_V6    DC XL3'11C8F1'
ZC_WS_LOC_17 EQU *-ZC_WS CHECK ZC_FILLER_V7 WS LOC
ZC_FILLER_V7    DC XL3'114AC1'
ZC_WS_LOC_18 EQU *-ZC_WS CHECK ZC_FILLER_V8 WS LOC
ZC_FILLER_V8    DC XL3'114BD1'
ZC_WS_LOC_19 EQU *-ZC_WS CHECK ZC_FILLER_V9 WS LOC
ZC_FILLER_V9    DC XL3'114C61'
         ORG   SBAS  START REDEFINE
ZC_WS_LOC_20 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL27
ZC_WS_LOC_21 EQU *-ZC_WS CHECK SBA WS LOC
SBA         DS  9CL3
ZC_WS_LOC_22 EQU *-ZC_WS CHECK LINES WS LOC
LINES       DS  0CL405
ZC_WS_LOC_23 EQU *-ZC_WS CHECK LINE1 WS LOC
LINE1       DC CL45'What a piece of work is man'
ZC_WS_LOC_24 EQU *-ZC_WS CHECK ZC_FILLER_V10 WS LOC
ZC_FILLER_V10    DC CL45'How noble in reason'
ZC_WS_LOC_25 EQU *-ZC_WS CHECK ZC_FILLER_V11 WS LOC
ZC_FILLER_V11    DC CL45'How infinite in faculties'
ZC_WS_LOC_26 EQU *-ZC_WS CHECK ZC_FILLER_V12 WS LOC
ZC_FILLER_V12    DC CL45'In form and moving, how express and admirable'
ZC_WS_LOC_27 EQU *-ZC_WS CHECK ZC_FILLER_V13 WS LOC
ZC_FILLER_V13    DC CL45'In action, how like an angel'
ZC_WS_LOC_28 EQU *-ZC_WS CHECK ZC_FILLER_V14 WS LOC
ZC_FILLER_V14    DC CL45'In apprehension, how like a god'
ZC_WS_LOC_29 EQU *-ZC_WS CHECK ZC_FILLER_V15 WS LOC
ZC_FILLER_V15    DC CL45'The beauty of the world'
ZC_WS_LOC_30 EQU *-ZC_WS CHECK ZC_FILLER_V16 WS LOC
ZC_FILLER_V16    DC CL45'The paragon of animals'
ZC_WS_LOC_31 EQU *-ZC_WS CHECK ZC_FILLER_V17 WS LOC
ZC_FILLER_V17    DC CL45'END'
         ORG   LINES  START REDEFINE
ZC_WS_LOC_32 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL405
ZC_WS_LOC_33 EQU *-ZC_WS CHECK LINE_N WS LOC
LINE_N      DS  9CL45
ZC_WS_LOC_57 EQU *-ZC_WS CHECK DEBUG_ITEM WS LOC
DEBUG_ITEM    DS  0CL88
ZC_WS_LOC_58 EQU *-ZC_WS CHECK DEBUG_LINE WS LOC
DEBUG_LINE    DS  CL6
ZC_WS_LOC_59 EQU *-ZC_WS CHECK ZC_FILLER_V18 WS LOC
ZC_FILLER_V18    DC CL1' '
ZC_WS_LOC_60 EQU *-ZC_WS CHECK DEBUG_NAME WS LOC
DEBUG_NAME    DS  CL30
ZC_WS_LOC_61 EQU *-ZC_WS CHECK ZC_FILLER_V19 WS LOC
ZC_FILLER_V19    DC CL1' '
ZC_WS_LOC_62 EQU *-ZC_WS CHECK DEBUG_SUB_1 WS LOC
DEBUG_SUB_1    DS  ZL4
ZC_WS_LOC_63 EQU *-ZC_WS CHECK ZC_FILLER_V20 WS LOC
ZC_FILLER_V20    DC CL1' '
ZC_WS_LOC_64 EQU *-ZC_WS CHECK DEBUG_SUB_2 WS LOC
DEBUG_SUB_2    DS  ZL4
ZC_WS_LOC_65 EQU *-ZC_WS CHECK ZC_FILLER_V21 WS LOC
ZC_FILLER_V21    DC CL1' '
ZC_WS_LOC_66 EQU *-ZC_WS CHECK DEBUG_SUB_3 WS LOC
DEBUG_SUB_3    DS  ZL4
ZC_WS_LOC_67 EQU *-ZC_WS CHECK ZC_FILLER_V22 WS LOC
ZC_FILLER_V22    DC CL1' '
ZC_WS_LOC_68 EQU *-ZC_WS CHECK DEBUG_CONTENTS WS LOC
DEBUG_CONTENTS    DS  CL35
ZC_WS_LOC_69 EQU *-ZC_WS CHECK RETURN_CODE WS LOC
RETURN_CODE    DC AL2(0)                  RPI 1065
ZC_WS_LOC_70 EQU *-ZC_WS CHECK ZC_DFHCOMMAREA_PTR WS LOC
ZC_DFHCOMMAREA_PTR    DS  AL4
ZC_WS_LOC_71 EQU *-ZC_WS CHECK ZC_DFHEIBLK_PTR WS LOC
ZC_DFHEIBLK_PTR    DS  AL4
ZC_WS_LOC_72 EQU *-ZC_WS CHECK ZC_ZC_LK_END_PTR WS LOC
ZC_ZC_LK_END_PTR    DS  AL4
* ZCOBOL LINKAGE SECTION DATA ITEMS
* LVL DATA NAME                      ADDR     LEN      DUP TYP PIC     X
                  VALUE
* 01  DFHCOMMAREA                    00000000 00000002 1   X           X
                  
* 02  INCOMM                         00000000 00000002 1   H   9(4)    X
                  
* 01  DFHEIBLK                       00000000 00000054 1   X           X
                  
* 02  EIBHEAD                        00000000 00000008 1   X   X(8)    X
                  
* 02  EIBTIME                        00000008 00000004 1   P   9(7)    X
                  
* 02  EIBDATE                        0000000C 00000004 1   P   9(7)    X
                  
* 02  EIBTRNID                       00000010 00000004 1   X   X(4)    X
                  
* 02  EIBTASKN                       00000014 00000004 1   P   9(7)    X
                  
* 02  EIBTRMID                       00000018 00000004 1   X   X(4)    X
                  
* 02  FILLER                         0000001C 00000002 1   X   X(2)    X
                  
* 02  EIBCPOSN                       0000001E 00000002 1   H   9(4)    X
                  
* 02  EIBCALEN                       00000020 00000002 1   H   9(4)    X
                  
* 02  EIBAID                         00000022 00000001 1   X   X       X
                  
* 02  EIBFN                          00000023 00000002 1   H   9(4)    X
                  
* 02  EIBRCODE                       00000025 00000006 1   X   X(6)    X
                  
* 02  EIBREQID                       0000002B 00000008 1   X   X(8)    X
                  
* 02  EIBDS                          00000033 00000008 1   X   X(8)    X
                  
* 02  EIBRSRCE                       0000003B 00000008 1   X   X(8)    X
                  
* 02  EIBRESP                        00000043 00000004 1   F   9(9)    X
                  
* 02  EIBRESP2                       00000047 00000004 1   F   9(9)    X
                  
* 02  EIBPROG                        0000004B 00000008 1   X   X(8)    X
                  
* 02  EIBDTFRM                       00000053 00000001 1   X   X       X
                  
* 01  ZC_LK_END                      00000000 00000001 1   X   X       X
                  
DFHEISTG DSECT
DFHCOMMAREA_DSECT   DSECT
ZC_LK_LOC_34 EQU *-DFHCOMMAREA CHECK DFHCOMMAREA LK LOC
DFHCOMMAREA    DS  0CL2
ZC_LK_LOC_35 EQU *-DFHCOMMAREA CHECK INCOMM LK LOC
INCOMM      DS  HL2
DFHEIBLK_DSECT   DSECT
ZC_LK_LOC_36 EQU *-DFHEIBLK CHECK DFHEIBLK LK LOC
DFHEIBLK    DS  0CL84
ZC_LK_LOC_37 EQU *-DFHEIBLK CHECK EIBHEAD LK LOC
EIBHEAD     DS  CL8
ZC_LK_LOC_38 EQU *-DFHEIBLK CHECK EIBTIME LK LOC
EIBTIME     DS  PL4
ZC_LK_LOC_39 EQU *-DFHEIBLK CHECK EIBDATE LK LOC
EIBDATE     DS  PL4
ZC_LK_LOC_40 EQU *-DFHEIBLK CHECK EIBTRNID LK LOC
EIBTRNID    DS  CL4
ZC_LK_LOC_41 EQU *-DFHEIBLK CHECK EIBTASKN LK LOC
EIBTASKN    DS  PL4
ZC_LK_LOC_42 EQU *-DFHEIBLK CHECK EIBTRMID LK LOC
EIBTRMID    DS  CL4
ZC_LK_LOC_43 EQU *-DFHEIBLK CHECK FILLER LK LOC
            DS  CL2
ZC_LK_LOC_44 EQU *-DFHEIBLK CHECK EIBCPOSN LK LOC
EIBCPOSN    DS  HL2
ZC_LK_LOC_45 EQU *-DFHEIBLK CHECK EIBCALEN LK LOC
EIBCALEN    DS  HL2
ZC_LK_LOC_46 EQU *-DFHEIBLK CHECK EIBAID LK LOC
EIBAID      DS  CL1
ZC_LK_LOC_47 EQU *-DFHEIBLK CHECK EIBFN LK LOC
EIBFN       DS  HL2
ZC_LK_LOC_48 EQU *-DFHEIBLK CHECK EIBRCODE LK LOC
EIBRCODE    DS  CL6
ZC_LK_LOC_49 EQU *-DFHEIBLK CHECK EIBREQID LK LOC
EIBREQID    DS  CL8
ZC_LK_LOC_50 EQU *-DFHEIBLK CHECK EIBDS LK LOC
EIBDS       DS  CL8
ZC_LK_LOC_51 EQU *-DFHEIBLK CHECK EIBRSRCE LK LOC
EIBRSRCE    DS  CL8
ZC_LK_LOC_52 EQU *-DFHEIBLK CHECK EIBRESP LK LOC
EIBRESP     DS  FL4
ZC_LK_LOC_53 EQU *-DFHEIBLK CHECK EIBRESP2 LK LOC
EIBRESP2    DS  FL4
ZC_LK_LOC_54 EQU *-DFHEIBLK CHECK EIBPROG LK LOC
EIBPROG     DS  CL8
ZC_LK_LOC_55 EQU *-DFHEIBLK CHECK EIBDTFRM LK LOC
EIBDTFRM    DS  CL1
ZC_LK_END_DSECT   DSECT
ZC_LK_LOC_56 EQU *-ZC_LK_END CHECK ZC_LK_END LK LOC
ZC_LK_END    DS  CL1
DFHEISTG DSECT
ZC_WS_DIFF EQU  *-ZC_WS-724  DIFF BETWEEN ALLOC AND CALC WS
ZC_WS_END DS   0D
         MNOTE *,'ZCOBOL TOTAL SYMBOLS                 = 72'
         MNOTE *,'ZCOBOL TOTAL SYMBOL DUPLICATES       = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL MAX DUP CHAIN    = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LEVEL 88         = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL SET INDEXES      = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LINKAGE SECTIONS = 3'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE SECTIONS      = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPHS    = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPH DUP = 0'
DFHEISTG DSECT
         ORG
DFHEIEND EQU   *
         END
