* ZCOBOL PGM='RT\CICS\TEST\TESTBEC5' VER=V1.5.01a MM/DD/YY 
* ZCOBOL OPTIONS=(CICS)
         COPY  TESTBEC5_ZC_LABELS.CPY
*      ****************************************************************X
                              *
*      * Copyright 2006 Automated Software Tools Corporation           X
                              *
*      * This source code is part of z390 assembler/emulator package   X
                              *
*      * The z390 package is distributed under GNU general public      X
                              *
*      * license                                                       X
                              *
*      * Author - Don Higgins                                          X
                              *
*      ****************************************************************X
                              *
*         IDENTIFICATION DIVISION.
*      * TEST HANDLE AID/PUSH/POP
*      * TEST GETMAIN/FREEMAIN
*         PROGRAM-ID. TESTBEC5.
         PRINT NOLIST,NOGEN,NOLISTUSE    SET LIST OPTION FOR INTERNAL CX
               ODE
DFHEIBR  EQU   11
         USING DFHEIBLK_DSECT,DFHEIBR
*
* TERMINAL CONTROL TABLE - TERMINAL ENTRY
*
DFHTCTTE DSECT
TCTTEHED DS    CL8         'DFHTCTTE'
TCTTETI  DS    CL4         TERMINAL ID
TCTTEDA  DS    AL4         A(TIOA)
TCTTETC  DS    CL4         NEXT TRANSID
TCTTEINT DS    CL4         INITIAL TRANSID
TCTTECA  DS    AL4         RETURN COMMAREA ADDRESS
TCTTECAL DS    XL2         RETURN COMMAREA ADDRESS LENGTH
TCTTELNK DS    XL2         RETURN LINK LEVEL, 0 RETURNS TO Z390KCP
TCTTELKA DS    AL4         LINK LEVEL AREA POINTER
*                          EACH 4-BYTE ENTRY HAS THE DSA ADDRESS
TCTTEABD DS    AL4         HANDLE ABEND BLOCK
TCTTESCC DS    AL4         STORAGE CONTROL CHAIN
TCTTEIMM DS    X           FF=RETURN IMMEDIATE
TCTTETS  DS    X           FF=SHUTDOWN REQUEST
TCTTETYP DS    C           TRANSID START TYPE (FROM Z390KCP/KCPGOTYP)
*                             A = .INI INITIAL TRANSID
*                             B = SCREEN INPUT
*                             C = RETURN TRANSID()
*                             D = IC START-NO DATA
*                             E = IC START-DATA
TCTTECND DS    X           FF=XCTL COMMAREA MUST BE FREED ON RETURN
TCTTEEDF DS    X           FF=EDF IS ACTIVE
TCTTEEBA DS    X           00='BEFORE'  FF='AFTER' CEDF INTERCEPT
TCTTEEDL DS    X           00=NORMAL LINKAGE  FF=DIRECT LINKAGE
TCTTEEDT DS    CL4         TERMID FOR EDF OUTPUT
TCTTEEDA DS    AL4         ADDRESS OF EDF PROCESSOR LCLCEDF
TCTTEQFN DS    PL3         SEQUENTIAL TERMINAL FILE NUMBER
TCTTEQFO DS    X           FF=CURRENT SEQUENTIAL FILE IS OPEN
TCTTEQFL DS    AL4         ADDRESS OF SEQUENTIAL TERMINAL FILENAME
TCTTEQDI DS    AL4         ADDRESS OF RECEIVE DCB
TCTTEQDO DS    AL4         ADDRESS OF SEND DCB
TCTTECWA DS    AL4         ADDRESS OF LOCAL CWA COPY
TCTTECWL DS    XL4         LENGTH OF LOCAL CWA COPY
TCTTELCL DS    AL4         ADDRESS OF LCL MODULE INDEXER
TCTTEIQF DS    X           FF=INQUIRE FILE BROWSE IN PROGRESS
TCTTEIFN DS    CL8         INQUIRE FILE CURRENT POSITION
* FIELDS FOR ASSIGN
TCTTEABP DS    X           ABDUMP INDICATOR
TCTTEABG DS    CL8         ABENDING PROGRAM
TCTTEPSW DS    XL8         ASRA PSW
TCTTEASR DS    XL64        ASRA REGS
TCTTEINV DS    CL8         INVOKING PROGRAM
TCTTERET DS    CL8         RETURN PROGRAM
TCTTELNA EQU   *-TCTTEABP  ASSIGN FIELDS TO CLEAR
TCTTEABC DS    CL4         ABCODE OR BLANK
TCTTENXT DS    CL4         RETURN TRANSID OR BLANK
TCTTEMCL DS    AL2         MAP COLUMN
TCTTEMHT DS    AL2         MAP HEIGHT
TCTTEMLN DS    AL2         MAP LINE
TCTTEMWH DS    AL2         MAP WIDTH
TCTTELEN EQU   *-DFHTCTTE
TCTTEAR  EQU   10
         USING DFHTCTTE,TCTTEAR
R0 EQU 0
R1 EQU 1
R2 EQU 2
R3 EQU 3
R4 EQU 4
R5 EQU 5
R6 EQU 6
R7 EQU 7
R8 EQU 8
R9 EQU 9
R10 EQU 10
R11 EQU 11
R12 EQU 12
R13 EQU 13
R14 EQU 14
R15 EQU 15
TESTBEC5       CSECT
*            R1 >>> A(EIB,COMMAREA)
* TCTTEAR (R10) >>> TCTTE
* DFHEIBR (R11) >>> EIB
*         (R14) >>> RETURN ADDRESS (LINK ONLY)
*
         LR    R2,R1              R2=SAVE USER PARM POINTER
* ENTRY IS ONLY BY DIRECT BRANCH FROM MODULES LCL0E02 (LINK)
* OR LCL0E04 (XCTL)
*
* DON'T SAVE THE REGS IF XCTL, THIS ISN'T A NEW LINK LEVEL
         CHHSI EIBFN,X'0E04'      XCTL ?
         JE    CICS_EIENT_0035_NOSAVE EXIT IF IT IS
* FIND LAST LINKER AND ESTABLISH LINKAGE
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         AHI   R15,-1             -1
         SLL   R15,2              *4
         L     R1,TCTTELKA        R0=LKA ADDRESS
         AR    R1,R15             INDEX TO LAST LINK-LEVEL ENTRY
         L     R13,0(R1)          SAVE AREA OF LAST LINK-LEVEL
         STM   14,12,12+4*(14-14)(13)
CICS_EIENT_0035_NOSAVE EQU *
*
* GETMAIN THE DSA, AND SET UP THE CHAIN
*
         LAY   R1,(DFHEIEND-DFHEISTG) R1=DSA LENGTH
         LA    0,B'00'
         SVC   4 GMAIN R0=(X'02'=31B,X'01'=COND),R1=LEN OUT(R0=L,R1=A)
         ST    R1,8(R13)          SAVE NEW DSA SAVE AREA IN PRIOR SAVE
         ST    R13,4(R1)          SAVE OLD SAVE AREA IN NEW DSA SAVE
         LR    R13,R1             DSA BASE 1
         USING DFHEISTG,R13
         XC    DFHEICAP(DFHEIUSR-DFHEICAP),DFHEICAP CLEAR PREFIX DSA
*
* SAVE DSA LENGTH
*
         ST    R0,DFHEILEN        SAVE DSA LENGTH FOR FREEMAIN
*
* SET EIB AND COMMAREA ADDRESSES
*
         MVC   DFHEIEIB,0(R2)     SET EIB ADDRESS IN DSA
         MVC   DFHEICAP,4(R2)     SET COMMAREA ADDRESS IN DSA
*
* IF WE CAME FROM XCTL, WE MUST FREE THE PARM STORAGE AREA
*
         CHHSI EIBFN,X'0E04'      XCTL ?
         JNE   CICS_EIENT_0035_01 EXIT IF NOT
         LA    R0,8               LENGTH OF 8
         LR    1,R2
         SVC   5 FREEMAIN R0=LEN, R1=ADDR
         LA    R2,DFHEIEIB        SET UP THE PARM AGAIN
CICS_EIENT_0035_01 DS 0H
*
* FIND OUR LKA ENTRY AND STORE OUR DSA ADDRESS
*
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         SLL   R15,2              *4
         L     R1,TCTTELKA        R1=LKA ADDRESS
         AR    R1,R15             INDEX TO OUR LINK LEVEL ENTRY
         ST    R13,0(R1)          SAVE OUR DSA ADDRESS
         MVC   DFHEIINV,TCTTEINV  SET INVOKING PROGRAM FOR ASSIGN
         MVC   DFHEIRET,TCTTERET  SET RETURN PROGRAM FOR ASSIGN
*
         CNOP  4,8             FORCE ZC390PVT TO DOUBLEWORD BOUNDARY
         BRAS  ZC_R8,ZC_LOAD
         USING *,ZC_R8            BASE FOR LOAD AND CICS V5 USE
*
*  THESE FIELDS MUST BE KEPT IN SYNC WITH zcobol\ZC390PVT.CPY
*
         DC    CL8'TESTBEC5'    PVTPGM   ZCOBOL PGM NAME
         DC    CL8'01/02/05'   PVTDATE  ZCOBOL COMPILE DATE
         DC    CL8'22.33'   PVTTIME  ZCOBOL COMPILE TIME
         DC    CL8'V1.5.01a'    PVTVER   ZCOBOL COMPILER VERSION
         DC    C'1'     PVTCICS  ZCOBOL EXEC CICS PGM
         DC    C'1'   PVTEXTND ZCOBOL EXTENDED PRECISION
         DC    C'0'    PVTTRUNC ZCOBOL TRUNCATE TO PICTURE
         DC    C'1'      PVTR64   ZCOBOL USE 64 BIT REGISTERS
ZC_LOAD  DS    0H
         LA    0,=CL8'ZC390LIB'
         SR    15,15 USE DEFAULT SYS390 SEARCH
         SVC   8 LOAD R0=A(NAME) R15=DDNAME/DSNAME ADDR OR 0
         LTR   ZC_R15,ZC_R15
         JZ    ZC_LOAD_OK
         BRAS  1,*+(WTO#0045_EOT-*+1)/2*2
         DC    AL2(WTO#0045_EOT-*,0),C'ZC390LIB NOT FOUND'
WTO#0045_EOT EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
ZC_LOAD_OK DS  0H
         LR    ZC_R9,ZC_R0
         USING ZC390CVT,ZC_R9    R9=CVT
         CLC   ZCVT_ID,=C'ZCVT'              CHECK ZCVT ID AND LENGTH
         JNE   ZC_VER_ERR                    IN ZC390LIB.390 MATCH
         CLC   ZCVT_LEN,=A(ZCVT_END-ZCVT_ID) ZCOBOL PGM COMPILED ID/LEN
         BNE   ZC_VER_ERR
         L     ZC_R15,ZCVT_ZC390NUC
         BASR  ZC_R14,ZC_R15 CALL ZC390NUC TO VERIFY VER, OPTIONS
         J     ZC_VER_OK
ZC_VER_ERR DS 0H
         BRAS  1,*+(WTO#0046_EOT-*+1)/2*2
         DC    AL2(WTO#0046_EOT-*,0),C'ZC390LIB ZCVT VERIFY ERROR'
WTO#0046_EOT EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
         LTORG
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
ZC_R0    EQU   0
ZC_R1    EQU   1
ZC_R2    EQU   2
ZC_R3    EQU   3
ZC_R4    EQU   4
ZC_R5    EQU   5
ZC_R6    EQU   6
ZC_R7    EQU   7
ZC_R8    EQU   8
ZC_R9    EQU   9
ZC_R10   EQU  10
ZC_R11   EQU  11
ZC_R12   EQU  12
ZC_R13   EQU  13
ZC_R14   EQU  14
ZC_R15   EQU  15
ZC_F0    EQU   0
ZC_F1    EQU   1
ZC_F2    EQU   2
ZC_F3    EQU   3
ZC_F4    EQU   4
ZC_F5    EQU   5
ZC_F6    EQU   6
ZC_F7    EQU   7
ZC_F8    EQU   8
ZC_F9    EQU   9
ZC_F10   EQU  10
ZC_F11   EQU  11
ZC_F12   EQU  12
ZC_F13   EQU  13
ZC_F14   EQU  14
ZC_F15   EQU  15
ZC_H     EQU   2   HIGH
ZC_L     EQU   4   LOW
ZC_E     EQU   8   EQUAL
ZC_NH    EQU   13  NOT HIGHT
ZC_NL    EQU   11  NOT LOW
ZC_NE    EQU   7   NOT EQUAL
ZC_O     EQU   1   OVERFLOW
ZC_P     EQU   2   POSITIVE
ZC_M     EQU   4   MINUS
ZC_Z     EQU   8   ZERO
ZC_NP    EQU   13  NOT POSITIVE
ZC_NM    EQU   11  NOT MINUS
ZC_NZ    EQU   7   NOT ZERO
ZC_NO    EQU   14  NOT OVERFLOW
ZC_EQ    EQU   8   EQUAL
ZC_GT    EQU   2   GREATER THAN
ZC_LT    EQU   4   LESS    THAN
ZC_GE    EQU   11  GREATER THAN OR EQUAL
ZC_LE    EQU   13  LESS    THAN OR EQUAL
         POP   PRINT,NOPRINT
PFPO_TEST    EQU  X'80' PFPO TEST IF VALID OPCODE (NOT SUPPORTED YET)
PFPO_RADIX   EQU  1 PFPO OPCODE - CONVERT FROM ONE RADIX TO ANOTHER
PFPO_RND     EQU  0 PFOP ROUNDING OPTION (ONLY DEFAULT ALLOWED)
PFPO_TYPE_EH EQU  0 EH HFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DH EQU  1 ED HFP LONG      64 BITS 15 DIGITS
PFPO_TYPE_LH EQU  2 EL HFP EXTENDED 128 BITS 30 DIGITS
PFPO_TYPE_EB EQU  5 EB BFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DB EQU  6 DB BFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LB EQU  7 LB BFP EXTENDED 128 BITS 34 DIGITS
PFPO_TYPE_ED EQU  8 ED DFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DD EQU  9 DD DFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LD EQU 10 LD DFP EXTENDED 128 BITS 34 DIGITS
ZC_VER_OK DS   0H
ZC390CVT DSECT                ZCOBOL CVT AT ENTRY TO ZC390LIB.390
ZCVT_ID            DC    C'ZCVT'             ZCVT ID  VERIFIED BY ZCOB
ZCVT_LEN           DC    A(ZCVT_END-ZCVT_ID) ZCVT LEN VERIFIED BY ZCOB
ZCVT_VER           DC    CL8'V1.5.01a'    ZCVT VER VERIFIED BY ZC390NUC
ZCVT_ZC390NUC  DC V(ZC390NUC)      MODULE  SYSTEM ROUTINE MODULE INIT
ZCVT_CALL           DC V(CALL)       ENTRY R0=A(PGM),R1=A(PARMLIST)
ZCVT_CMP64R32       DC V(CMP64R32)   ENTRY COMPARE R0-1=FLD1 R2-3=FLD2
ZCVT_CVTLBTQ        DC V(CVTLBTQ)    ENTRY CVT LB IN F4-6 TO Q IN R0-1
ZCVT_CVTLDTP        DC V(CVTLDTP)    ENTRY CVT LD IN F0-2 TO PL31 R0-1
ZCVT_CVTQTLB        DC V(CVTQTLB)    ENTRY CVT Q IN R0-1 TO LB IN F4-6
ZCVT_DIV64R32       DC V(DIV64R32)   ENTRY DIVIDE R0-1=N64, R2-3=MAX64
ZCVT_DIVQ128        DC V(DIVQ128)    ENTRY DIVIDE Q128 R0-R1 BY R2-R3
ZCVT_GOBACK         DC V(GOBACK)     ENTRY R1=RC
ZCVT_MPYQ128        DC V(MPYQ128)    ENTRY MULTIPLY Q128 R0-R1 BY R2-R3
ZCVT_OSE64R32       DC V(OSE64R32)   ENTRY ON SIZE ERR R0-1=N, R2-3=MAX
ZCVT_PERFORM        DC V(PERFORM)    ENTRY R14=PGTAR,R0=PGEXT,R1=PMRET
ZCVT_PMCHECK        DC V(PMCHECK)    ENTRY R14=RETURN TO NEXT INSTR.
ZCVT_ROUNDF         DC V(ROUNDF)     ENTRY R0=REM,R1=QUO,R2=DIVISOR
ZCVT_STACKORG       DC V(STACKORG)   ENTRY PERFORM STACK ORIGIN
ZCVT_STACKPTR       DC V(STACKPTR)   ENTRY CUR ENTRY A(PG_END+4,RET)
ZCVT_STACKEND       DC V(STACKEND)   ENTRY PERFORM STACK END
ZCVT_STOPRUN        DC V(STOPRUN)    ENTRY R1=RC
ZCVT_TALPHAX        DC V(TALPHAX)    ENTRY TEST ALPHABETIC X
ZCVT_TNUMP          DC V(TNUMP)      ENTRY TEST NUMERIC P
ZCVT_TNUMX          DC V(TNUMX)      ENTRY TEST NUMERIC X
ZCVT_TNUMZ          DC V(TNUMZ)      ENTRY TEST NUMERIC Z
*
* ADDITIONAL SEPARATE MODULES LINKED WITH Z390NUC IN ZC390LIB.390
*
ZCVT_ABORT     DC V(ABORT)         MODULE  R1=ABORT ERROR MSG #
ZCVT_ABORT_ALTER   EQU    1 ABORT ALTER DUE TO BRC NOT FOUND AT TARGET
ZCVT_ABORT_CALL    EQU    2 ABORT DYNAMIC CALL - PGM NOT FOUND
ZCVT_ABORT_DISPLAY EQU    3 ABORT DISPLAY DUE TO BUFFER EXCEEDED
ZCVT_ABORT_OPEN    EQU    4 ABORT OPEN  INVALID DCB
ZCVT_ABORT_STACK   EQU    6 ABORT PEROFRM STACK OVERFLOW
ZCVT_ABORT_VERSION EQU    7 ABORT ZC390NUC INIT ZCOBOL VERSION ERROR
ZCVT_ABORT_INT128  EQU    8 ABORT INTEGER 128 CONVERSION OVERFLO
ZCVT_ABORT_DIVQ    EQU    9 ABORT DIVIDE Q IF DIVISOR 0 OR > 2**63
ZCVT_ABORT_CICS    EQU   10 ABORT THIS PGM REQUIRES EXEC CICS TRANS MGR
ZCVT_ABORT_ACCEPT  EQU   11 ABORT ACCEPT EOF
ZCVT_ABORT_MAXERR  EQU   11 ABORT MAX ERROR CODE
ZCVT_ACCEPT    DC V(ACCEPT)        MODULE  R1=A(TYPE,FLD_ADD,FLD_LEN)
ZCVT_ACCEPT_DEFAULT EQU   1 INPUT DEFAULT DDNAME=SYSIN
ZCVT_ACCEPT_CONSOLE EQU   2 INPUT VIA WTOR FROM CONSOLE
ZCVT_ACCEPT_DDNAME  EQU   3 INPUT FROM DDNAME WITH DDNAME ADDR IN R3
ZCVT_ACCEPT_DATE    EQU   4 RETURN DAY OF WEEK PIC 9(8) MMDDYYYY
ZCVT_ACCEPT_TIME    EQU   5 RETURN DAY OF WEEK PIC 9(8) HHMMSSTH
ZCVT_ACCEPT_DOW     EQU   6 RETURN DAY OF WEEK PIC 9 1-7
ZCVT_DISPLAY   DC V(DISPLAY)       MODULE  R1=A(ADDR,LEN,TYPE)
ZCVT_INSPECT   DC V(INSPECT)       MODULE  R0=TYPE,R1=PARMLIST
ZCVT_TALLYING      EQU   0 INSPECT TALLYING
ZCVT_REPLACING     EQU   4 INSPECT REPLACING
ZCVT_CONVERTING    EQU   8 INSPECT CONVERTING
*
* SHARED DATA AREAS
*
               DS 0D
ZCVT_ZERO      DC XL16'00'   BINARY ZEROS
ZCVT_HIGH_VALUES DC XL16'00' BINARY FF'S
ZCVT_PWORK     DS PL8     CVD/CVB WORK
ZCVT_PWORK1    DS PL16    DIV DIVIDEND, CVDG/CVBG WORK
ZCVT_PWORK2    DS PL16    DIV DIVISOR
ZCVT_PWORK3    DS PL16    DIV QUOTIENT
ZCVT_PWORK4    DS PL16    DIV REMAINDER
ZCVT_NDDX      DS XL16    DIV DIVIDEND HOLD AREA
ZCVT_WORKAREA  DS XL256   GEN_INSPECT PARMS, GEN_EDIT WORK, ETC.
*
* END OF ZC390CVT
*
ZCVT_END   EQU   *
ZC390PVT DSECT
PVTPGM   DS    CL8  ZCOBOL PGM NAME
PVTDATE  DS    CL8  ZCOBOL COMPILE DATE
PVTTIME  DS    CL8  ZCOBOL COMPILE TIME
PVTVER   DS    CL8  ZCOBOL COMPILER VERSION
PVTCICS  DS    C    ZCOBOL EXEC CICS PGM
PVTEXTND DS    C    ZCOBOL EXTENDED PRECISION
PVTTRUNC DS    C    ZCOBOL TRUNCATE TO PICTURE
PVTR64   DS    C    ZCOBOL USE 64 BIT REGISTERS
DFHEISTG DSECT
         DS    18F  SAVE AREA
DFHEIEIB DS    A    EIB POINTER
DFHEICAP DS    A    COMMAREA POINTER
DFHEICAL DS    H    COMMAREA LENGTH, COPY OF EIBCALEN
DFHEILEN DS    A    LENGTH OF DSA SET BY DFHEIENT
DFHEIAID DS    A    ADDRESS OF HANDLE AID BLOCK (DSECT=DFHADBLK)
DFHEIHCN DS    A    ADDRESS OF HANDLE CONDITION BLOCK (DSECT=DFHHCBLK)
DFHEIINV DS    CL8  INVOKING PROGRAM FOR ASSIGN
DFHEIRET DS    CL8  RETURN PROGRAM FOR ASSIGN
DFHEIUSR DS    0D   USER PROGRAM STORAGE (SEE DFHEIEND FOR END)
ZC_WS    EQU   DFHEISTG
*         ENVIRONMENT DIVISION.
*         DATA DIVISION.
*         WORKING-STORAGE SECTION.
*         77  GET1     PIC 9(9) COMP USAGE IS POINTER.
*         77  GET2     PIC 9(9) COMP USAGE IS POINTER.
*         77  GET3     PIC 9(9) COMP USAGE IS POINTER.
*         77  GET4     PIC 9(9) COMP USAGE IS POINTER.
*         77  GET5     PIC 9(9) COMP USAGE IS POINTER.
*         77  GETBAD   PIC 9(9) COMP USAGE IS POINTER.
*         77  RECAREA  PIC X(80).
*         77  RECLEN   PIC 9(4) COMP.
*         01  HEAD.
*             02  FILLER  PIC X(6)  VALUE X'27F5C311C1D1'.
*             02  FILLER  PIC X(51)
*            VALUE 'TESTBEC5 TEST HANDLE, PUSH/POP AND GETMAIN/FREEMAINX
               '.
*             02  FILLER  PIC X(3)  VALUE X'11C261'.
*             02  FILLER  PIC X(14) VALUE 'PRESS PF KEY 4'.
*             02  FILLER  PIC X(3)  VALUE X'11C3F1'.
*             02  FILLER  PIC X(25) VALUE 'CLEAR WILL END TASK EARLY'.
*         77  HEADL    PIC 9(4) COMP.
*         01  BADMSG1.
*             02  FILLER  PIC X(4)  VALUE X'C311C5C1'.
*             02  FILLER  PIC X(19) VALUE 'THAT KEY WASN''T PF4'.
*         77  BADMSG1L PIC 9(4) COMP.
*         01  BADMSG2.
*             02  FILLER  PIC X(4)  VALUE X'C311C761'.
*             02  FILLER  PIC X(19) VALUE 'THAT KEY WASN''T PF5'.
*         77  BADMSG2L PIC 9(4) COMP.
*         01  BADMSG3.
*             02  FILLER  PIC X(4)  VALUE X'C3114AC1'.
*             02  FILLER  PIC X(19) VALUE 'THAT KEY WASN''T PF6'.
*         77  BADMSG3L PIC 9(4) COMP.
*         01  PF4MSG.
*             02  FILLER  PIC X(4)  VALUE X'C311C5C1'.
*             02  FILLER  PIC X(20) VALUE 'I GOT PF4, THANKYOU '.
*         77  PF4MSGL  PIC 9(4) COMP.
*         01  PF5ASK.
*             02  FILLER  PIC X(4)  VALUE X'C311C6D1'.
*             02  FILLER  PIC X(14) VALUE 'PRESS PF KEY 5'.
*         77  PF5ASKL  PIC 9(4) COMP.
*         01  PF5MSG.
*             02  FILLER  PIC X(4)  VALUE X'C311C761'.
*             02  FILLER  PIC X(20) VALUE 'I GOT PF5, THANKYOU '.
*         77  PF5MSGL  PIC 9(4) COMP.
*         01  PF6ASK.
*             02  FILLER  PIC X(4)  VALUE X'C311C8F1'.
*             02  FILLER  PIC X(14) VALUE 'PRESS PF KEY 6'.
*         77  PF6ASKL  PIC 9(4) COMP.
*         01  PF6MSG.
*             02  FILLER  PIC X(4)  VALUE X'C3114AC1'.
*             02  FILLER  PIC X(20) VALUE 'I GOT PF6, THANKYOU '.
*         77  PF6MSGL  PIC 9(4) COMP.
*         01  PGMMSG.
*             02  FILLER  PIC X(4)  VALUE X'C3114BD1'.
*             02  FILLER  PIC X(27) VALUE 'PGMIDERR WILL NOW BE RAISED'X
                              .
*         77  PGMMSGL  PIC 9(4) COMP.
*         01  PGMMSGE.
*             02  FILLER  PIC X(4)  VALUE X'C3114C61'.
*             02  FILLER  PIC X(29)
*                         VALUE 'PGMIDERR CONDITION HANDLED OK'.
*         77  PGMMSGEL PIC 9(4) COMP.
*         01  PGMMSG2.
*             02  FILLER  PIC X(4)  VALUE X'C3114DF1'.
*             02  FILLER  PIC X(33)
*                         VALUE 'PGMIDERR WILL NOW BE RAISED AGAIN'.
*         77  PGMMSG2L PIC 9(4) COMP.
*         01  ERRMSG.
*             02  FILLER  PIC X(4)  VALUE X'C3114FC1'.
*             02  FILLER  PIC X(26) VALUE 'ERROR CONDITION HANDLED OK'.
*         77  ERRMSGL  PIC 9(4) COMP.
*         01  IGNMSG.
*             02  FILLER  PIC X(4)  VALUE X'C31150D1'.
*             02  FILLER  PIC X(27) VALUE 'IGNORE CONDITION HANDLED OK'X
                              .
*         77  IGNMSGL  PIC 9(4) COMP.
*         01  GTMMSG.
*             02  FILLER  PIC X(4)  VALUE X'C311D161'.
*             02  FILLER  PIC X(40)
*                      VALUE 'GETMAIN/FREEMAIN TESTING, OK IF NO ABEND'X
                              .
*         77  GTMMSGL  PIC 9(4) COMP.
*         01  ABDMSG.
*             02  FILLER  PIC X(4)  VALUE X'C311D2F1'.
*             02  FILLER  PIC X(34)
*                         VALUE 'PGMIDERR WILL NOW CAUSE ABEND AEI0'.
*             02  FILLER  PIC X(3)  VALUE X'11D4C1'.
*             02  FILLER  PIC X(11) VALUE 'PRESS CLEAR'.
*         77  ABDMSGL  PIC 9(4) COMP.
*         77  INIT5    PIC X    VALUE X'05'.
*         COPY DFHAID.
*      * AID VALUES
*        01  DFHAID.
*          02  DFHNULL  PIC X VALUE X'00'.
*          02  DFHENTER PIC X VALUE X'7D'.
*          02  DFHPF1   PIC X VALUE X'F1'.
*          02  DFHPF2   PIC X VALUE X'F2'.
*          02  DFHPF3   PIC X VALUE X'F3'.
*          02  DFHPF4   PIC X VALUE X'F4'.
*          02  DFHPF5   PIC X VALUE X'F5'.
*          02  DFHPF6   PIC X VALUE X'F6'.
*          02  DFHPF7   PIC X VALUE X'F7'.
*          02  DFHPF8   PIC X VALUE X'F8'.
*          02  DFHPF9   PIC X VALUE X'F9'.
*          02  DFHPF10  PIC X VALUE X'7A'.
*          02  DFHPF11  PIC X VALUE X'7B'.
*          02  DFHPF12  PIC X VALUE X'7C'.
*          02  DFHPF13  PIC X VALUE X'C1'.
*          02  DFHPF14  PIC X VALUE X'C2'.
*          02  DFHPF15  PIC X VALUE X'C3'.
*          02  DFHPF16  PIC X VALUE X'C4'.
*          02  DFHPF17  PIC X VALUE X'C5'.
*          02  DFHPF18  PIC X VALUE X'C6'.
*          02  DFHPF19  PIC X VALUE X'C7'.
*          02  DFHPF20  PIC X VALUE X'C8'.
*          02  DFHPF21  PIC X VALUE X'C9'.
*          02  DFHPF22  PIC X VALUE X'4A'.
*          02  DFHPF23  PIC X VALUE X'4B'.
*          02  DFHPF24  PIC X VALUE X'4C'.
*          02  DFHPA1   PIC X VALUE X'6C'.
*          02  DFHPA2   PIC X VALUE X'6E'.
*          02  DFHPA3   PIC X VALUE X'6B'.
*          02  DFHCLEAR PIC X VALUE X'6D'.
*
*      * EXEC INTERFACE BLOCK
*            02  EIBHEAD  PIC X(8).
*            02  EIBTIME  PIC 9(7) COMP-3.
*            02  EIBDATE  PIC 9(7) COMP-3.
*            02  EIBTRNID PIC X(4).
*            02  EIBTASKN PIC 9(7) COMP-3.
*            02  EIBTRMID PIC X(4).
*            02  FILLER   PIC X(2).
*            02  EIBCPOSN PIC 9(4) COMP.
*            02  EIBCALEN PIC 9(4) COMP.
*            02  EIBAID   PIC X.
*            02  EIBFN    PIC 9(4) COMP.
*            02  EIBRCODE PIC X(6).
*            02  EIBREQID PIC X(8).
*            02  EIBDS    PIC X(8).
*            02  EIBRSRCE PIC X(8).
*            02  EIBRESP  PIC 9(9) COMP.
*            02  EIBRESP2 PIC 9(9) COMP.
*            02  EIBPROG  PIC X(8).
*            02  EIBDTFRM PIC X.
         PRINT LIST,GEN,LISTUSE TURN PRINT LISTING ON FOR USER CODE GEN
TESTBEC5  CSECT                SWITCH TO PROCEDURE CODE AHEAD OF WS
         L     ZC_R0,0(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHEIBLK_PTR STORE PARM POINTER
         L     ZC_R0,4(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHCOMMAREA_PTR STORE PARM POINTER
         LARL  ZC_R1,=XL6'27F5C311C1D1'
         MVC   ZC_FILLER_V1,0(ZC_R1)
         LARL  ZC_R1,=CL52'TESTBEC5 TEST HANDLE, PUSH/POP AND GETMAIN/FX
               REEMAIN'
         MVC   ZC_FILLER_V2,0(ZC_R1)
         LARL  ZC_R1,=XL4'11C261'
         MVC   ZC_FILLER_V3,1(ZC_R1)
         LARL  ZC_R1,=CL14'PRESS PF KEY 4'
         MVC   ZC_FILLER_V4,0(ZC_R1)
         LARL  ZC_R1,=XL4'11C3F1'
         MVC   ZC_FILLER_V5,1(ZC_R1)
         LARL  ZC_R1,=CL26'CLEAR WILL END TASK EARLY'
         MVC   ZC_FILLER_V6,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C5C1'
         MVC   ZC_FILLER_V7,0(ZC_R1)
         LARL  ZC_R1,=CL20'THAT KEY WASN''T PF4'
         MVC   ZC_FILLER_V8,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C761'
         MVC   ZC_FILLER_V9,0(ZC_R1)
         LARL  ZC_R1,=CL20'THAT KEY WASN''T PF5'
         MVC   ZC_FILLER_V10,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114AC1'
         MVC   ZC_FILLER_V11,0(ZC_R1)
         LARL  ZC_R1,=CL20'THAT KEY WASN''T PF6'
         MVC   ZC_FILLER_V12,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C5C1'
         MVC   ZC_FILLER_V13,0(ZC_R1)
         LARL  ZC_R1,=CL20'I GOT PF4, THANKYOU '
         MVC   ZC_FILLER_V14,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C6D1'
         MVC   ZC_FILLER_V15,0(ZC_R1)
         LARL  ZC_R1,=CL14'PRESS PF KEY 5'
         MVC   ZC_FILLER_V16,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C761'
         MVC   ZC_FILLER_V17,0(ZC_R1)
         LARL  ZC_R1,=CL20'I GOT PF5, THANKYOU '
         MVC   ZC_FILLER_V18,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C8F1'
         MVC   ZC_FILLER_V19,0(ZC_R1)
         LARL  ZC_R1,=CL14'PRESS PF KEY 6'
         MVC   ZC_FILLER_V20,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114AC1'
         MVC   ZC_FILLER_V21,0(ZC_R1)
         LARL  ZC_R1,=CL20'I GOT PF6, THANKYOU '
         MVC   ZC_FILLER_V22,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114BD1'
         MVC   ZC_FILLER_V23,0(ZC_R1)
         LARL  ZC_R1,=CL28'PGMIDERR WILL NOW BE RAISED'
         MVC   ZC_FILLER_V24,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114C61'
         MVC   ZC_FILLER_V25,0(ZC_R1)
         LARL  ZC_R1,=CL30'PGMIDERR CONDITION HANDLED OK'
         MVC   ZC_FILLER_V26,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114DF1'
         MVC   ZC_FILLER_V27,0(ZC_R1)
         LARL  ZC_R1,=CL34'PGMIDERR WILL NOW BE RAISED AGAIN'
         MVC   ZC_FILLER_V28,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114FC1'
         MVC   ZC_FILLER_V29,0(ZC_R1)
         LARL  ZC_R1,=CL26'ERROR CONDITION HANDLED OK'
         MVC   ZC_FILLER_V30,0(ZC_R1)
         LARL  ZC_R1,=XL4'C31150D1'
         MVC   ZC_FILLER_V31,0(ZC_R1)
         LARL  ZC_R1,=CL28'IGNORE CONDITION HANDLED OK'
         MVC   ZC_FILLER_V32,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D161'
         MVC   ZC_FILLER_V33,0(ZC_R1)
         LARL  ZC_R1,=CL40'GETMAIN/FREEMAIN TESTING, OK IF NO ABEND'
         MVC   ZC_FILLER_V34,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D2F1'
         MVC   ZC_FILLER_V35,0(ZC_R1)
         LARL  ZC_R1,=CL34'PGMIDERR WILL NOW CAUSE ABEND AEI0'
         MVC   ZC_FILLER_V36,0(ZC_R1)
         LARL  ZC_R1,=XL4'11D4C1'
         MVC   ZC_FILLER_V37,1(ZC_R1)
         LARL  ZC_R1,=CL12'PRESS CLEAR'
         MVC   ZC_FILLER_V38,0(ZC_R1)
         MVI   INIT5,X'05'
         MVI   DFHNULL,X'00'
         MVI   DFHENTER,X'7D'
         MVI   DFHPF1,X'F1'
         MVI   DFHPF2,X'F2'
         MVI   DFHPF3,X'F3'
         MVI   DFHPF4,X'F4'
         MVI   DFHPF5,X'F5'
         MVI   DFHPF6,X'F6'
         MVI   DFHPF7,X'F7'
         MVI   DFHPF8,X'F8'
         MVI   DFHPF9,X'F9'
         MVI   DFHPF10,X'7A'
         MVI   DFHPF11,X'7B'
         MVI   DFHPF12,X'7C'
         MVI   DFHPF13,X'C1'
         MVI   DFHPF14,X'C2'
         MVI   DFHPF15,X'C3'
         MVI   DFHPF16,X'C4'
         MVI   DFHPF17,X'C5'
         MVI   DFHPF18,X'C6'
         MVI   DFHPF19,X'C7'
         MVI   DFHPF20,X'C8'
         MVI   DFHPF21,X'C9'
         MVI   DFHPF22,X'4A'
         MVI   DFHPF23,X'4B'
         MVI   DFHPF24,X'4C'
         MVI   DFHPA1,X'6C'
         MVI   DFHPA2,X'6E'
         MVI   DFHPA3,X'6B'
         MVI   DFHCLEAR,X'6D'
         MVI   ZC_FILLER_V39,C' '
         MVI   ZC_FILLER_V40,C' '
         MVI   ZC_FILLER_V41,C' '
         MVI   ZC_FILLER_V42,C' '
         MVI   ZC_FILLER_V43,C' '
         MVHHI RETURN_CODE,0
*             MOVE LENGTH OF HEAD    TO HEADL.
*ZC    162         MOVE  LENGTH,OF,HEAD,TO,HEADL
         MVHHI HEADL,102
*             MOVE LENGTH OF BADMSG1 TO BADMSG1L.
*ZC    163         MOVE  LENGTH,OF,BADMSG1,TO,BADMSG1L
         MVHHI BADMSG1L,23
*             MOVE LENGTH OF BADMSG2 TO BADMSG2L.
*ZC    164         MOVE  LENGTH,OF,BADMSG2,TO,BADMSG2L
         MVHHI BADMSG2L,23
*             MOVE LENGTH OF BADMSG3 TO BADMSG3L.
*ZC    165         MOVE  LENGTH,OF,BADMSG3,TO,BADMSG3L
         MVHHI BADMSG3L,23
*             MOVE LENGTH OF PF4MSG  TO PF4MSGL.
*ZC    166         MOVE  LENGTH,OF,PF4MSG,TO,PF4MSGL
         MVHHI PF4MSGL,24
*             MOVE LENGTH OF PF5ASK  TO PF5ASKL.
*ZC    167         MOVE  LENGTH,OF,PF5ASK,TO,PF5ASKL
         MVHHI PF5ASKL,18
*             MOVE LENGTH OF PF5MSG  TO PF5MSGL.
*ZC    168         MOVE  LENGTH,OF,PF5MSG,TO,PF5MSGL
         MVHHI PF5MSGL,24
*             MOVE LENGTH OF PF6ASK  TO PF6ASKL.
*ZC    169         MOVE  LENGTH,OF,PF6ASK,TO,PF6ASKL
         MVHHI PF6ASKL,18
*             MOVE LENGTH OF PF6MSG  TO PF6MSGL.
*ZC    170         MOVE  LENGTH,OF,PF6MSG,TO,PF6MSGL
         MVHHI PF6MSGL,24
*             MOVE LENGTH OF PGMMSG  TO PGMMSGL.
*ZC    171         MOVE  LENGTH,OF,PGMMSG,TO,PGMMSGL
         MVHHI PGMMSGL,31
*             MOVE LENGTH OF PGMMSGE TO PGMMSGEL.
*ZC    172         MOVE  LENGTH,OF,PGMMSGE,TO,PGMMSGEL
         MVHHI PGMMSGEL,33
*             MOVE LENGTH OF PGMMSG2 TO PGMMSG2L.
*ZC    173         MOVE  LENGTH,OF,PGMMSG2,TO,PGMMSG2L
         MVHHI PGMMSG2L,37
*             MOVE LENGTH OF ERRMSG  TO ERRMSGL.
*ZC    174         MOVE  LENGTH,OF,ERRMSG,TO,ERRMSGL
         MVHHI ERRMSGL,30
*             MOVE LENGTH OF IGNMSG  TO IGNMSGL.
*ZC    175         MOVE  LENGTH,OF,IGNMSG,TO,IGNMSGL
         MVHHI IGNMSGL,31
*             MOVE LENGTH OF GTMMSG  TO GTMMSGL.
*ZC    176         MOVE  LENGTH,OF,GTMMSG,TO,GTMMSGL
         MVHHI GTMMSGL,44
*             MOVE LENGTH OF ABDMSG  TO ABDMSGL.
*ZC    177         MOVE  LENGTH,OF,ABDMSG,TO,ABDMSGL
         MVHHI ABDMSGL,52
*             EXEC CICS SEND FROM(HEAD) LENGTH(HEADL) END-EXEC.
*ZC    178         EXEC  CICS,SEND,FROM(HEAD),LENGTH(HEADL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),HEADL   SET LENGTH FROM LABEL
         LA    R0,HEAD           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         J     P0404BYP_0698   EXIT
*
P0404    DS    0H
P0404FN  DS    XL2                FUNCTION CODE
P0404EIB DS    AL4                EIB
P0404TCT DS    AL4                TCTTE
P0404FRM DS    AL4                FROM
P0404LEN DS    AL2                LENGTH
P0404NOH DS    X                  FF=NOHANDLE
         DS    X
P0404RSP DS    AL4                RESP
P0404RS2 DS    AL4                RESP2
P0404END EQU   *                  END MARKER
*
P0404BYP_0698 DS 0H
*      * CREATE AND MODIFY 1ST AID BLOCK
*             EXEC CICS HANDLE AID
*                  ENTER(BADKEY1)
*                  ANYKEY(BADKEY1)
*                  PF4(GOTPF4) CLEAR
*ZC    180         EXEC  CICS,HANDLE,AID,ENTER(BADKEY1),ANYKEY(BADKEY1)X
               ,PF4(GOTPF4),CLEAR
         LARL  R1,P0206         ADDRESS SOURCE
         LARL  R15,P0206        ADDRESS TARGET
         XC    0(P0206END-P0206,R15),0(R1) XC IT
         LARL  R1,=X'0206'         ADDRESS SOURCE
         LARL  R15,P0206FN        ADDRESS TARGET
         MVC   0(L'P0206FN,R15),0(R1) MVC IT
         LARL  R1,P0206EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0206TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0206ADS        R1=ADDRESS AID NUMBERS
         LARL  R14,P0206ADR       R14=ADDRESSES OR FF IF CANCEL
         MVI   0(R1),2       SET AID NUMBER
         LARL  R0,PG_BADKEY1     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),1       SET AID NUMBER
         LARL  R0,PG_BADKEY1     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),10       SET AID NUMBER
         LARL  R0,PG_GOTPF4     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),33-30    SET AID NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         LA    R0,DFHEIAID        ADDRESS OF DFHEIAID
         LARL  R1,P0206AID         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0206)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         J     P0206BYP_0707   EXIT
*
P0206    DS    0H
P0206FN  DS    XL2                FUNCTION CODE
P0206EIB DS    AL4                EIB
P0206TCT DS    AL4                TCTTE
P0206AID DS    AL4                A(DFHEIAID)
P0206ADS DS    XL30               ROOM FOR 30 AIDS
P0206ADR DS    30AL4              ROOM FOR 30 ADDRESSES, FF......=CLEAR
P0206RSP DS    AL4                RESP
P0206RS2 DS    AL4                RESP2
P0206END EQU   *                  END MARKER
         DS    0H
*
P0206BYP_0707 DS 0H
*                  END-EXEC.
*      *  KEYPRES1 EQU   *
*         KEYPRES1.
PG_KEYPRES1  DS    0H
*             EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.
*ZC    187         EXEC  CICS,RECEIVE,INTO(RECAREA),LENGTH(RECLEN)
         LARL  R1,P0402         ADDRESS SOURCE
         LARL  R15,P0402        ADDRESS TARGET
         XC    0(P0402END-P0402,R15),0(R1) XC IT
         LARL  R1,=X'0402'         ADDRESS SOURCE
         LARL  R15,P0402FN        ADDRESS TARGET
         MVC   0(L'P0402FN,R15),0(R1) MVC IT
         LARL  R1,P0402EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0402TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R15,P0402ADB       ADDRESS TARGET
         MVC   0(4,R15),DFHEIAID  SET AID BLOCK ADDRESS
         LA    R0,RECAREA           R0=ADDRESS OF INTO
         LARL  R1,P0402INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'RECAREA         R0=LENGTH OF INTO
         LARL  R1,P0402INL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,RECLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0402LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0402HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0402)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0402NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0402BYP_0717   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0402BYP_0717   EXIT IF NONE
* LENGERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0402BYP_0717) ENTRYPOINT FOR IGNORE CONDITION
*
P0402    DS    0H
P0402FN  DS    XL2                FUNCTION CODE
P0402EIB DS    AL4                EIB
P0402TCT DS    AL4                TCTTE
P0402ADB DS    AL4                ADBLK
P0402INT DS    AL4                INTO
P0402INL DS    AL2                L'INTO
P0402LEN DS    AL4                LENGTH
P0402TGR DS    XL4                TGET RESPONSE
P0402HCN DS    AL4                A(DFHEIHCN)
P0402AID DS    AL4                HANDLE AID ADDRESS
P0402NOW DS    X                  FF=NOWAIT
         DS    X
P0402NOH DS    X                  FF=NOHANDLE
         DS    X
P0402RSP DS    AL4                RESP
P0402RS2 DS    AL4                RESP2
P0402END EQU   *                  END MARKER
         DS    0H
*
P0402BYP_0717 DS 0H
         LARL  R15,P0402AID       ADDRESS TARGET
         ICM   R0,15,0(R15)       ANY HANDLE AID ?
         JZ    P0402_0717_01  EXIT IF NONE
         BR    R0                 GO TO HANDLE AID ROUTINE
*
P0402_0717_01 EQU *
*      *  CLI   EIBAID,DFHCLEAR    CLEAR PRESSED ?
*      *  BE    RETURN             END TASK IF IT IS
*      *  B     KEYPRES1           LOOP
*             IF EIBAID = DFHCLEAR THEN GO TO ALLDONE
*ZC    191         IF    EIBAID,=,DFHCLEAR,THEN
         CLC   EIBAID,DFHCLEAR
         BRC   15-ZC_EQ,PG_IF_1_1
*ZC    191         GO    TO,ALLDONE
         J     PG_ALLDONE
*             ELSE GO TO KEYPRES1.
*ZC    192         ELSE
         J     PG_IF_1_E
PG_IF_1_1  DS    0H  ELSE
*      * BADKEY1  EQU   *
*ZC    192         GO    TO,KEYPRES1
         J     PG_KEYPRES1
PG_IF_1_E  DS    0H  END_IF
*         BADKEY1.
PG_KEYPRES1_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BADKEY1  DS    0H
*             EXEC CICS SEND FROM(BADMSG1) LENGTH(BADMSG1L) END-EXEC.
*ZC    195         EXEC  CICS,SEND,FROM(BADMSG1),LENGTH(BADMSG1L)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),BADMSG1L   SET LENGTH FROM LABEL
         LA    R0,BADMSG1           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*      *  B     KEYPRES1           WAIT FOR NEXT KEY
*             GO TO KEYPRES1.
*      * GOTPF4   EQU   *
*ZC    197         GO    TO,KEYPRES1
         J     PG_KEYPRES1
*         GOTPF4.
PG_BADKEY1_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GOTPF4  DS    0H
*             EXEC CICS SEND FROM(PF4MSG) LENGTH(PF4MSGL) END-EXEC.
*ZC    200         EXEC  CICS,SEND,FROM(PF4MSG),LENGTH(PF4MSGL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),PF4MSGL   SET LENGTH FROM LABEL
         LA    R0,PF4MSG           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*             EXEC CICS SEND FROM(PF5ASK) LENGTH(PF5ASKL) END-EXEC.
*ZC    201         EXEC  CICS,SEND,FROM(PF5ASK),LENGTH(PF5ASKL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),PF5ASKL   SET LENGTH FROM LABEL
         LA    R0,PF5ASK           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*      * CREATE 2ND AID BLOCK
*             EXEC CICS PUSH HANDLE END-EXEC.
*ZC    203         EXEC  CICS,PUSH,HANDLE
         LARL  R1,P020C         ADDRESS SOURCE
         LARL  R15,P020C        ADDRESS TARGET
         XC    0(P020CEND-P020C,R15),0(R1) XC IT
         LARL  R1,=X'020C'         ADDRESS SOURCE
         LARL  R15,P020CFN        ADDRESS TARGET
         MVC   0(L'P020CFN,R15),0(R1) MVC IT
         LARL  R1,P020CEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P020CTCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R15,P020CAID       ADDRESS TARGET
         MVC   0(4,R15),DFHEIAID  SET AID BLOCK ADDRESS
         LARL  R15,P020CHCN       ADDRESS TARGET
         MVC   0(4,R15),DFHEIHCN  SET HANDLE CONDITION BLOCK ADDRESS
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P020C)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         J     P020CBYP_0778   EXIT
*
P020C    DS    0H
P020CFN  DS    XL2                FUNCTION CODE
P020CEIB DS    AL4                EIB
P020CTCT DS    AL4                TCTTE
P020CAID DS    AL4                AID BLOCK ADDRESS
P020CHCN DS    AL4                HANDLE CONDITION BLOCK ADDRESS
P020CRSP DS    AL4                RESP
P020CRS2 DS    AL4                RESP2
P020CEND EQU   *                  END MARKER
         DS    0H
*
P020CBYP_0778 DS 0H
*      * MODIFY 2ND AID BLOCK
*             EXEC CICS HANDLE AID
*                  ENTER(BADKEY2)
*                  ANYKEY(BADKEY2)
*                  PF5(GOTPF5) CLEAR
*ZC    205         EXEC  CICS,HANDLE,AID,ENTER(BADKEY2),ANYKEY(BADKEY2)X
               ,PF5(GOTPF5),CLEAR
         LARL  R1,P0206         ADDRESS SOURCE
         LARL  R15,P0206        ADDRESS TARGET
         XC    0(P0206END-P0206,R15),0(R1) XC IT
         LARL  R1,=X'0206'         ADDRESS SOURCE
         LARL  R15,P0206FN        ADDRESS TARGET
         MVC   0(L'P0206FN,R15),0(R1) MVC IT
         LARL  R1,P0206EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0206TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0206ADS        R1=ADDRESS AID NUMBERS
         LARL  R14,P0206ADR       R14=ADDRESSES OR FF IF CANCEL
         MVI   0(R1),2       SET AID NUMBER
         LARL  R0,PG_BADKEY2     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),1       SET AID NUMBER
         LARL  R0,PG_BADKEY2     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),11       SET AID NUMBER
         LARL  R0,PG_GOTPF5     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),33-30    SET AID NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         LA    R0,DFHEIAID        ADDRESS OF DFHEIAID
         LARL  R1,P0206AID         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0206)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*                  END-EXEC.
*      * KEYPRES2 EQU   *
*         KEYPRES2.
PG_GOTPF4_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_KEYPRES2  DS    0H
*             EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.
*ZC    212         EXEC  CICS,RECEIVE,INTO(RECAREA),LENGTH(RECLEN)
         LARL  R1,P0402         ADDRESS SOURCE
         LARL  R15,P0402        ADDRESS TARGET
         XC    0(P0402END-P0402,R15),0(R1) XC IT
         LARL  R1,=X'0402'         ADDRESS SOURCE
         LARL  R15,P0402FN        ADDRESS TARGET
         MVC   0(L'P0402FN,R15),0(R1) MVC IT
         LARL  R1,P0402EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0402TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R15,P0402ADB       ADDRESS TARGET
         MVC   0(4,R15),DFHEIAID  SET AID BLOCK ADDRESS
         LA    R0,RECAREA           R0=ADDRESS OF INTO
         LARL  R1,P0402INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'RECAREA         R0=LENGTH OF INTO
         LARL  R1,P0402INL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,RECLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0402LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0402HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0402)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0402NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0402BYP_0795   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0402BYP_0795   EXIT IF NONE
* LENGERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0402BYP_0795) ENTRYPOINT FOR IGNORE CONDITION
*
P0402BYP_0795 DS 0H
         LARL  R15,P0402AID       ADDRESS TARGET
         ICM   R0,15,0(R15)       ANY HANDLE AID ?
         JZ    P0402_0795_01  EXIT IF NONE
         BR    R0                 GO TO HANDLE AID ROUTINE
*
P0402_0795_01 EQU *
*      *  CLI   EIBAID,DFHCLEAR    CLEAR PRESSED ?
*      *  BE    RETURN             END TASK IF IT IS
*      *  B     KEYPRES2           LOOP
*             IF EIBAID = DFHCLEAR THEN GO TO ALLDONE
*ZC    216         IF    EIBAID,=,DFHCLEAR,THEN
         CLC   EIBAID,DFHCLEAR
         BRC   15-ZC_EQ,PG_IF_2_1
*ZC    216         GO    TO,ALLDONE
         J     PG_ALLDONE
*             ELSE GO TO KEYPRES2.
*ZC    217         ELSE
         J     PG_IF_2_E
PG_IF_2_1  DS    0H  ELSE
*      * BADKEY2  EQU   *
*ZC    217         GO    TO,KEYPRES2
         J     PG_KEYPRES2
PG_IF_2_E  DS    0H  END_IF
*         BADKEY2.
PG_KEYPRES2_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BADKEY2  DS    0H
*             EXEC CICS SEND FROM(BADMSG2) LENGTH(BADMSG2L) END-EXEC.
*ZC    220         EXEC  CICS,SEND,FROM(BADMSG2),LENGTH(BADMSG2L)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),BADMSG2L   SET LENGTH FROM LABEL
         LA    R0,BADMSG2           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*      *  B     KEYPRES2           WAIT FOR NEXT KEY
*             GO TO KEYPRES2.
*      * GOTPF5   EQU   *
*ZC    222         GO    TO,KEYPRES2
         J     PG_KEYPRES2
*         GOTPF5.
PG_BADKEY2_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GOTPF5  DS    0H
*             EXEC CICS SEND FROM(PF5MSG) LENGTH(PF5MSGL) END-EXEC.
*ZC    225         EXEC  CICS,SEND,FROM(PF5MSG),LENGTH(PF5MSGL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),PF5MSGL   SET LENGTH FROM LABEL
         LA    R0,PF5MSG           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*             EXEC CICS SEND FROM(PF6ASK) LENGTH(PF6ASKL) END-EXEC.
*ZC    226         EXEC  CICS,SEND,FROM(PF6ASK),LENGTH(PF6ASKL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),PF6ASKL   SET LENGTH FROM LABEL
         LA    R0,PF6ASK           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*      * DELETE 2ND AID BLOCK
*             EXEC CICS POP HANDLE END-EXEC.
*ZC    228         EXEC  CICS,POP,HANDLE
         LARL  R1,P020E         ADDRESS SOURCE
         LARL  R15,P020E        ADDRESS TARGET
         XC    0(P020EEND-P020E,R15),0(R1) XC IT
         LARL  R1,=X'020E'         ADDRESS SOURCE
         LARL  R15,P020EFN        ADDRESS TARGET
         MVC   0(L'P020EFN,R15),0(R1) MVC IT
         LARL  R1,P020EEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P020ETCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LA    R0,DFHEIAID        R0=ADDRESS OF DFHEIAID
         LARL  R1,P020EAID         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,DFHEIHCN        R1=ADDRESS OF DFHEIHCN
         LARL  R1,P020EHCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P020E)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P020ENOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P020EBYP_0856   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P020EBYP_0856   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P020EBYP_0856) ENTRYPOINT FOR IGNORE CONDITION
*
P020E    DS    0H
P020EFN  DS    XL2                FUNCTION CODE
P020EEIB DS    AL4                EIB
P020ETCT DS    AL4                TCTTE
P020EAID DS    AL4                A(DFHEIAID)
P020EHCN DS    AL4                A(DFHEIHCN)
P020ENOH DS    X                  FF=NOHANDLE
         DS    X
P020ERSP DS    AL4                RESP
P020ERS2 DS    AL4                RESP2
P020EEND EQU   *                  END MARKER
         DS    0H
*
P020EBYP_0856 DS 0H
*      * MODIFY 1ST AID BLOCK
*             EXEC CICS HANDLE AID
*                  ENTER(BADKEY3)
*                  ANYKEY(BADKEY3)
*                  PF4 PF6(GOTPF6) CLEAR
*ZC    230         EXEC  CICS,HANDLE,AID,ENTER(BADKEY3),ANYKEY(BADKEY3)X
               ,PF4,PF6(GOTPF6),CLEAR
         LARL  R1,P0206         ADDRESS SOURCE
         LARL  R15,P0206        ADDRESS TARGET
         XC    0(P0206END-P0206,R15),0(R1) XC IT
         LARL  R1,=X'0206'         ADDRESS SOURCE
         LARL  R15,P0206FN        ADDRESS TARGET
         MVC   0(L'P0206FN,R15),0(R1) MVC IT
         LARL  R1,P0206EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0206TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0206ADS        R1=ADDRESS AID NUMBERS
         LARL  R14,P0206ADR       R14=ADDRESSES OR FF IF CANCEL
         MVI   0(R1),2       SET AID NUMBER
         LARL  R0,PG_BADKEY3     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),1       SET AID NUMBER
         LARL  R0,PG_BADKEY3     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),40-30    SET AID NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),12       SET AID NUMBER
         LARL  R0,PG_GOTPF6     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),33-30    SET AID NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         LA    R0,DFHEIAID        ADDRESS OF DFHEIAID
         LARL  R1,P0206AID         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0206)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*                  END-EXEC.
*      * KEYPRES3 EQU   *
*         KEYPRES3.
PG_GOTPF5_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_KEYPRES3  DS    0H
*             EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.
*ZC    237         EXEC  CICS,RECEIVE,INTO(RECAREA),LENGTH(RECLEN)
         LARL  R1,P0402         ADDRESS SOURCE
         LARL  R15,P0402        ADDRESS TARGET
         XC    0(P0402END-P0402,R15),0(R1) XC IT
         LARL  R1,=X'0402'         ADDRESS SOURCE
         LARL  R15,P0402FN        ADDRESS TARGET
         MVC   0(L'P0402FN,R15),0(R1) MVC IT
         LARL  R1,P0402EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0402TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R15,P0402ADB       ADDRESS TARGET
         MVC   0(4,R15),DFHEIAID  SET AID BLOCK ADDRESS
         LA    R0,RECAREA           R0=ADDRESS OF INTO
         LARL  R1,P0402INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'RECAREA         R0=LENGTH OF INTO
         LARL  R1,P0402INL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,RECLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0402LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0402HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0402)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0402NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0402BYP_0876   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0402BYP_0876   EXIT IF NONE
* LENGERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0402BYP_0876) ENTRYPOINT FOR IGNORE CONDITION
*
P0402BYP_0876 DS 0H
         LARL  R15,P0402AID       ADDRESS TARGET
         ICM   R0,15,0(R15)       ANY HANDLE AID ?
         JZ    P0402_0876_01  EXIT IF NONE
         BR    R0                 GO TO HANDLE AID ROUTINE
*
P0402_0876_01 EQU *
*      *  CLI   EIBAID,DFHCLEAR    CLEAR PRESSED ?
*      *  BE    RETURN             END TASK IF IT IS
*      *  B     KEYPRES3           LOOP
*             IF EIBAID = DFHCLEAR THEN GO TO ALLDONE
*ZC    241         IF    EIBAID,=,DFHCLEAR,THEN
         CLC   EIBAID,DFHCLEAR
         BRC   15-ZC_EQ,PG_IF_3_1
*ZC    241         GO    TO,ALLDONE
         J     PG_ALLDONE
*             ELSE GO TO KEYPRES3.
*ZC    242         ELSE
         J     PG_IF_3_E
PG_IF_3_1  DS    0H  ELSE
*      * BADKEY3  EQU   *
*ZC    242         GO    TO,KEYPRES3
         J     PG_KEYPRES3
PG_IF_3_E  DS    0H  END_IF
*         BADKEY3.
PG_KEYPRES3_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BADKEY3  DS    0H
*             EXEC CICS SEND FROM(BADMSG3) LENGTH(BADMSG3L) END-EXEC.
*ZC    245         EXEC  CICS,SEND,FROM(BADMSG3),LENGTH(BADMSG3L)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),BADMSG3L   SET LENGTH FROM LABEL
         LA    R0,BADMSG3           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*      *  B     KEYPRES3           WAIT FOR NEXT KEY
*             GO TO KEYPRES3.
*      * GOTPF6   EQU   *
*ZC    247         GO    TO,KEYPRES3
         J     PG_KEYPRES3
*         GOTPF6.
PG_BADKEY3_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GOTPF6  DS    0H
*             EXEC CICS SEND FROM(PF6MSG) LENGTH(PF6MSGL) END-EXEC.
*ZC    250         EXEC  CICS,SEND,FROM(PF6MSG),LENGTH(PF6MSGL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),PF6MSGL   SET LENGTH FROM LABEL
         LA    R0,PF6MSG           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*      * DELETE 1ST AID BLOCK
*             EXEC CICS POP HANDLE END-EXEC.
*ZC    252         EXEC  CICS,POP,HANDLE
         LARL  R1,P020E         ADDRESS SOURCE
         LARL  R15,P020E        ADDRESS TARGET
         XC    0(P020EEND-P020E,R15),0(R1) XC IT
         LARL  R1,=X'020E'         ADDRESS SOURCE
         LARL  R15,P020EFN        ADDRESS TARGET
         MVC   0(L'P020EFN,R15),0(R1) MVC IT
         LARL  R1,P020EEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P020ETCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LA    R0,DFHEIAID        R0=ADDRESS OF DFHEIAID
         LARL  R1,P020EAID         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,DFHEIHCN        R1=ADDRESS OF DFHEIHCN
         LARL  R1,P020EHCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P020E)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P020ENOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P020EBYP_0929   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P020EBYP_0929   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P020EBYP_0929) ENTRYPOINT FOR IGNORE CONDITION
*
P020EBYP_0929 DS 0H
*      * CREATE AND MODIFY 1ST CONDITION BLOCK
*             EXEC CICS HANDLE CONDITION PGMIDERR(GOTPGMER) END-EXEC.
*ZC    254         EXEC  CICS,HANDLE,CONDITION,PGMIDERR(GOTPGMER)
         LARL  R1,P0204         ADDRESS SOURCE
         LARL  R15,P0204        ADDRESS TARGET
         XC    0(P0204END-P0204,R15),0(R1) XC IT
         LARL  R1,=X'0204'         ADDRESS SOURCE
         LARL  R15,P0204FN        ADDRESS TARGET
         MVC   0(L'P0204FN,R15),0(R1) MVC IT
         LARL  R1,P0204EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0204TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0204CND        R1=ADDRESS CONDITION NUMBERS
         LARL  R14,P0204ADR       R14=ADDRESSES OR FF IF CANCEL
         MVI   0(R1),27       SET CONDITION NUMBER
         LARL  R0,PG_GOTPGMER     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0204HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0204)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         J     P0204BYP_0939   EXIT
*
P0204    DS    0H
P0204FN  DS    XL2                FUNCTION CODE
P0204EIB DS    AL4                EIB
P0204TCT DS    AL4                TCTTE
P0204HCN DS    AL4                A(DFHEIHCN)
P0204CND DS    XL30               ROOM FOR 30 CONDITIONS
P0204ADR DS    30AL4              ROOM FOR 30 ADDRESSES, FF......=CLEAR
P0204RSP DS    AL4                RESP
P0204RS2 DS    AL4                RESP2
P0204END EQU   *                  END MARKER
         DS    0H
*
P0204BYP_0939 DS 0H
*             EXEC CICS SEND FROM(PGMMSG) LENGTH(PGMMSGL) END-EXEC.
*ZC    255         EXEC  CICS,SEND,FROM(PGMMSG),LENGTH(PGMMSGL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),PGMMSGL   SET LENGTH FROM LABEL
         LA    R0,PGMMSG           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*      * THIS SHOULD RAISE PGMIDERR
*             EXEC CICS LINK PROGRAM('BADPROG1') END-EXEC.
*ZC    257         EXEC  CICS,LINK,PROGRAM('BADPROG1')
         LARL  R1,P0E02         ADDRESS SOURCE
         LARL  R15,P0E02        ADDRESS TARGET
         XC    0(P0E02END-P0E02,R15),0(R1) XC IT
         LARL  R1,=X'0E02'         ADDRESS SOURCE
         LARL  R15,P0E02FN        ADDRESS TARGET
         MVC   0(L'P0E02FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'BADPROG1'         ADDRESS SOURCE
         LARL  R15,P0E02PGM        ADDRESS TARGET
         MVC   0(L'P0E02PGM,R15),0(R1) MVC IT
         LARL  R1,P0E02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
* SPECIAL LINKAGE
         LARL  R1,P0E02           R1=PARAMETER LIST
         LARL  R14,P0E02RTN_0955 RETURN ADDRESS
         LRL   R15,=V(LCL0E02)    R15=EXTERNAL LINK MODULE ADDRESS
         BR    R15                GO TO IT
*
P0E02RTN_0955 EQU *
         LARL  R1,P0E02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E02BYP_0955   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E02BYP_0955   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E02BYP_0955) ENTRYPOINT FOR IGNORE CONDITION
*
P0E02    DS    0H
P0E02FN  DS    XL2                FUNCTION CODE
P0E02PGM DS    CL8                PROGRAM
P0E02EIB DS    AL4                EIB
P0E02COM DS    AL4                COMMAREA ADDRESS
P0E02CLN DS    XL2                COMMAREA LENGTH
P0E02LV0 DS    X                  FF=LINK LEVEL 0
         DS    X
P0E02NOH DS    X                  FF=NOHANDLE
         DS    X
P0E02RSP DS    AL4                RESP
P0E02RS2 DS    AL4                RESP2
P0E02END EQU   *                  END MARKER
         DS    0H
*
P0E02BYP_0955 DS 0H
         MVC   EIBCALEN,DFHEICAL  RESTORE EIB COMMAREA LENGTH
         MVC   EIBPROG,TCTTERET   RESTORE EIBPROG
         MVC   TCTTEINV,DFHEIINV  RESTORE INVOKINGPROG FOR ASSIGN
         MVC   TCTTERET,DFHEIRET  RESTORE RETURNPROG FOR ASSIGN
*      * NEXT1    EQU   *
*         NEXT1.
*      * CREATE 2ND CONDITION BLOCK
PG_GOTPF6_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_NEXT1  DS    0H
*             EXEC CICS PUSH HANDLE END-EXEC.
*ZC    261         EXEC  CICS,PUSH,HANDLE
         LARL  R1,P020C         ADDRESS SOURCE
         LARL  R15,P020C        ADDRESS TARGET
         XC    0(P020CEND-P020C,R15),0(R1) XC IT
         LARL  R1,=X'020C'         ADDRESS SOURCE
         LARL  R15,P020CFN        ADDRESS TARGET
         MVC   0(L'P020CFN,R15),0(R1) MVC IT
         LARL  R1,P020CEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P020CTCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R15,P020CAID       ADDRESS TARGET
         MVC   0(4,R15),DFHEIAID  SET AID BLOCK ADDRESS
         LARL  R15,P020CHCN       ADDRESS TARGET
         MVC   0(4,R15),DFHEIHCN  SET HANDLE CONDITION BLOCK ADDRESS
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P020C)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*      * MODIFY 2ND CONDITION BLOCK
*             EXEC CICS HANDLE CONDITION ERROR(GOTERROR) END-EXEC.
*ZC    263         EXEC  CICS,HANDLE,CONDITION,ERROR(GOTERROR)
         LARL  R1,P0204         ADDRESS SOURCE
         LARL  R15,P0204        ADDRESS TARGET
         XC    0(P0204END-P0204,R15),0(R1) XC IT
         LARL  R1,=X'0204'         ADDRESS SOURCE
         LARL  R15,P0204FN        ADDRESS TARGET
         MVC   0(L'P0204FN,R15),0(R1) MVC IT
         LARL  R1,P0204EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0204TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0204CND        R1=ADDRESS CONDITION NUMBERS
         LARL  R14,P0204ADR       R14=ADDRESSES OR FF IF CANCEL
         MVI   0(R1),1       SET CONDITION NUMBER
         LARL  R0,PG_GOTERROR     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0204HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0204)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*             EXEC CICS SEND FROM(PGMMSG2) LENGTH(PGMMSG2L) END-EXEC.
*ZC    264         EXEC  CICS,SEND,FROM(PGMMSG2),LENGTH(PGMMSG2L)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),PGMMSG2L   SET LENGTH FROM LABEL
         LA    R0,PGMMSG2           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*      * THIS SHOULD RAISE PGMIDERR, BUT HANDLED BY ERROR
*             EXEC CICS LINK PROGRAM('BADPROG2') END-EXEC.
*ZC    266         EXEC  CICS,LINK,PROGRAM('BADPROG2')
         LARL  R1,P0E02         ADDRESS SOURCE
         LARL  R15,P0E02        ADDRESS TARGET
         XC    0(P0E02END-P0E02,R15),0(R1) XC IT
         LARL  R1,=X'0E02'         ADDRESS SOURCE
         LARL  R15,P0E02FN        ADDRESS TARGET
         MVC   0(L'P0E02FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'BADPROG2'         ADDRESS SOURCE
         LARL  R15,P0E02PGM        ADDRESS TARGET
         MVC   0(L'P0E02PGM,R15),0(R1) MVC IT
         LARL  R1,P0E02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
* SPECIAL LINKAGE
         LARL  R1,P0E02           R1=PARAMETER LIST
         LARL  R14,P0E02RTN_0988 RETURN ADDRESS
         LRL   R15,=V(LCL0E02)    R15=EXTERNAL LINK MODULE ADDRESS
         BR    R15                GO TO IT
*
P0E02RTN_0988 EQU *
         LARL  R1,P0E02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E02BYP_0988   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E02BYP_0988   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E02BYP_0988) ENTRYPOINT FOR IGNORE CONDITION
*
P0E02BYP_0988 DS 0H
         MVC   EIBCALEN,DFHEICAL  RESTORE EIB COMMAREA LENGTH
         MVC   EIBPROG,TCTTERET   RESTORE EIBPROG
         MVC   TCTTEINV,DFHEIINV  RESTORE INVOKINGPROG FOR ASSIGN
         MVC   TCTTERET,DFHEIRET  RESTORE RETURNPROG FOR ASSIGN
*      * NEXT2    EQU   *
*         NEXT2.
PG_NEXT1_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_NEXT2  DS    0H
*             EXEC CICS HANDLE CONDITION ERROR END-EXEC.
*ZC    269         EXEC  CICS,HANDLE,CONDITION,ERROR
         LARL  R1,P0204         ADDRESS SOURCE
         LARL  R15,P0204        ADDRESS TARGET
         XC    0(P0204END-P0204,R15),0(R1) XC IT
         LARL  R1,=X'0204'         ADDRESS SOURCE
         LARL  R15,P0204FN        ADDRESS TARGET
         MVC   0(L'P0204FN,R15),0(R1) MVC IT
         LARL  R1,P0204EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0204TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0204CND        R1=ADDRESS CONDITION NUMBERS
         LARL  R14,P0204ADR       R14=ADDRESSES OR FF IF CANCEL
         MVI   0(R1),101-100 SET CONDITION NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0204HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0204)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*             EXEC CICS IGNORE CONDITION PGMIDERR END-EXEC.
*ZC    270         EXEC  CICS,IGNORE,CONDITION,PGMIDERR
         LARL  R1,P020A         ADDRESS SOURCE
         LARL  R15,P020A        ADDRESS TARGET
         XC    0(P020AEND-P020A,R15),0(R1) XC IT
         LARL  R1,=X'020A'         ADDRESS SOURCE
         LARL  R15,P020AFN        ADDRESS TARGET
         MVC   0(L'P020AFN,R15),0(R1) MVC IT
         LARL  R1,P020AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P020ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R14,P020ACND       R14=ADDRESS OF COND INDICATORS
         MVI   0(R14),27      SET CONDITION INDICATOR
         AHI   R14,1              BUMP POINTER
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P020AHCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P020A)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         J     P020ABYP_1006   EXIT
*
P020A    DS    0H
P020AFN  DS    XL2                FUNCTION CODE
P020AEIB DS    AL4                EIB
P020ATCT DS    AL4                TCTTE
P020AHCN DS    AL4                A(DFHEIHCN)
P020ACND DS    XL30               ROOM FOR 30 CONDITIONS
P020ARSP DS    AL4                RESP
P020ARS2 DS    AL4                RESP2
P020AEND EQU   *                  END MARKER
         DS    0H
*
P020ABYP_1006 DS 0H
*      * THIS SHOULD BE IGNORED
*             EXEC CICS LINK PROGRAM('BADPROG3') END-EXEC.
*ZC    272         EXEC  CICS,LINK,PROGRAM('BADPROG3')
         LARL  R1,P0E02         ADDRESS SOURCE
         LARL  R15,P0E02        ADDRESS TARGET
         XC    0(P0E02END-P0E02,R15),0(R1) XC IT
         LARL  R1,=X'0E02'         ADDRESS SOURCE
         LARL  R15,P0E02FN        ADDRESS TARGET
         MVC   0(L'P0E02FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'BADPROG3'         ADDRESS SOURCE
         LARL  R15,P0E02PGM        ADDRESS TARGET
         MVC   0(L'P0E02PGM,R15),0(R1) MVC IT
         LARL  R1,P0E02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
* SPECIAL LINKAGE
         LARL  R1,P0E02           R1=PARAMETER LIST
         LARL  R14,P0E02RTN_1014 RETURN ADDRESS
         LRL   R15,=V(LCL0E02)    R15=EXTERNAL LINK MODULE ADDRESS
         BR    R15                GO TO IT
*
P0E02RTN_1014 EQU *
         LARL  R1,P0E02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E02BYP_1014   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E02BYP_1014   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E02BYP_1014) ENTRYPOINT FOR IGNORE CONDITION
*
P0E02BYP_1014 DS 0H
         MVC   EIBCALEN,DFHEICAL  RESTORE EIB COMMAREA LENGTH
         MVC   EIBPROG,TCTTERET   RESTORE EIBPROG
         MVC   TCTTEINV,DFHEIINV  RESTORE INVOKINGPROG FOR ASSIGN
         MVC   TCTTERET,DFHEIRET  RESTORE RETURNPROG FOR ASSIGN
*             EXEC CICS SEND FROM(IGNMSG) LENGTH(IGNMSGL) END-EXEC.
*ZC    273         EXEC  CICS,SEND,FROM(IGNMSG),LENGTH(IGNMSGL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),IGNMSGL   SET LENGTH FROM LABEL
         LA    R0,IGNMSG           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*             EXEC CICS HANDLE CONDITION PGMIDERR END-EXEC.
*ZC    274         EXEC  CICS,HANDLE,CONDITION,PGMIDERR
         LARL  R1,P0204         ADDRESS SOURCE
         LARL  R15,P0204        ADDRESS TARGET
         XC    0(P0204END-P0204,R15),0(R1) XC IT
         LARL  R1,=X'0204'         ADDRESS SOURCE
         LARL  R15,P0204FN        ADDRESS TARGET
         MVC   0(L'P0204FN,R15),0(R1) MVC IT
         LARL  R1,P0204EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0204TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0204CND        R1=ADDRESS CONDITION NUMBERS
         LARL  R14,P0204ADR       R14=ADDRESSES OR FF IF CANCEL
         MVI   0(R1),127-100 SET CONDITION NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0204HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0204)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*      * THIS SHOULD SUCCEED
*             EXEC CICS LINK PROGRAM('MMMMCIC2') END-EXEC.
*ZC    276         EXEC  CICS,LINK,PROGRAM('MMMMCIC2')
         LARL  R1,P0E02         ADDRESS SOURCE
         LARL  R15,P0E02        ADDRESS TARGET
         XC    0(P0E02END-P0E02,R15),0(R1) XC IT
         LARL  R1,=X'0E02'         ADDRESS SOURCE
         LARL  R15,P0E02FN        ADDRESS TARGET
         MVC   0(L'P0E02FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'MMMMCIC2'         ADDRESS SOURCE
         LARL  R15,P0E02PGM        ADDRESS TARGET
         MVC   0(L'P0E02PGM,R15),0(R1) MVC IT
         LARL  R1,P0E02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
* SPECIAL LINKAGE
         LARL  R1,P0E02           R1=PARAMETER LIST
         LARL  R14,P0E02RTN_1038 RETURN ADDRESS
         LRL   R15,=V(LCL0E02)    R15=EXTERNAL LINK MODULE ADDRESS
         BR    R15                GO TO IT
*
P0E02RTN_1038 EQU *
         LARL  R1,P0E02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E02BYP_1038   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E02BYP_1038   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E02BYP_1038) ENTRYPOINT FOR IGNORE CONDITION
*
P0E02BYP_1038 DS 0H
         MVC   EIBCALEN,DFHEICAL  RESTORE EIB COMMAREA LENGTH
         MVC   EIBPROG,TCTTERET   RESTORE EIBPROG
         MVC   TCTTEINV,DFHEIINV  RESTORE INVOKINGPROG FOR ASSIGN
         MVC   TCTTERET,DFHEIRET  RESTORE RETURNPROG FOR ASSIGN
*      * GETMAIN/FREEMAIN TESTS
*             EXEC CICS GETMAIN SET(GET1) LENGTH(100) INITIMG(1)
*ZC    278         EXEC  CICS,GETMAIN,SET(GET1),LENGTH(100),INITIMG(1)
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(100)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(1)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         AHI   R1,8               +8
         ST    R1,GET1            SET GETMAIN ADDRESS FOR REQUESTOR
         J     P0C02BYP_1046   EXIT
*
P0C02    DS    0H
P0C02FN  DS    XL2                FUNCTION CODE
P0C02EIB DS    AL4                EIB
P0C02TCT DS    AL4                TCTTE
P0C02LEN DS    AL4                LENGTH/FLENGTH
P0C02INM DS    X                  FF=INITIMG SPECIFIED
         DS    X
P0C02INT DS    X                  INITIMG
         DS    X
P0C02GMA DS    AL4                GETMAIN ADDRESS
P0C02NOH DS    X                  FF=NOHANDLE
         DS    X
P0C02RSP DS    AL4                RESP
P0C02RS2 DS    AL4                RESP2
P0C02END EQU   *                  END MARKER
         DS    0H
*
P0C02BYP_1046 DS 0H
*                       END-EXEC.
*      *  ST    R5,GET1            SAVE ADDRESS
*             EXEC CICS GETMAIN SET(GET2) LENGTH(200) INITIMG(X'02')
*ZC    281         EXEC  CICS,GETMAIN,SET(GET2),LENGTH(200),INITIMG(X'0X
               2')
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(200)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(X'02')  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         AHI   R1,8               +8
         ST    R1,GET2            SET GETMAIN ADDRESS FOR REQUESTOR
*                       END-EXEC.
*      *  ST    R5,GET2            SAVE ADDRESS
*             EXEC CICS GETMAIN SET(GET3) LENGTH(300) INITIMG(B'11')
*ZC    284         EXEC  CICS,GETMAIN,SET(GET3),LENGTH(300),INITIMG(B'1X
               1')
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(300)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(B'11')  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         AHI   R1,8               +8
         ST    R1,GET3            SET GETMAIN ADDRESS FOR REQUESTOR
*                       END-EXEC.
*      *  ST    R5,GET3            SAVE ADDRESS
*             EXEC CICS GETMAIN SET(GET4) LENGTH(400) INITIMG(4)
*ZC    287         EXEC  CICS,GETMAIN,SET(GET4),LENGTH(400),INITIMG(4)
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(400)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(4)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         AHI   R1,8               +8
         ST    R1,GET4            SET GETMAIN ADDRESS FOR REQUESTOR
*                       END-EXEC.
*      *  ST    R5,GET4            SAVE ADDRESS
*             EXEC CICS GETMAIN SET(GET5) LENGTH(500) INITIMG(INIT5)
*ZC    290         EXEC  CICS,GETMAIN,SET(GET5),LENGTH(500),INITIMG(INIX
               T5)
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(500)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),INIT5  SET PADDING BYTE FROM LABEL
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         AHI   R1,8               +8
         ST    R1,GET5            SET GETMAIN ADDRESS FOR REQUESTOR
*                       END-EXEC.
*      *  ST    R5,GET5            SAVE ADDRESS
*      * FREEMAIN IN RANDOM ORDER...42153
*      *  L     R5,GET4            ADDRESS TO FREEMAIN
*             EXEC CICS FREEMAIN DATAPOINTER(GET4) END-EXEC.
*ZC    295         EXEC  CICS,FREEMAIN,DATAPOINTER(GET4)
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R0,GET4        POINTER TO FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_1091   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_1091   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_1091) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04    DS    0H
P0C04FN  DS    XL2                FUNCTION CODE
P0C04EIB DS    AL4                EIB
P0C04TCT DS    AL4                TCTTE
P0C04FMA DS    AL4                FREEMAIN ADDRESS
P0C04NOH DS    X                  FF=NOHANDLE
         DS    X
P0C04RSP DS    AL4                RESP
P0C04RS2 DS    AL4                RESP2
P0C04END EQU   *                  END MARKER
         DS    0H
*
P0C04BYP_1091 DS 0H
*             EXEC CICS FREEMAIN DATAPOINTER(GET2) END-EXEC.
*ZC    296         EXEC  CICS,FREEMAIN,DATAPOINTER(GET2)
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R0,GET2        POINTER TO FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_1100   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_1100   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_1100) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_1100 DS 0H
*      *  L     R5,GET1            ADDRESS TO FREEMAIN
*             EXEC CICS FREEMAIN DATAPOINTER(GET1) END-EXEC.
*ZC    298         EXEC  CICS,FREEMAIN,DATAPOINTER(GET1)
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R0,GET1        POINTER TO FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_1109   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_1109   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_1109) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_1109 DS 0H
*             EXEC CICS FREEMAIN DATAPOINTER(GET5) END-EXEC.
*ZC    299         EXEC  CICS,FREEMAIN,DATAPOINTER(GET5)
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R0,GET5        POINTER TO FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_1118   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_1118   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_1118) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_1118 DS 0H
*             EXEC CICS FREEMAIN DATAPOINTER(GET3) END-EXEC
*ZC    300         EXEC  CICS,FREEMAIN,DATAPOINTER(GET3)
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R0,GET3        POINTER TO FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_1127   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_1127   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_1127) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_1127 DS 0H
*             EXEC CICS IGNORE CONDITION INVREQ END-EXEC.
*ZC    301         EXEC  CICS,IGNORE,CONDITION,INVREQ
         LARL  R1,P020A         ADDRESS SOURCE
         LARL  R15,P020A        ADDRESS TARGET
         XC    0(P020AEND-P020A,R15),0(R1) XC IT
         LARL  R1,=X'020A'         ADDRESS SOURCE
         LARL  R15,P020AFN        ADDRESS TARGET
         MVC   0(L'P020AFN,R15),0(R1) MVC IT
         LARL  R1,P020AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P020ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R14,P020ACND       R14=ADDRESS OF COND INDICATORS
         MVI   0(R14),16      SET CONDITION INDICATOR
         AHI   R14,1              BUMP POINTER
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P020AHCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P020A)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*      *  L     R5,=4X'FF'         INVALID ADDRESS
*             EXEC CICS FREEMAIN DATAPOINTER(GETBAD) END-EXEC.
*ZC    303         EXEC  CICS,FREEMAIN,DATAPOINTER(GETBAD)
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R0,GETBAD        POINTER TO FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_1143   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_1143   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_1143) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_1143 DS 0H
*             EXEC CICS SEND FROM(GTMMSG) LENGTH(GTMMSGL) END-EXEC.
*ZC    304         EXEC  CICS,SEND,FROM(GTMMSG),LENGTH(GTMMSGL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),GTMMSGL   SET LENGTH FROM LABEL
         LA    R0,GTMMSG           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*             EXEC CICS SEND FROM(ABDMSG) LENGTH(ABDMSGL) END-EXEC
*      * THIS SHOULD ABEND PGMIDERR (AEI0)
*ZC    305         EXEC  CICS,SEND,FROM(ABDMSG),LENGTH(ABDMSGL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),ABDMSGL   SET LENGTH FROM LABEL
         LA    R0,ABDMSG           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*             EXEC CICS LINK PROGRAM('BADPROG4') END-EXEC.
*ZC    307         EXEC  CICS,LINK,PROGRAM('BADPROG4')
         LARL  R1,P0E02         ADDRESS SOURCE
         LARL  R15,P0E02        ADDRESS TARGET
         XC    0(P0E02END-P0E02,R15),0(R1) XC IT
         LARL  R1,=X'0E02'         ADDRESS SOURCE
         LARL  R15,P0E02FN        ADDRESS TARGET
         MVC   0(L'P0E02FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'BADPROG4'         ADDRESS SOURCE
         LARL  R15,P0E02PGM        ADDRESS TARGET
         MVC   0(L'P0E02PGM,R15),0(R1) MVC IT
         LARL  R1,P0E02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
* SPECIAL LINKAGE
         LARL  R1,P0E02           R1=PARAMETER LIST
         LARL  R14,P0E02RTN_1167 RETURN ADDRESS
         LRL   R15,=V(LCL0E02)    R15=EXTERNAL LINK MODULE ADDRESS
         BR    R15                GO TO IT
*
P0E02RTN_1167 EQU *
         LARL  R1,P0E02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E02BYP_1167   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E02BYP_1167   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E02BYP_1167) ENTRYPOINT FOR IGNORE CONDITION
*
P0E02BYP_1167 DS 0H
         MVC   EIBCALEN,DFHEICAL  RESTORE EIB COMMAREA LENGTH
         MVC   EIBPROG,TCTTERET   RESTORE EIBPROG
         MVC   TCTTEINV,DFHEIINV  RESTORE INVOKINGPROG FOR ASSIGN
         MVC   TCTTERET,DFHEIRET  RESTORE RETURNPROG FOR ASSIGN
*      * RETURN   EQU   *
*         ALLDONE.
PG_NEXT2_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ALLDONE  DS    0H
*             EXEC CICS RETURN END-EXEC.
*ZC    310         EXEC  CICS,RETURN
         LARL  R1,P0E08         ADDRESS SOURCE
         LARL  R15,P0E08        ADDRESS TARGET
         XC    0(P0E08END-P0E08,R15),0(R1) XC IT
         LARL  R1,=X'0E08'         ADDRESS SOURCE
         LARL  R15,P0E08FN        ADDRESS TARGET
         MVC   0(L'P0E08FN,R15),0(R1) MVC IT
* SPECIAL LINKAGE
         LARL  R1,P0E08           R1=PARAMETER LIST
         LARL  R14,P0E08RTN_1177 RETURN ADDRESS
         LRL   R15,=V(LCL0E08)    R15=EXTERNAL RETURN MODULE ADDRESS
         BR    R15                GO TO IT
*
P0E08RTN_1177 EQU *
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E08BYP_1177   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(0)             IGNORE HERE IS NOT PERMITTED
*
P0E08    DS    0H
P0E08FN  DS    XL2                FUNCTION CODE
P0E08TRN DS    CL4                TRANSID
P0E08COM DS    AL4                COMMAREA ADDRESS
P0E08CLN DS    XL2                COMMAREA LENGTH
P0E08IMM DS    X                  FF=IMMEDIATE
         DS    X
P0E08CNR DS    X                  FF=CLEANER
         DS    X
P0E08RSP DS    AL4                RESP
P0E08RS2 DS    AL4                RESP2
P0E08END EQU   *                  END MARKER
         DS    0H
*
P0E08BYP_1177 DS 0H
*      * GOTPGMER DS    0H
*         GOTPGMER.
PG_ALLDONE_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GOTPGMER  DS    0H
*             EXEC CICS SEND FROM(PGMMSGE) LENGTH(PGMMSGEL) END-EXEC.
*ZC    313         EXEC  CICS,SEND,FROM(PGMMSGE),LENGTH(PGMMSGEL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),PGMMSGEL   SET LENGTH FROM LABEL
         LA    R0,PGMMSGE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*      *  B     NEXT1              EXIT
*             GO TO NEXT1.
*      * GOTERROR DS    0H
*ZC    315         GO    TO,NEXT1
         J     PG_NEXT1
*         GOTERROR.
PG_GOTPGMER_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GOTERROR  DS    0H
*             EXEC CICS SEND FROM(ERRMSG) LENGTH(ERRMSGL) END-EXEC.
*ZC    318         EXEC  CICS,SEND,FROM(ERRMSG),LENGTH(ERRMSGL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),ERRMSGL   SET LENGTH FROM LABEL
         LA    R0,ERRMSG           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*      *  B     NEXT2              EXIT
*             GO TO NEXT2.
*ZC    320         GO    TO,NEXT2
         J     PG_NEXT2
PG_GOTERROR_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
SN_END_PROCEDURE  DS 0H SECTION
*        PROCEDURE END
         LH    ZC_R1,RETURN_CODE
         L     ZC_R15,ZCVT_GOBACK
         BASR  ZC_R14,ZC_R15
         LTORG
* ZCOBOL WORKING STORAGE SECTION DATA ITEMS
* LVL DATA NAME                      ADDR     LEN      DUP TYP PIC     X
                  VALUE
* 01  GET1                           00000070 00000004 1   A   9(9)    X
                  
* 01  GET2                           00000074 00000004 1   A   9(9)    X
                  
* 01  GET3                           00000078 00000004 1   A   9(9)    X
                  
* 01  GET4                           0000007C 00000004 1   A   9(9)    X
                  
* 01  GET5                           00000080 00000004 1   A   9(9)    X
                  
* 01  GETBAD                         00000084 00000004 1   A   9(9)    X
                  
* 01  RECAREA                        00000088 00000050 1   X   X(80)   X
                  
* 01  RECLEN                         000000D8 00000002 1   H   9(4)    X
                  
* 01  HEAD                           000000DA 00000066 1   X           X
                  
* 02  ZC_FILLER_V1                   000000DA 00000006 1   X   X(6)    X
                  X''27F5C311C1D1''
* 02  ZC_FILLER_V2                   000000E0 00000033 1   X   X(51)   X
                  ''TESTBEC5 TEST HANDLE, PUSH/POP AND GETMAIN/FREEMAINX
               ''
* 02  ZC_FILLER_V3                   00000113 00000003 1   X   X(3)    X
                  X''11C261''
* 02  ZC_FILLER_V4                   00000116 0000000E 1   X   X(14)   X
                  ''PRESS PF KEY 4''
* 02  ZC_FILLER_V5                   00000124 00000003 1   X   X(3)    X
                  X''11C3F1''
* 02  ZC_FILLER_V6                   00000127 00000019 1   X   X(25)   X
                  ''CLEAR WILL END TASK EARLY''
* 01  HEADL                          00000140 00000002 1   H   9(4)    X
                  
* 01  BADMSG1                        00000142 00000017 1   X           X
                  
* 02  ZC_FILLER_V7                   00000142 00000004 1   X   X(4)    X
                  X''C311C5C1''
* 02  ZC_FILLER_V8                   00000146 00000013 1   X   X(19)   X
                  ''THAT KEY WASN''''T PF4''
* 01  BADMSG1L                       00000159 00000002 1   H   9(4)    X
                  
* 01  BADMSG2                        0000015B 00000017 1   X           X
                  
* 02  ZC_FILLER_V9                   0000015B 00000004 1   X   X(4)    X
                  X''C311C761''
* 02  ZC_FILLER_V10                  0000015F 00000013 1   X   X(19)   X
                  ''THAT KEY WASN''''T PF5''
* 01  BADMSG2L                       00000172 00000002 1   H   9(4)    X
                  
* 01  BADMSG3                        00000174 00000017 1   X           X
                  
* 02  ZC_FILLER_V11                  00000174 00000004 1   X   X(4)    X
                  X''C3114AC1''
* 02  ZC_FILLER_V12                  00000178 00000013 1   X   X(19)   X
                  ''THAT KEY WASN''''T PF6''
* 01  BADMSG3L                       0000018B 00000002 1   H   9(4)    X
                  
* 01  PF4MSG                         0000018D 00000018 1   X           X
                  
* 02  ZC_FILLER_V13                  0000018D 00000004 1   X   X(4)    X
                  X''C311C5C1''
* 02  ZC_FILLER_V14                  00000191 00000014 1   X   X(20)   X
                  ''I GOT PF4, THANKYOU ''
* 01  PF4MSGL                        000001A5 00000002 1   H   9(4)    X
                  
* 01  PF5ASK                         000001A7 00000012 1   X           X
                  
* 02  ZC_FILLER_V15                  000001A7 00000004 1   X   X(4)    X
                  X''C311C6D1''
* 02  ZC_FILLER_V16                  000001AB 0000000E 1   X   X(14)   X
                  ''PRESS PF KEY 5''
* 01  PF5ASKL                        000001B9 00000002 1   H   9(4)    X
                  
* 01  PF5MSG                         000001BB 00000018 1   X           X
                  
* 02  ZC_FILLER_V17                  000001BB 00000004 1   X   X(4)    X
                  X''C311C761''
* 02  ZC_FILLER_V18                  000001BF 00000014 1   X   X(20)   X
                  ''I GOT PF5, THANKYOU ''
* 01  PF5MSGL                        000001D3 00000002 1   H   9(4)    X
                  
* 01  PF6ASK                         000001D5 00000012 1   X           X
                  
* 02  ZC_FILLER_V19                  000001D5 00000004 1   X   X(4)    X
                  X''C311C8F1''
* 02  ZC_FILLER_V20                  000001D9 0000000E 1   X   X(14)   X
                  ''PRESS PF KEY 6''
* 01  PF6ASKL                        000001E7 00000002 1   H   9(4)    X
                  
* 01  PF6MSG                         000001E9 00000018 1   X           X
                  
* 02  ZC_FILLER_V21                  000001E9 00000004 1   X   X(4)    X
                  X''C3114AC1''
* 02  ZC_FILLER_V22                  000001ED 00000014 1   X   X(20)   X
                  ''I GOT PF6, THANKYOU ''
* 01  PF6MSGL                        00000201 00000002 1   H   9(4)    X
                  
* 01  PGMMSG                         00000203 0000001F 1   X           X
                  
* 02  ZC_FILLER_V23                  00000203 00000004 1   X   X(4)    X
                  X''C3114BD1''
* 02  ZC_FILLER_V24                  00000207 0000001B 1   X   X(27)   X
                  ''PGMIDERR WILL NOW BE RAISED''
* 01  PGMMSGL                        00000222 00000002 1   H   9(4)    X
                  
* 01  PGMMSGE                        00000224 00000021 1   X           X
                  
* 02  ZC_FILLER_V25                  00000224 00000004 1   X   X(4)    X
                  X''C3114C61''
* 02  ZC_FILLER_V26                  00000228 0000001D 1   X   X(29)   X
                  ''PGMIDERR CONDITION HANDLED OK''
* 01  PGMMSGEL                       00000245 00000002 1   H   9(4)    X
                  
* 01  PGMMSG2                        00000247 00000025 1   X           X
                  
* 02  ZC_FILLER_V27                  00000247 00000004 1   X   X(4)    X
                  X''C3114DF1''
* 02  ZC_FILLER_V28                  0000024B 00000021 1   X   X(33)   X
                  ''PGMIDERR WILL NOW BE RAISED AGAIN''
* 01  PGMMSG2L                       0000026C 00000002 1   H   9(4)    X
                  
* 01  ERRMSG                         0000026E 0000001E 1   X           X
                  
* 02  ZC_FILLER_V29                  0000026E 00000004 1   X   X(4)    X
                  X''C3114FC1''
* 02  ZC_FILLER_V30                  00000272 0000001A 1   X   X(26)   X
                  ''ERROR CONDITION HANDLED OK''
* 01  ERRMSGL                        0000028C 00000002 1   H   9(4)    X
                  
* 01  IGNMSG                         0000028E 0000001F 1   X           X
                  
* 02  ZC_FILLER_V31                  0000028E 00000004 1   X   X(4)    X
                  X''C31150D1''
* 02  ZC_FILLER_V32                  00000292 0000001B 1   X   X(27)   X
                  ''IGNORE CONDITION HANDLED OK''
* 01  IGNMSGL                        000002AD 00000002 1   H   9(4)    X
                  
* 01  GTMMSG                         000002AF 0000002C 1   X           X
                  
* 02  ZC_FILLER_V33                  000002AF 00000004 1   X   X(4)    X
                  X''C311D161''
* 02  ZC_FILLER_V34                  000002B3 00000028 1   X   X(40)   X
                  ''GETMAIN/FREEMAIN TESTING, OK IF NO ABEND''
* 01  GTMMSGL                        000002DB 00000002 1   H   9(4)    X
                  
* 01  ABDMSG                         000002DD 00000034 1   X           X
                  
* 02  ZC_FILLER_V35                  000002DD 00000004 1   X   X(4)    X
                  X''C311D2F1''
* 02  ZC_FILLER_V36                  000002E1 00000022 1   X   X(34)   X
                  ''PGMIDERR WILL NOW CAUSE ABEND AEI0''
* 02  ZC_FILLER_V37                  00000303 00000003 1   X   X(3)    X
                  X''11D4C1''
* 02  ZC_FILLER_V38                  00000306 0000000B 1   X   X(11)   X
                  ''PRESS CLEAR''
* 01  ABDMSGL                        00000311 00000002 1   H   9(4)    X
                  
* 01  INIT5                          00000313 00000001 1   X   X       X
                  X''05''
* 01  DFHAID                         00000314 0000001E 1   X           X
                  
* 02  DFHNULL                        00000314 00000001 1   X   X       X
                  X''00''
* 02  DFHENTER                       00000315 00000001 1   X   X       X
                  X''7D''
* 02  DFHPF1                         00000316 00000001 1   X   X       X
                  X''F1''
* 02  DFHPF2                         00000317 00000001 1   X   X       X
                  X''F2''
* 02  DFHPF3                         00000318 00000001 1   X   X       X
                  X''F3''
* 02  DFHPF4                         00000319 00000001 1   X   X       X
                  X''F4''
* 02  DFHPF5                         0000031A 00000001 1   X   X       X
                  X''F5''
* 02  DFHPF6                         0000031B 00000001 1   X   X       X
                  X''F6''
* 02  DFHPF7                         0000031C 00000001 1   X   X       X
                  X''F7''
* 02  DFHPF8                         0000031D 00000001 1   X   X       X
                  X''F8''
* 02  DFHPF9                         0000031E 00000001 1   X   X       X
                  X''F9''
* 02  DFHPF10                        0000031F 00000001 1   X   X       X
                  X''7A''
* 02  DFHPF11                        00000320 00000001 1   X   X       X
                  X''7B''
* 02  DFHPF12                        00000321 00000001 1   X   X       X
                  X''7C''
* 02  DFHPF13                        00000322 00000001 1   X   X       X
                  X''C1''
* 02  DFHPF14                        00000323 00000001 1   X   X       X
                  X''C2''
* 02  DFHPF15                        00000324 00000001 1   X   X       X
                  X''C3''
* 02  DFHPF16                        00000325 00000001 1   X   X       X
                  X''C4''
* 02  DFHPF17                        00000326 00000001 1   X   X       X
                  X''C5''
* 02  DFHPF18                        00000327 00000001 1   X   X       X
                  X''C6''
* 02  DFHPF19                        00000328 00000001 1   X   X       X
                  X''C7''
* 02  DFHPF20                        00000329 00000001 1   X   X       X
                  X''C8''
* 02  DFHPF21                        0000032A 00000001 1   X   X       X
                  X''C9''
* 02  DFHPF22                        0000032B 00000001 1   X   X       X
                  X''4A''
* 02  DFHPF23                        0000032C 00000001 1   X   X       X
                  X''4B''
* 02  DFHPF24                        0000032D 00000001 1   X   X       X
                  X''4C''
* 02  DFHPA1                         0000032E 00000001 1   X   X       X
                  X''6C''
* 02  DFHPA2                         0000032F 00000001 1   X   X       X
                  X''6E''
* 02  DFHPA3                         00000330 00000001 1   X   X       X
                  X''6B''
* 02  DFHCLEAR                       00000331 00000001 1   X   X       X
                  X''6D''
* 01  DEBUG_ITEM                     00000332 00000058 1   X           X
                  
* 02  DEBUG_LINE                     00000332 00000006 1   X   X(6)    X
                  
* 02  ZC_FILLER_V39                  00000338 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_NAME                     00000339 0000001E 1   X   X(30)   X
                  
* 02  ZC_FILLER_V40                  00000357 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_SUB_1                    00000358 00000004 1   Z   9999    X
                  
* 02  ZC_FILLER_V41                  0000035C 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_SUB_2                    0000035D 00000004 1   Z   9999    X
                  
* 02  ZC_FILLER_V42                  00000361 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_SUB_3                    00000362 00000004 1   Z   9999    X
                  
* 02  ZC_FILLER_V43                  00000366 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_CONTENTS                 00000367 00000023 1   X   X(35)   X
                  
* 01  RETURN_CODE                    0000038A 00000002 1   H   9(4)    X
                  0
* 01  ZC_DFHCOMMAREA_PTR             0000038C 00000004 1   A           X
                  
* 01  ZC_DFHEIBLK_PTR                00000390 00000004 1   A           X
                  
* 01  ZC_ZC_LK_END_PTR               00000394 00000004 1   A           X
                  
DFHEISTG DSECT
ZC_WS_LOC_1 EQU *-ZC_WS CHECK GET1 WS LOC
GET1        DS  AL4
ZC_WS_LOC_2 EQU *-ZC_WS CHECK GET2 WS LOC
GET2        DS  AL4
ZC_WS_LOC_3 EQU *-ZC_WS CHECK GET3 WS LOC
GET3        DS  AL4
ZC_WS_LOC_4 EQU *-ZC_WS CHECK GET4 WS LOC
GET4        DS  AL4
ZC_WS_LOC_5 EQU *-ZC_WS CHECK GET5 WS LOC
GET5        DS  AL4
ZC_WS_LOC_6 EQU *-ZC_WS CHECK GETBAD WS LOC
GETBAD      DS  AL4
ZC_WS_LOC_7 EQU *-ZC_WS CHECK RECAREA WS LOC
RECAREA     DS  CL80
ZC_WS_LOC_8 EQU *-ZC_WS CHECK RECLEN WS LOC
RECLEN      DS  HL2
ZC_WS_LOC_9 EQU *-ZC_WS CHECK HEAD WS LOC
HEAD        DS  0CL102
ZC_WS_LOC_10 EQU *-ZC_WS CHECK ZC_FILLER_V1 WS LOC
ZC_FILLER_V1    DC XL6'27F5C311C1D1'
ZC_WS_LOC_11 EQU *-ZC_WS CHECK ZC_FILLER_V2 WS LOC
ZC_FILLER_V2    DC CL51'TESTBEC5 TEST HANDLE, PUSH/POP AND GETMAIN/FREEX
               MAIN'
ZC_WS_LOC_12 EQU *-ZC_WS CHECK ZC_FILLER_V3 WS LOC
ZC_FILLER_V3    DC XL3'11C261'
ZC_WS_LOC_13 EQU *-ZC_WS CHECK ZC_FILLER_V4 WS LOC
ZC_FILLER_V4    DC CL14'PRESS PF KEY 4'
ZC_WS_LOC_14 EQU *-ZC_WS CHECK ZC_FILLER_V5 WS LOC
ZC_FILLER_V5    DC XL3'11C3F1'
ZC_WS_LOC_15 EQU *-ZC_WS CHECK ZC_FILLER_V6 WS LOC
ZC_FILLER_V6    DC CL25'CLEAR WILL END TASK EARLY'
ZC_WS_LOC_16 EQU *-ZC_WS CHECK HEADL WS LOC
HEADL       DS  HL2
ZC_WS_LOC_17 EQU *-ZC_WS CHECK BADMSG1 WS LOC
BADMSG1     DS  0CL23
ZC_WS_LOC_18 EQU *-ZC_WS CHECK ZC_FILLER_V7 WS LOC
ZC_FILLER_V7    DC XL4'C311C5C1'
ZC_WS_LOC_19 EQU *-ZC_WS CHECK ZC_FILLER_V8 WS LOC
ZC_FILLER_V8    DC CL19'THAT KEY WASN''T PF4'
ZC_WS_LOC_20 EQU *-ZC_WS CHECK BADMSG1L WS LOC
BADMSG1L    DS  HL2
ZC_WS_LOC_21 EQU *-ZC_WS CHECK BADMSG2 WS LOC
BADMSG2     DS  0CL23
ZC_WS_LOC_22 EQU *-ZC_WS CHECK ZC_FILLER_V9 WS LOC
ZC_FILLER_V9    DC XL4'C311C761'
ZC_WS_LOC_23 EQU *-ZC_WS CHECK ZC_FILLER_V10 WS LOC
ZC_FILLER_V10    DC CL19'THAT KEY WASN''T PF5'
ZC_WS_LOC_24 EQU *-ZC_WS CHECK BADMSG2L WS LOC
BADMSG2L    DS  HL2
ZC_WS_LOC_25 EQU *-ZC_WS CHECK BADMSG3 WS LOC
BADMSG3     DS  0CL23
ZC_WS_LOC_26 EQU *-ZC_WS CHECK ZC_FILLER_V11 WS LOC
ZC_FILLER_V11    DC XL4'C3114AC1'
ZC_WS_LOC_27 EQU *-ZC_WS CHECK ZC_FILLER_V12 WS LOC
ZC_FILLER_V12    DC CL19'THAT KEY WASN''T PF6'
ZC_WS_LOC_28 EQU *-ZC_WS CHECK BADMSG3L WS LOC
BADMSG3L    DS  HL2
ZC_WS_LOC_29 EQU *-ZC_WS CHECK PF4MSG WS LOC
PF4MSG      DS  0CL24
ZC_WS_LOC_30 EQU *-ZC_WS CHECK ZC_FILLER_V13 WS LOC
ZC_FILLER_V13    DC XL4'C311C5C1'
ZC_WS_LOC_31 EQU *-ZC_WS CHECK ZC_FILLER_V14 WS LOC
ZC_FILLER_V14    DC CL20'I GOT PF4, THANKYOU '
ZC_WS_LOC_32 EQU *-ZC_WS CHECK PF4MSGL WS LOC
PF4MSGL     DS  HL2
ZC_WS_LOC_33 EQU *-ZC_WS CHECK PF5ASK WS LOC
PF5ASK      DS  0CL18
ZC_WS_LOC_34 EQU *-ZC_WS CHECK ZC_FILLER_V15 WS LOC
ZC_FILLER_V15    DC XL4'C311C6D1'
ZC_WS_LOC_35 EQU *-ZC_WS CHECK ZC_FILLER_V16 WS LOC
ZC_FILLER_V16    DC CL14'PRESS PF KEY 5'
ZC_WS_LOC_36 EQU *-ZC_WS CHECK PF5ASKL WS LOC
PF5ASKL     DS  HL2
ZC_WS_LOC_37 EQU *-ZC_WS CHECK PF5MSG WS LOC
PF5MSG      DS  0CL24
ZC_WS_LOC_38 EQU *-ZC_WS CHECK ZC_FILLER_V17 WS LOC
ZC_FILLER_V17    DC XL4'C311C761'
ZC_WS_LOC_39 EQU *-ZC_WS CHECK ZC_FILLER_V18 WS LOC
ZC_FILLER_V18    DC CL20'I GOT PF5, THANKYOU '
ZC_WS_LOC_40 EQU *-ZC_WS CHECK PF5MSGL WS LOC
PF5MSGL     DS  HL2
ZC_WS_LOC_41 EQU *-ZC_WS CHECK PF6ASK WS LOC
PF6ASK      DS  0CL18
ZC_WS_LOC_42 EQU *-ZC_WS CHECK ZC_FILLER_V19 WS LOC
ZC_FILLER_V19    DC XL4'C311C8F1'
ZC_WS_LOC_43 EQU *-ZC_WS CHECK ZC_FILLER_V20 WS LOC
ZC_FILLER_V20    DC CL14'PRESS PF KEY 6'
ZC_WS_LOC_44 EQU *-ZC_WS CHECK PF6ASKL WS LOC
PF6ASKL     DS  HL2
ZC_WS_LOC_45 EQU *-ZC_WS CHECK PF6MSG WS LOC
PF6MSG      DS  0CL24
ZC_WS_LOC_46 EQU *-ZC_WS CHECK ZC_FILLER_V21 WS LOC
ZC_FILLER_V21    DC XL4'C3114AC1'
ZC_WS_LOC_47 EQU *-ZC_WS CHECK ZC_FILLER_V22 WS LOC
ZC_FILLER_V22    DC CL20'I GOT PF6, THANKYOU '
ZC_WS_LOC_48 EQU *-ZC_WS CHECK PF6MSGL WS LOC
PF6MSGL     DS  HL2
ZC_WS_LOC_49 EQU *-ZC_WS CHECK PGMMSG WS LOC
PGMMSG      DS  0CL31
ZC_WS_LOC_50 EQU *-ZC_WS CHECK ZC_FILLER_V23 WS LOC
ZC_FILLER_V23    DC XL4'C3114BD1'
ZC_WS_LOC_51 EQU *-ZC_WS CHECK ZC_FILLER_V24 WS LOC
ZC_FILLER_V24    DC CL27'PGMIDERR WILL NOW BE RAISED'
ZC_WS_LOC_52 EQU *-ZC_WS CHECK PGMMSGL WS LOC
PGMMSGL     DS  HL2
ZC_WS_LOC_53 EQU *-ZC_WS CHECK PGMMSGE WS LOC
PGMMSGE     DS  0CL33
ZC_WS_LOC_54 EQU *-ZC_WS CHECK ZC_FILLER_V25 WS LOC
ZC_FILLER_V25    DC XL4'C3114C61'
ZC_WS_LOC_55 EQU *-ZC_WS CHECK ZC_FILLER_V26 WS LOC
ZC_FILLER_V26    DC CL29'PGMIDERR CONDITION HANDLED OK'
ZC_WS_LOC_56 EQU *-ZC_WS CHECK PGMMSGEL WS LOC
PGMMSGEL    DS  HL2
ZC_WS_LOC_57 EQU *-ZC_WS CHECK PGMMSG2 WS LOC
PGMMSG2     DS  0CL37
ZC_WS_LOC_58 EQU *-ZC_WS CHECK ZC_FILLER_V27 WS LOC
ZC_FILLER_V27    DC XL4'C3114DF1'
ZC_WS_LOC_59 EQU *-ZC_WS CHECK ZC_FILLER_V28 WS LOC
ZC_FILLER_V28    DC CL33'PGMIDERR WILL NOW BE RAISED AGAIN'
ZC_WS_LOC_60 EQU *-ZC_WS CHECK PGMMSG2L WS LOC
PGMMSG2L    DS  HL2
ZC_WS_LOC_61 EQU *-ZC_WS CHECK ERRMSG WS LOC
ERRMSG      DS  0CL30
ZC_WS_LOC_62 EQU *-ZC_WS CHECK ZC_FILLER_V29 WS LOC
ZC_FILLER_V29    DC XL4'C3114FC1'
ZC_WS_LOC_63 EQU *-ZC_WS CHECK ZC_FILLER_V30 WS LOC
ZC_FILLER_V30    DC CL26'ERROR CONDITION HANDLED OK'
ZC_WS_LOC_64 EQU *-ZC_WS CHECK ERRMSGL WS LOC
ERRMSGL     DS  HL2
ZC_WS_LOC_65 EQU *-ZC_WS CHECK IGNMSG WS LOC
IGNMSG      DS  0CL31
ZC_WS_LOC_66 EQU *-ZC_WS CHECK ZC_FILLER_V31 WS LOC
ZC_FILLER_V31    DC XL4'C31150D1'
ZC_WS_LOC_67 EQU *-ZC_WS CHECK ZC_FILLER_V32 WS LOC
ZC_FILLER_V32    DC CL27'IGNORE CONDITION HANDLED OK'
ZC_WS_LOC_68 EQU *-ZC_WS CHECK IGNMSGL WS LOC
IGNMSGL     DS  HL2
ZC_WS_LOC_69 EQU *-ZC_WS CHECK GTMMSG WS LOC
GTMMSG      DS  0CL44
ZC_WS_LOC_70 EQU *-ZC_WS CHECK ZC_FILLER_V33 WS LOC
ZC_FILLER_V33    DC XL4'C311D161'
ZC_WS_LOC_71 EQU *-ZC_WS CHECK ZC_FILLER_V34 WS LOC
ZC_FILLER_V34    DC CL40'GETMAIN/FREEMAIN TESTING, OK IF NO ABEND'
ZC_WS_LOC_72 EQU *-ZC_WS CHECK GTMMSGL WS LOC
GTMMSGL     DS  HL2
ZC_WS_LOC_73 EQU *-ZC_WS CHECK ABDMSG WS LOC
ABDMSG      DS  0CL52
ZC_WS_LOC_74 EQU *-ZC_WS CHECK ZC_FILLER_V35 WS LOC
ZC_FILLER_V35    DC XL4'C311D2F1'
ZC_WS_LOC_75 EQU *-ZC_WS CHECK ZC_FILLER_V36 WS LOC
ZC_FILLER_V36    DC CL34'PGMIDERR WILL NOW CAUSE ABEND AEI0'
ZC_WS_LOC_76 EQU *-ZC_WS CHECK ZC_FILLER_V37 WS LOC
ZC_FILLER_V37    DC XL3'11D4C1'
ZC_WS_LOC_77 EQU *-ZC_WS CHECK ZC_FILLER_V38 WS LOC
ZC_FILLER_V38    DC CL11'PRESS CLEAR'
ZC_WS_LOC_78 EQU *-ZC_WS CHECK ABDMSGL WS LOC
ABDMSGL     DS  HL2
ZC_WS_LOC_79 EQU *-ZC_WS CHECK INIT5 WS LOC
INIT5       DC XL1'05'
ZC_WS_LOC_80 EQU *-ZC_WS CHECK DFHAID WS LOC
DFHAID      DS  0CL30
ZC_WS_LOC_81 EQU *-ZC_WS CHECK DFHNULL WS LOC
DFHNULL     DC XL1'00'
ZC_WS_LOC_82 EQU *-ZC_WS CHECK DFHENTER WS LOC
DFHENTER    DC XL1'7D'
ZC_WS_LOC_83 EQU *-ZC_WS CHECK DFHPF1 WS LOC
DFHPF1      DC XL1'F1'
ZC_WS_LOC_84 EQU *-ZC_WS CHECK DFHPF2 WS LOC
DFHPF2      DC XL1'F2'
ZC_WS_LOC_85 EQU *-ZC_WS CHECK DFHPF3 WS LOC
DFHPF3      DC XL1'F3'
ZC_WS_LOC_86 EQU *-ZC_WS CHECK DFHPF4 WS LOC
DFHPF4      DC XL1'F4'
ZC_WS_LOC_87 EQU *-ZC_WS CHECK DFHPF5 WS LOC
DFHPF5      DC XL1'F5'
ZC_WS_LOC_88 EQU *-ZC_WS CHECK DFHPF6 WS LOC
DFHPF6      DC XL1'F6'
ZC_WS_LOC_89 EQU *-ZC_WS CHECK DFHPF7 WS LOC
DFHPF7      DC XL1'F7'
ZC_WS_LOC_90 EQU *-ZC_WS CHECK DFHPF8 WS LOC
DFHPF8      DC XL1'F8'
ZC_WS_LOC_91 EQU *-ZC_WS CHECK DFHPF9 WS LOC
DFHPF9      DC XL1'F9'
ZC_WS_LOC_92 EQU *-ZC_WS CHECK DFHPF10 WS LOC
DFHPF10     DC XL1'7A'
ZC_WS_LOC_93 EQU *-ZC_WS CHECK DFHPF11 WS LOC
DFHPF11     DC XL1'7B'
ZC_WS_LOC_94 EQU *-ZC_WS CHECK DFHPF12 WS LOC
DFHPF12     DC XL1'7C'
ZC_WS_LOC_95 EQU *-ZC_WS CHECK DFHPF13 WS LOC
DFHPF13     DC XL1'C1'
ZC_WS_LOC_96 EQU *-ZC_WS CHECK DFHPF14 WS LOC
DFHPF14     DC XL1'C2'
ZC_WS_LOC_97 EQU *-ZC_WS CHECK DFHPF15 WS LOC
DFHPF15     DC XL1'C3'
ZC_WS_LOC_98 EQU *-ZC_WS CHECK DFHPF16 WS LOC
DFHPF16     DC XL1'C4'
ZC_WS_LOC_99 EQU *-ZC_WS CHECK DFHPF17 WS LOC
DFHPF17     DC XL1'C5'
ZC_WS_LOC_100 EQU *-ZC_WS CHECK DFHPF18 WS LOC
DFHPF18     DC XL1'C6'
ZC_WS_LOC_101 EQU *-ZC_WS CHECK DFHPF19 WS LOC
DFHPF19     DC XL1'C7'
ZC_WS_LOC_102 EQU *-ZC_WS CHECK DFHPF20 WS LOC
DFHPF20     DC XL1'C8'
ZC_WS_LOC_103 EQU *-ZC_WS CHECK DFHPF21 WS LOC
DFHPF21     DC XL1'C9'
ZC_WS_LOC_104 EQU *-ZC_WS CHECK DFHPF22 WS LOC
DFHPF22     DC XL1'4A'
ZC_WS_LOC_105 EQU *-ZC_WS CHECK DFHPF23 WS LOC
DFHPF23     DC XL1'4B'
ZC_WS_LOC_106 EQU *-ZC_WS CHECK DFHPF24 WS LOC
DFHPF24     DC XL1'4C'
ZC_WS_LOC_107 EQU *-ZC_WS CHECK DFHPA1 WS LOC
DFHPA1      DC XL1'6C'
ZC_WS_LOC_108 EQU *-ZC_WS CHECK DFHPA2 WS LOC
DFHPA2      DC XL1'6E'
ZC_WS_LOC_109 EQU *-ZC_WS CHECK DFHPA3 WS LOC
DFHPA3      DC XL1'6B'
ZC_WS_LOC_110 EQU *-ZC_WS CHECK DFHCLEAR WS LOC
DFHCLEAR    DC XL1'6D'
ZC_WS_LOC_133 EQU *-ZC_WS CHECK DEBUG_ITEM WS LOC
DEBUG_ITEM    DS  0CL88
ZC_WS_LOC_134 EQU *-ZC_WS CHECK DEBUG_LINE WS LOC
DEBUG_LINE    DS  CL6
ZC_WS_LOC_135 EQU *-ZC_WS CHECK ZC_FILLER_V39 WS LOC
ZC_FILLER_V39    DC CL1' '
ZC_WS_LOC_136 EQU *-ZC_WS CHECK DEBUG_NAME WS LOC
DEBUG_NAME    DS  CL30
ZC_WS_LOC_137 EQU *-ZC_WS CHECK ZC_FILLER_V40 WS LOC
ZC_FILLER_V40    DC CL1' '
ZC_WS_LOC_138 EQU *-ZC_WS CHECK DEBUG_SUB_1 WS LOC
DEBUG_SUB_1    DS  ZL4
ZC_WS_LOC_139 EQU *-ZC_WS CHECK ZC_FILLER_V41 WS LOC
ZC_FILLER_V41    DC CL1' '
ZC_WS_LOC_140 EQU *-ZC_WS CHECK DEBUG_SUB_2 WS LOC
DEBUG_SUB_2    DS  ZL4
ZC_WS_LOC_141 EQU *-ZC_WS CHECK ZC_FILLER_V42 WS LOC
ZC_FILLER_V42    DC CL1' '
ZC_WS_LOC_142 EQU *-ZC_WS CHECK DEBUG_SUB_3 WS LOC
DEBUG_SUB_3    DS  ZL4
ZC_WS_LOC_143 EQU *-ZC_WS CHECK ZC_FILLER_V43 WS LOC
ZC_FILLER_V43    DC CL1' '
ZC_WS_LOC_144 EQU *-ZC_WS CHECK DEBUG_CONTENTS WS LOC
DEBUG_CONTENTS    DS  CL35
ZC_WS_LOC_145 EQU *-ZC_WS CHECK RETURN_CODE WS LOC
RETURN_CODE    DC AL2(0)                  RPI 1065
ZC_WS_LOC_146 EQU *-ZC_WS CHECK ZC_DFHCOMMAREA_PTR WS LOC
ZC_DFHCOMMAREA_PTR    DS  AL4
ZC_WS_LOC_147 EQU *-ZC_WS CHECK ZC_DFHEIBLK_PTR WS LOC
ZC_DFHEIBLK_PTR    DS  AL4
ZC_WS_LOC_148 EQU *-ZC_WS CHECK ZC_ZC_LK_END_PTR WS LOC
ZC_ZC_LK_END_PTR    DS  AL4
* ZCOBOL LINKAGE SECTION DATA ITEMS
* LVL DATA NAME                      ADDR     LEN      DUP TYP PIC     X
                  VALUE
* 01  DFHCOMMAREA                    00000000 00000054 1   X           X
                  
* 01  DFHEIBLK                       00000000 00000054 1   X           X
                  
* 02  EIBHEAD                        00000000 00000008 1   X   X(8)    X
                  
* 02  EIBTIME                        00000008 00000004 1   P   9(7)    X
                  
* 02  EIBDATE                        0000000C 00000004 1   P   9(7)    X
                  
* 02  EIBTRNID                       00000010 00000004 1   X   X(4)    X
                  
* 02  EIBTASKN                       00000014 00000004 1   P   9(7)    X
                  
* 02  EIBTRMID                       00000018 00000004 1   X   X(4)    X
                  
* 02  FILLER                         0000001C 00000002 1   X   X(2)    X
                  
* 02  EIBCPOSN                       0000001E 00000002 1   H   9(4)    X
                  
* 02  EIBCALEN                       00000020 00000002 1   H   9(4)    X
                  
* 02  EIBAID                         00000022 00000001 1   X   X       X
                  
* 02  EIBFN                          00000023 00000002 1   H   9(4)    X
                  
* 02  EIBRCODE                       00000025 00000006 1   X   X(6)    X
                  
* 02  EIBREQID                       0000002B 00000008 1   X   X(8)    X
                  
* 02  EIBDS                          00000033 00000008 1   X   X(8)    X
                  
* 02  EIBRSRCE                       0000003B 00000008 1   X   X(8)    X
                  
* 02  EIBRESP                        00000043 00000004 1   F   9(9)    X
                  
* 02  EIBRESP2                       00000047 00000004 1   F   9(9)    X
                  
* 02  EIBPROG                        0000004B 00000008 1   X   X(8)    X
                  
* 02  EIBDTFRM                       00000053 00000001 1   X   X       X
                  
* 01  ZC_LK_END                      00000000 00000001 1   X   X       X
                  
DFHEISTG DSECT
DFHCOMMAREA_DSECT   DSECT
ZC_LK_LOC_111 EQU *-DFHCOMMAREA CHECK DFHCOMMAREA LK LOC
DFHCOMMAREA    DS  0CL84
DFHEIBLK_DSECT   DSECT
ZC_LK_LOC_112 EQU *-DFHEIBLK CHECK DFHEIBLK LK LOC
DFHEIBLK    DS  0CL84
ZC_LK_LOC_113 EQU *-DFHEIBLK CHECK EIBHEAD LK LOC
EIBHEAD     DS  CL8
ZC_LK_LOC_114 EQU *-DFHEIBLK CHECK EIBTIME LK LOC
EIBTIME     DS  PL4
ZC_LK_LOC_115 EQU *-DFHEIBLK CHECK EIBDATE LK LOC
EIBDATE     DS  PL4
ZC_LK_LOC_116 EQU *-DFHEIBLK CHECK EIBTRNID LK LOC
EIBTRNID    DS  CL4
ZC_LK_LOC_117 EQU *-DFHEIBLK CHECK EIBTASKN LK LOC
EIBTASKN    DS  PL4
ZC_LK_LOC_118 EQU *-DFHEIBLK CHECK EIBTRMID LK LOC
EIBTRMID    DS  CL4
ZC_LK_LOC_119 EQU *-DFHEIBLK CHECK FILLER LK LOC
            DS  CL2
ZC_LK_LOC_120 EQU *-DFHEIBLK CHECK EIBCPOSN LK LOC
EIBCPOSN    DS  HL2
ZC_LK_LOC_121 EQU *-DFHEIBLK CHECK EIBCALEN LK LOC
EIBCALEN    DS  HL2
ZC_LK_LOC_122 EQU *-DFHEIBLK CHECK EIBAID LK LOC
EIBAID      DS  CL1
ZC_LK_LOC_123 EQU *-DFHEIBLK CHECK EIBFN LK LOC
EIBFN       DS  HL2
ZC_LK_LOC_124 EQU *-DFHEIBLK CHECK EIBRCODE LK LOC
EIBRCODE    DS  CL6
ZC_LK_LOC_125 EQU *-DFHEIBLK CHECK EIBREQID LK LOC
EIBREQID    DS  CL8
ZC_LK_LOC_126 EQU *-DFHEIBLK CHECK EIBDS LK LOC
EIBDS       DS  CL8
ZC_LK_LOC_127 EQU *-DFHEIBLK CHECK EIBRSRCE LK LOC
EIBRSRCE    DS  CL8
ZC_LK_LOC_128 EQU *-DFHEIBLK CHECK EIBRESP LK LOC
EIBRESP     DS  FL4
ZC_LK_LOC_129 EQU *-DFHEIBLK CHECK EIBRESP2 LK LOC
EIBRESP2    DS  FL4
ZC_LK_LOC_130 EQU *-DFHEIBLK CHECK EIBPROG LK LOC
EIBPROG     DS  CL8
ZC_LK_LOC_131 EQU *-DFHEIBLK CHECK EIBDTFRM LK LOC
EIBDTFRM    DS  CL1
ZC_LK_END_DSECT   DSECT
ZC_LK_LOC_132 EQU *-ZC_LK_END CHECK ZC_LK_END LK LOC
ZC_LK_END    DS  CL1
DFHEISTG DSECT
ZC_WS_DIFF EQU  *-ZC_WS-920  DIFF BETWEEN ALLOC AND CALC WS
ZC_WS_END DS   0D
         MNOTE *,'ZCOBOL TOTAL SYMBOLS                 = 148'
         MNOTE *,'ZCOBOL TOTAL SYMBOL DUPLICATES       = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL MAX DUP CHAIN    = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LEVEL 88         = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL SET INDEXES      = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LINKAGE SECTIONS = 3'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE SECTIONS      = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPHS    = 14'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPH DUP = 0'
DFHEISTG DSECT
         ORG
DFHEIEND EQU   *
         END
