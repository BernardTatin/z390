* ZCOBOL PGM='RT\CICS\TEST\TESTBMC1' VER=V1.5.01a MM/DD/YY 
* ZCOBOL OPTIONS=(CICS)
         COPY  TESTBMC1_ZC_LABELS.CPY
*      ****************************************************************X
                              *
*      * Copyright 2006 Automated Software Tools Corporation           X
                              *
*      * This source code is part of z390 assembler/emulator package   X
                              *
*      * The z390 package is distributed under GNU general public      X
                              *
*      * license                                                       X
                              *
*      * Author - Don Higgins                                          X
                              *
*      ****************************************************************X
                              *
*         IDENTIFICATION DIVISION.
*      * TEST SEND/RECEIVE MAP AND SEND CONTROL
*      * CODE AND DISPLAYS ARE ALMOST IDENTICAL TO GUI4/6
*      * AFTER GUI4 IS ENDED, THE PROGRAM SWITCHES INTO GUI6
*         PROGRAM-ID. TESTBMC1.
         PRINT NOLIST,NOGEN,NOLISTUSE    SET LIST OPTION FOR INTERNAL CX
               ODE
DFHEIBR  EQU   11
         USING DFHEIBLK_DSECT,DFHEIBR
*
* TERMINAL CONTROL TABLE - TERMINAL ENTRY
*
DFHTCTTE DSECT
TCTTEHED DS    CL8         'DFHTCTTE'
TCTTETI  DS    CL4         TERMINAL ID
TCTTEDA  DS    AL4         A(TIOA)
TCTTETC  DS    CL4         NEXT TRANSID
TCTTEINT DS    CL4         INITIAL TRANSID
TCTTECA  DS    AL4         RETURN COMMAREA ADDRESS
TCTTECAL DS    XL2         RETURN COMMAREA ADDRESS LENGTH
TCTTELNK DS    XL2         RETURN LINK LEVEL, 0 RETURNS TO Z390KCP
TCTTELKA DS    AL4         LINK LEVEL AREA POINTER
*                          EACH 4-BYTE ENTRY HAS THE DSA ADDRESS
TCTTEABD DS    AL4         HANDLE ABEND BLOCK
TCTTESCC DS    AL4         STORAGE CONTROL CHAIN
TCTTEIMM DS    X           FF=RETURN IMMEDIATE
TCTTETS  DS    X           FF=SHUTDOWN REQUEST
TCTTETYP DS    C           TRANSID START TYPE (FROM Z390KCP/KCPGOTYP)
*                             A = .INI INITIAL TRANSID
*                             B = SCREEN INPUT
*                             C = RETURN TRANSID()
*                             D = IC START-NO DATA
*                             E = IC START-DATA
TCTTECND DS    X           FF=XCTL COMMAREA MUST BE FREED ON RETURN
TCTTEEDF DS    X           FF=EDF IS ACTIVE
TCTTEEBA DS    X           00='BEFORE'  FF='AFTER' CEDF INTERCEPT
TCTTEEDL DS    X           00=NORMAL LINKAGE  FF=DIRECT LINKAGE
TCTTEEDT DS    CL4         TERMID FOR EDF OUTPUT
TCTTEEDA DS    AL4         ADDRESS OF EDF PROCESSOR LCLCEDF
TCTTEQFN DS    PL3         SEQUENTIAL TERMINAL FILE NUMBER
TCTTEQFO DS    X           FF=CURRENT SEQUENTIAL FILE IS OPEN
TCTTEQFL DS    AL4         ADDRESS OF SEQUENTIAL TERMINAL FILENAME
TCTTEQDI DS    AL4         ADDRESS OF RECEIVE DCB
TCTTEQDO DS    AL4         ADDRESS OF SEND DCB
TCTTECWA DS    AL4         ADDRESS OF LOCAL CWA COPY
TCTTECWL DS    XL4         LENGTH OF LOCAL CWA COPY
TCTTELCL DS    AL4         ADDRESS OF LCL MODULE INDEXER
TCTTEIQF DS    X           FF=INQUIRE FILE BROWSE IN PROGRESS
TCTTEIFN DS    CL8         INQUIRE FILE CURRENT POSITION
* FIELDS FOR ASSIGN
TCTTEABP DS    X           ABDUMP INDICATOR
TCTTEABG DS    CL8         ABENDING PROGRAM
TCTTEPSW DS    XL8         ASRA PSW
TCTTEASR DS    XL64        ASRA REGS
TCTTEINV DS    CL8         INVOKING PROGRAM
TCTTERET DS    CL8         RETURN PROGRAM
TCTTELNA EQU   *-TCTTEABP  ASSIGN FIELDS TO CLEAR
TCTTEABC DS    CL4         ABCODE OR BLANK
TCTTENXT DS    CL4         RETURN TRANSID OR BLANK
TCTTEMCL DS    AL2         MAP COLUMN
TCTTEMHT DS    AL2         MAP HEIGHT
TCTTEMLN DS    AL2         MAP LINE
TCTTEMWH DS    AL2         MAP WIDTH
TCTTELEN EQU   *-DFHTCTTE
TCTTEAR  EQU   10
         USING DFHTCTTE,TCTTEAR
R0 EQU 0
R1 EQU 1
R2 EQU 2
R3 EQU 3
R4 EQU 4
R5 EQU 5
R6 EQU 6
R7 EQU 7
R8 EQU 8
R9 EQU 9
R10 EQU 10
R11 EQU 11
R12 EQU 12
R13 EQU 13
R14 EQU 14
R15 EQU 15
TESTBMC1       CSECT
*            R1 >>> A(EIB,COMMAREA)
* TCTTEAR (R10) >>> TCTTE
* DFHEIBR (R11) >>> EIB
*         (R14) >>> RETURN ADDRESS (LINK ONLY)
*
         LR    R2,R1              R2=SAVE USER PARM POINTER
* ENTRY IS ONLY BY DIRECT BRANCH FROM MODULES LCL0E02 (LINK)
* OR LCL0E04 (XCTL)
*
* DON'T SAVE THE REGS IF XCTL, THIS ISN'T A NEW LINK LEVEL
         CHHSI EIBFN,X'0E04'      XCTL ?
         JE    CICS_EIENT_0065_NOSAVE EXIT IF IT IS
* FIND LAST LINKER AND ESTABLISH LINKAGE
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         AHI   R15,-1             -1
         SLL   R15,2              *4
         L     R1,TCTTELKA        R0=LKA ADDRESS
         AR    R1,R15             INDEX TO LAST LINK-LEVEL ENTRY
         L     R13,0(R1)          SAVE AREA OF LAST LINK-LEVEL
         STM   14,12,12+4*(14-14)(13)
CICS_EIENT_0065_NOSAVE EQU *
*
* GETMAIN THE DSA, AND SET UP THE CHAIN
*
         LAY   R1,(DFHEIEND-DFHEISTG) R1=DSA LENGTH
         LA    0,B'00'
         SVC   4 GMAIN R0=(X'02'=31B,X'01'=COND),R1=LEN OUT(R0=L,R1=A)
         ST    R1,8(R13)          SAVE NEW DSA SAVE AREA IN PRIOR SAVE
         ST    R13,4(R1)          SAVE OLD SAVE AREA IN NEW DSA SAVE
         LR    R13,R1             DSA BASE 1
         USING DFHEISTG,R13
         XC    DFHEICAP(DFHEIUSR-DFHEICAP),DFHEICAP CLEAR PREFIX DSA
*
* SAVE DSA LENGTH
*
         ST    R0,DFHEILEN        SAVE DSA LENGTH FOR FREEMAIN
*
* SET EIB AND COMMAREA ADDRESSES
*
         MVC   DFHEIEIB,0(R2)     SET EIB ADDRESS IN DSA
         MVC   DFHEICAP,4(R2)     SET COMMAREA ADDRESS IN DSA
*
* IF WE CAME FROM XCTL, WE MUST FREE THE PARM STORAGE AREA
*
         CHHSI EIBFN,X'0E04'      XCTL ?
         JNE   CICS_EIENT_0065_01 EXIT IF NOT
         LA    R0,8               LENGTH OF 8
         LR    1,R2
         SVC   5 FREEMAIN R0=LEN, R1=ADDR
         LA    R2,DFHEIEIB        SET UP THE PARM AGAIN
CICS_EIENT_0065_01 DS 0H
*
* FIND OUR LKA ENTRY AND STORE OUR DSA ADDRESS
*
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         SLL   R15,2              *4
         L     R1,TCTTELKA        R1=LKA ADDRESS
         AR    R1,R15             INDEX TO OUR LINK LEVEL ENTRY
         ST    R13,0(R1)          SAVE OUR DSA ADDRESS
         MVC   DFHEIINV,TCTTEINV  SET INVOKING PROGRAM FOR ASSIGN
         MVC   DFHEIRET,TCTTERET  SET RETURN PROGRAM FOR ASSIGN
*
         CNOP  4,8             FORCE ZC390PVT TO DOUBLEWORD BOUNDARY
         BRAS  ZC_R8,ZC_LOAD
         USING *,ZC_R8            BASE FOR LOAD AND CICS V5 USE
*
*  THESE FIELDS MUST BE KEPT IN SYNC WITH zcobol\ZC390PVT.CPY
*
         DC    CL8'TESTBMC1'    PVTPGM   ZCOBOL PGM NAME
         DC    CL8'01/02/05'   PVTDATE  ZCOBOL COMPILE DATE
         DC    CL8'22.33'   PVTTIME  ZCOBOL COMPILE TIME
         DC    CL8'V1.5.01a'    PVTVER   ZCOBOL COMPILER VERSION
         DC    C'1'     PVTCICS  ZCOBOL EXEC CICS PGM
         DC    C'1'   PVTEXTND ZCOBOL EXTENDED PRECISION
         DC    C'0'    PVTTRUNC ZCOBOL TRUNCATE TO PICTURE
         DC    C'1'      PVTR64   ZCOBOL USE 64 BIT REGISTERS
ZC_LOAD  DS    0H
         LA    0,=CL8'ZC390LIB'
         SR    15,15 USE DEFAULT SYS390 SEARCH
         SVC   8 LOAD R0=A(NAME) R15=DDNAME/DSNAME ADDR OR 0
         LTR   ZC_R15,ZC_R15
         JZ    ZC_LOAD_OK
         BRAS  1,*+(WTO#0075_EOT-*+1)/2*2
         DC    AL2(WTO#0075_EOT-*,0),C'ZC390LIB NOT FOUND'
WTO#0075_EOT EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
ZC_LOAD_OK DS  0H
         LR    ZC_R9,ZC_R0
         USING ZC390CVT,ZC_R9    R9=CVT
         CLC   ZCVT_ID,=C'ZCVT'              CHECK ZCVT ID AND LENGTH
         JNE   ZC_VER_ERR                    IN ZC390LIB.390 MATCH
         CLC   ZCVT_LEN,=A(ZCVT_END-ZCVT_ID) ZCOBOL PGM COMPILED ID/LEN
         BNE   ZC_VER_ERR
         L     ZC_R15,ZCVT_ZC390NUC
         BASR  ZC_R14,ZC_R15 CALL ZC390NUC TO VERIFY VER, OPTIONS
         J     ZC_VER_OK
ZC_VER_ERR DS 0H
         BRAS  1,*+(WTO#0076_EOT-*+1)/2*2
         DC    AL2(WTO#0076_EOT-*,0),C'ZC390LIB ZCVT VERIFY ERROR'
WTO#0076_EOT EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
         LTORG
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
ZC_R0    EQU   0
ZC_R1    EQU   1
ZC_R2    EQU   2
ZC_R3    EQU   3
ZC_R4    EQU   4
ZC_R5    EQU   5
ZC_R6    EQU   6
ZC_R7    EQU   7
ZC_R8    EQU   8
ZC_R9    EQU   9
ZC_R10   EQU  10
ZC_R11   EQU  11
ZC_R12   EQU  12
ZC_R13   EQU  13
ZC_R14   EQU  14
ZC_R15   EQU  15
ZC_F0    EQU   0
ZC_F1    EQU   1
ZC_F2    EQU   2
ZC_F3    EQU   3
ZC_F4    EQU   4
ZC_F5    EQU   5
ZC_F6    EQU   6
ZC_F7    EQU   7
ZC_F8    EQU   8
ZC_F9    EQU   9
ZC_F10   EQU  10
ZC_F11   EQU  11
ZC_F12   EQU  12
ZC_F13   EQU  13
ZC_F14   EQU  14
ZC_F15   EQU  15
ZC_H     EQU   2   HIGH
ZC_L     EQU   4   LOW
ZC_E     EQU   8   EQUAL
ZC_NH    EQU   13  NOT HIGHT
ZC_NL    EQU   11  NOT LOW
ZC_NE    EQU   7   NOT EQUAL
ZC_O     EQU   1   OVERFLOW
ZC_P     EQU   2   POSITIVE
ZC_M     EQU   4   MINUS
ZC_Z     EQU   8   ZERO
ZC_NP    EQU   13  NOT POSITIVE
ZC_NM    EQU   11  NOT MINUS
ZC_NZ    EQU   7   NOT ZERO
ZC_NO    EQU   14  NOT OVERFLOW
ZC_EQ    EQU   8   EQUAL
ZC_GT    EQU   2   GREATER THAN
ZC_LT    EQU   4   LESS    THAN
ZC_GE    EQU   11  GREATER THAN OR EQUAL
ZC_LE    EQU   13  LESS    THAN OR EQUAL
         POP   PRINT,NOPRINT
PFPO_TEST    EQU  X'80' PFPO TEST IF VALID OPCODE (NOT SUPPORTED YET)
PFPO_RADIX   EQU  1 PFPO OPCODE - CONVERT FROM ONE RADIX TO ANOTHER
PFPO_RND     EQU  0 PFOP ROUNDING OPTION (ONLY DEFAULT ALLOWED)
PFPO_TYPE_EH EQU  0 EH HFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DH EQU  1 ED HFP LONG      64 BITS 15 DIGITS
PFPO_TYPE_LH EQU  2 EL HFP EXTENDED 128 BITS 30 DIGITS
PFPO_TYPE_EB EQU  5 EB BFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DB EQU  6 DB BFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LB EQU  7 LB BFP EXTENDED 128 BITS 34 DIGITS
PFPO_TYPE_ED EQU  8 ED DFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DD EQU  9 DD DFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LD EQU 10 LD DFP EXTENDED 128 BITS 34 DIGITS
ZC_VER_OK DS   0H
ZC390CVT DSECT                ZCOBOL CVT AT ENTRY TO ZC390LIB.390
ZCVT_ID            DC    C'ZCVT'             ZCVT ID  VERIFIED BY ZCOB
ZCVT_LEN           DC    A(ZCVT_END-ZCVT_ID) ZCVT LEN VERIFIED BY ZCOB
ZCVT_VER           DC    CL8'V1.5.01a'    ZCVT VER VERIFIED BY ZC390NUC
ZCVT_ZC390NUC  DC V(ZC390NUC)      MODULE  SYSTEM ROUTINE MODULE INIT
ZCVT_CALL           DC V(CALL)       ENTRY R0=A(PGM),R1=A(PARMLIST)
ZCVT_CMP64R32       DC V(CMP64R32)   ENTRY COMPARE R0-1=FLD1 R2-3=FLD2
ZCVT_CVTLBTQ        DC V(CVTLBTQ)    ENTRY CVT LB IN F4-6 TO Q IN R0-1
ZCVT_CVTLDTP        DC V(CVTLDTP)    ENTRY CVT LD IN F0-2 TO PL31 R0-1
ZCVT_CVTQTLB        DC V(CVTQTLB)    ENTRY CVT Q IN R0-1 TO LB IN F4-6
ZCVT_DIV64R32       DC V(DIV64R32)   ENTRY DIVIDE R0-1=N64, R2-3=MAX64
ZCVT_DIVQ128        DC V(DIVQ128)    ENTRY DIVIDE Q128 R0-R1 BY R2-R3
ZCVT_GOBACK         DC V(GOBACK)     ENTRY R1=RC
ZCVT_MPYQ128        DC V(MPYQ128)    ENTRY MULTIPLY Q128 R0-R1 BY R2-R3
ZCVT_OSE64R32       DC V(OSE64R32)   ENTRY ON SIZE ERR R0-1=N, R2-3=MAX
ZCVT_PERFORM        DC V(PERFORM)    ENTRY R14=PGTAR,R0=PGEXT,R1=PMRET
ZCVT_PMCHECK        DC V(PMCHECK)    ENTRY R14=RETURN TO NEXT INSTR.
ZCVT_ROUNDF         DC V(ROUNDF)     ENTRY R0=REM,R1=QUO,R2=DIVISOR
ZCVT_STACKORG       DC V(STACKORG)   ENTRY PERFORM STACK ORIGIN
ZCVT_STACKPTR       DC V(STACKPTR)   ENTRY CUR ENTRY A(PG_END+4,RET)
ZCVT_STACKEND       DC V(STACKEND)   ENTRY PERFORM STACK END
ZCVT_STOPRUN        DC V(STOPRUN)    ENTRY R1=RC
ZCVT_TALPHAX        DC V(TALPHAX)    ENTRY TEST ALPHABETIC X
ZCVT_TNUMP          DC V(TNUMP)      ENTRY TEST NUMERIC P
ZCVT_TNUMX          DC V(TNUMX)      ENTRY TEST NUMERIC X
ZCVT_TNUMZ          DC V(TNUMZ)      ENTRY TEST NUMERIC Z
*
* ADDITIONAL SEPARATE MODULES LINKED WITH Z390NUC IN ZC390LIB.390
*
ZCVT_ABORT     DC V(ABORT)         MODULE  R1=ABORT ERROR MSG #
ZCVT_ABORT_ALTER   EQU    1 ABORT ALTER DUE TO BRC NOT FOUND AT TARGET
ZCVT_ABORT_CALL    EQU    2 ABORT DYNAMIC CALL - PGM NOT FOUND
ZCVT_ABORT_DISPLAY EQU    3 ABORT DISPLAY DUE TO BUFFER EXCEEDED
ZCVT_ABORT_OPEN    EQU    4 ABORT OPEN  INVALID DCB
ZCVT_ABORT_STACK   EQU    6 ABORT PEROFRM STACK OVERFLOW
ZCVT_ABORT_VERSION EQU    7 ABORT ZC390NUC INIT ZCOBOL VERSION ERROR
ZCVT_ABORT_INT128  EQU    8 ABORT INTEGER 128 CONVERSION OVERFLO
ZCVT_ABORT_DIVQ    EQU    9 ABORT DIVIDE Q IF DIVISOR 0 OR > 2**63
ZCVT_ABORT_CICS    EQU   10 ABORT THIS PGM REQUIRES EXEC CICS TRANS MGR
ZCVT_ABORT_ACCEPT  EQU   11 ABORT ACCEPT EOF
ZCVT_ABORT_MAXERR  EQU   11 ABORT MAX ERROR CODE
ZCVT_ACCEPT    DC V(ACCEPT)        MODULE  R1=A(TYPE,FLD_ADD,FLD_LEN)
ZCVT_ACCEPT_DEFAULT EQU   1 INPUT DEFAULT DDNAME=SYSIN
ZCVT_ACCEPT_CONSOLE EQU   2 INPUT VIA WTOR FROM CONSOLE
ZCVT_ACCEPT_DDNAME  EQU   3 INPUT FROM DDNAME WITH DDNAME ADDR IN R3
ZCVT_ACCEPT_DATE    EQU   4 RETURN DAY OF WEEK PIC 9(8) MMDDYYYY
ZCVT_ACCEPT_TIME    EQU   5 RETURN DAY OF WEEK PIC 9(8) HHMMSSTH
ZCVT_ACCEPT_DOW     EQU   6 RETURN DAY OF WEEK PIC 9 1-7
ZCVT_DISPLAY   DC V(DISPLAY)       MODULE  R1=A(ADDR,LEN,TYPE)
ZCVT_INSPECT   DC V(INSPECT)       MODULE  R0=TYPE,R1=PARMLIST
ZCVT_TALLYING      EQU   0 INSPECT TALLYING
ZCVT_REPLACING     EQU   4 INSPECT REPLACING
ZCVT_CONVERTING    EQU   8 INSPECT CONVERTING
*
* SHARED DATA AREAS
*
               DS 0D
ZCVT_ZERO      DC XL16'00'   BINARY ZEROS
ZCVT_HIGH_VALUES DC XL16'00' BINARY FF'S
ZCVT_PWORK     DS PL8     CVD/CVB WORK
ZCVT_PWORK1    DS PL16    DIV DIVIDEND, CVDG/CVBG WORK
ZCVT_PWORK2    DS PL16    DIV DIVISOR
ZCVT_PWORK3    DS PL16    DIV QUOTIENT
ZCVT_PWORK4    DS PL16    DIV REMAINDER
ZCVT_NDDX      DS XL16    DIV DIVIDEND HOLD AREA
ZCVT_WORKAREA  DS XL256   GEN_INSPECT PARMS, GEN_EDIT WORK, ETC.
*
* END OF ZC390CVT
*
ZCVT_END   EQU   *
ZC390PVT DSECT
PVTPGM   DS    CL8  ZCOBOL PGM NAME
PVTDATE  DS    CL8  ZCOBOL COMPILE DATE
PVTTIME  DS    CL8  ZCOBOL COMPILE TIME
PVTVER   DS    CL8  ZCOBOL COMPILER VERSION
PVTCICS  DS    C    ZCOBOL EXEC CICS PGM
PVTEXTND DS    C    ZCOBOL EXTENDED PRECISION
PVTTRUNC DS    C    ZCOBOL TRUNCATE TO PICTURE
PVTR64   DS    C    ZCOBOL USE 64 BIT REGISTERS
DFHEISTG DSECT
         DS    18F  SAVE AREA
DFHEIEIB DS    A    EIB POINTER
DFHEICAP DS    A    COMMAREA POINTER
DFHEICAL DS    H    COMMAREA LENGTH, COPY OF EIBCALEN
DFHEILEN DS    A    LENGTH OF DSA SET BY DFHEIENT
DFHEIAID DS    A    ADDRESS OF HANDLE AID BLOCK (DSECT=DFHADBLK)
DFHEIHCN DS    A    ADDRESS OF HANDLE CONDITION BLOCK (DSECT=DFHHCBLK)
DFHEIINV DS    CL8  INVOKING PROGRAM FOR ASSIGN
DFHEIRET DS    CL8  RETURN PROGRAM FOR ASSIGN
DFHEIUSR DS    0D   USER PROGRAM STORAGE (SEE DFHEIEND FOR END)
ZC_WS    EQU   DFHEISTG
*         ENVIRONMENT DIVISION.
*         DATA DIVISION.
*         WORKING-STORAGE SECTION.
*         COPY  MAP01C.
*        01  GUI4I.
*            02  FILLER  PIC X(12).
*            02  INPUTL   PIC S9(4) COMP.
*            02  INPUTF   PIC X.
*            02  FILLER REDEFINES INPUTF.
*                03  INPUTA   PIC X.
*            02  INPUTI   PIC X(3).
*            02  FILLER REDEFINES INPUTI.
*                03  INPUTO   PIC X(3).
*            02  REPLYL   PIC S9(4) COMP.
*            02  REPLYF   PIC X.
*            02  FILLER REDEFINES REPLYF.
*                03  REPLYA   PIC X.
*            02  REPLYI   PIC X(3).
*            02  FILLER REDEFINES REPLYI.
*                03  REPLYO   PIC X(3).
*        01  GUI4O REDEFINES GUI4I.
*           02  FILLER PIC X(24).
*        01  GUI6I.
*            02  FILLER  PIC X(12).
*            02  NAMEL    PIC S9(4) COMP.
*            02  NAMEF    PIC X.
*            02  FILLER REDEFINES NAMEF.
*                03  NAMEA    PIC X.
*            02  NAMEI    PIC X(40).
*            02  FILLER REDEFINES NAMEI.
*                03  NAMEO    PIC X(40).
*            02  ADDRL    PIC S9(4) COMP.
*            02  ADDRF    PIC X.
*            02  FILLER REDEFINES ADDRF.
*                03  ADDRA    PIC X.
*            02  ADDRI    PIC X(40).
*            02  FILLER REDEFINES ADDRI.
*                03  ADDRO    PIC X(40).
*            02  ZIPL     PIC S9(4) COMP.
*            02  ZIPF     PIC X.
*            02  FILLER REDEFINES ZIPF.
*                03  ZIPA     PIC X.
*            02  ZIPI     PIC X(5).
*            02  FILLER REDEFINES ZIPI.
*                03  ZIPO     PIC X(5).
*            02  NAMEHDL  PIC S9(4) COMP.
*            02  NAMEHDF  PIC X.
*            02  FILLER REDEFINES NAMEHDF.
*                03  NAMEHDA  PIC X.
*            02  NAMEHDI  PIC X(4).
*            02  FILLER REDEFINES NAMEHDI.
*                03  NAMEHDO  PIC X(4).
*            02  NEWNAMEL PIC S9(4) COMP.
*            02  NEWNAMEF PIC X.
*            02  FILLER REDEFINES NEWNAMEF.
*                03  NEWNAMEA PIC X.
*            02  NEWNAMEI PIC X(40).
*            02  FILLER REDEFINES NEWNAMEI.
*                03  NEWNAMEO PIC X(40).
*            02  ADDRHDL  PIC S9(4) COMP.
*            02  ADDRHDF  PIC X.
*            02  FILLER REDEFINES ADDRHDF.
*                03  ADDRHDA  PIC X.
*            02  ADDRHDI  PIC X(4).
*            02  FILLER REDEFINES ADDRHDI.
*                03  ADDRHDO  PIC X(4).
*            02  NEWADDRL PIC S9(4) COMP.
*            02  NEWADDRF PIC X.
*            02  FILLER REDEFINES NEWADDRF.
*                03  NEWADDRA PIC X.
*            02  NEWADDRI PIC X(40).
*            02  FILLER REDEFINES NEWADDRI.
*                03  NEWADDRO PIC X(40).
*            02  ZIPHDL   PIC S9(4) COMP.
*            02  ZIPHDF   PIC X.
*            02  FILLER REDEFINES ZIPHDF.
*                03  ZIPHDA   PIC X.
*            02  ZIPHDI   PIC X(4).
*            02  FILLER REDEFINES ZIPHDI.
*                03  ZIPHDO   PIC X(4).
*            02  NEWZIPL  PIC S9(4) COMP.
*            02  NEWZIPF  PIC X.
*            02  FILLER REDEFINES NEWZIPF.
*                03  NEWZIPA  PIC X.
*            02  NEWZIPI  PIC X(5).
*            02  FILLER REDEFINES NEWZIPI.
*                03  NEWZIPO  PIC X(5).
*            02  ERRMSGL  PIC S9(4) COMP.
*            02  ERRMSGF  PIC X.
*            02  FILLER REDEFINES ERRMSGF.
*                03  ERRMSGA  PIC X.
*            02  ERRMSGI  PIC X(34).
*            02  FILLER REDEFINES ERRMSGI.
*                03  ERRMSGO  PIC X(34).
*            02  TESTOCCD OCCURS 5 TIMES.
*                03  TESTOCCL PIC S9(4) COMP.
*                03  TESTOCCF PIC X.
*                03  FILLER REDEFINES TESTOCCF.
*                    04  TESTOCCA PIC X.
*                03  TESTOCCI PIC 9(5).
*                03  FILLER REDEFINES TESTOCCI.
*                    04  TESTOCCO PIC X(5).
*            02  OCCSUML  PIC S9(4) COMP.
*            02  OCCSUMF  PIC X.
*            02  FILLER REDEFINES OCCSUMF.
*                03  OCCSUMA  PIC X.
*            02  OCCSUMI  PIC X(10).
*            02  FILLER REDEFINES OCCSUMI.
*                03  OCCSUMO  PIC ZZ,ZZZ,ZZ9.
*            02  DATEL    PIC S9(4) COMP.
*            02  DATEF    PIC X.
*            02  FILLER REDEFINES DATEF.
*                03  DATEA    PIC X.
*            02  DATEI.
*            02  DATEO REDEFINES DATEI.
*                03  MOI      PIC X(2).
*                03  FILLER REDEFINES MOI.
*                    04  MOO      PIC X(2).
*                03  SEP1I    PIC X.
*                03  FILLER REDEFINES SEP1I.
*                    04  SEP1O    PIC X.
*                03  DAYI     PIC X(2).
*                03  FILLER REDEFINES DAYI.
*                    04  DAYO     PIC X(2).
*                03  SEP2I    PIC X.
*                03  FILLER REDEFINES SEP2I.
*                    04  SEP2O    PIC X.
*                03  YRI      PIC X(2).
*                03  FILLER REDEFINES YRI.
*                    04  YRO      PIC X(2).
*            02  SHOWMDYL PIC S9(4) COMP.
*            02  SHOWMDYF PIC X.
*            02  FILLER REDEFINES SHOWMDYF.
*                03  SHOWMDYA PIC X.
*            02  SHOWMDYI PIC X(18).
*            02  FILLER REDEFINES SHOWMDYI.
*                03  SHOWMDYO PIC X(18).
*            02  TESTPCOL PIC S9(4) COMP.
*            02  TESTPCOF PIC X.
*            02  FILLER REDEFINES TESTPCOF.
*                03  TESTPCOA PIC X.
*            02  TESTPCOI PIC 9(12).
*            02  FILLER REDEFINES TESTPCOI.
*                03  TESTPCOO PIC X(12).
*            02  PAYMEL   PIC S9(4) COMP.
*            02  PAYMEF   PIC X.
*            02  FILLER REDEFINES PAYMEF.
*                03  PAYMEA   PIC X.
*            02  PAYMEI   PIC X(14).
*            02  FILLER REDEFINES PAYMEI.
*                03  PAYMEO   PIC X(14).
*            02  PAYME1L  PIC S9(4) COMP.
*            02  PAYME1F  PIC X.
*            02  FILLER REDEFINES PAYME1F.
*                03  PAYME1A  PIC X.
*            02  PAYME1I  PIC X(12).
*            02  FILLER REDEFINES PAYME1I.
*                03  PAYME1O  PIC $$$$,$$$,$$9.
*            02  CURSL    PIC S9(4) COMP.
*            02  CURSF    PIC X.
*            02  FILLER REDEFINES CURSF.
*                03  CURSA    PIC X.
*            02  CURSI    PIC X(9).
*            02  FILLER REDEFINES CURSI.
*                03  CURSO    PIC X(9).
*        01  GUI6O REDEFINES GUI6I.
*           02  FILLER PIC X(402).
*        01  GUI6HI.
*            02  FILLER  PIC X(12).
*         COPY  DFHAID.
*      * AID VALUES
*        01  DFHAID.
*          02  DFHNULL  PIC X VALUE X'00'.
*          02  DFHENTER PIC X VALUE X'7D'.
*          02  DFHPF1   PIC X VALUE X'F1'.
*          02  DFHPF2   PIC X VALUE X'F2'.
*          02  DFHPF3   PIC X VALUE X'F3'.
*          02  DFHPF4   PIC X VALUE X'F4'.
*          02  DFHPF5   PIC X VALUE X'F5'.
*          02  DFHPF6   PIC X VALUE X'F6'.
*          02  DFHPF7   PIC X VALUE X'F7'.
*          02  DFHPF8   PIC X VALUE X'F8'.
*          02  DFHPF9   PIC X VALUE X'F9'.
*          02  DFHPF10  PIC X VALUE X'7A'.
*          02  DFHPF11  PIC X VALUE X'7B'.
*          02  DFHPF12  PIC X VALUE X'7C'.
*          02  DFHPF13  PIC X VALUE X'C1'.
*          02  DFHPF14  PIC X VALUE X'C2'.
*          02  DFHPF15  PIC X VALUE X'C3'.
*          02  DFHPF16  PIC X VALUE X'C4'.
*          02  DFHPF17  PIC X VALUE X'C5'.
*          02  DFHPF18  PIC X VALUE X'C6'.
*          02  DFHPF19  PIC X VALUE X'C7'.
*          02  DFHPF20  PIC X VALUE X'C8'.
*          02  DFHPF21  PIC X VALUE X'C9'.
*          02  DFHPF22  PIC X VALUE X'4A'.
*          02  DFHPF23  PIC X VALUE X'4B'.
*          02  DFHPF24  PIC X VALUE X'4C'.
*          02  DFHPA1   PIC X VALUE X'6C'.
*          02  DFHPA2   PIC X VALUE X'6E'.
*          02  DFHPA3   PIC X VALUE X'6B'.
*          02  DFHCLEAR PIC X VALUE X'6D'.
*
*         COPY  DFHBMSCA.
*      * Standard BMS equates
*      * Attributes
*        01  DFHBMSCA.
*          02  DFHBMUNP PIC X VALUE X'40'.
*          02  DFHBMFSE PIC X VALUE X'C1'.
*          02  DFHBMBRY PIC X VALUE X'C8'.
*          02  DFHUNIMD PIC X VALUE X'C9'.
*          02  DFHBMDAR PIC X VALUE X'4C'.
*          02  DFHUNNOD PIC X VALUE X'4D'.
*          02  DFHBMUNN PIC X VALUE X'50'.
*          02  DFHUNNUM PIC X VALUE X'D1'.
*          02  DFHUNNUB PIC X VALUE X'D8'.
*          02  DFHUNINT PIC X VALUE X'D9'.
*          02  DFHUNNON PIC X VALUE X'5D'.
*          02  DFHBMPRO PIC X VALUE X'60'.
*          02  DFHBMPRF PIC X VALUE X'61'.
*          02  DFHPROTI PIC X VALUE X'E8'.
*          02  DFHPROTN PIC X VALUE X'6C'.
*          02  DFHBMASK PIC X VALUE X'F0'.
*          02  DFHBMASF PIC X VALUE X'F1'.
*          02  DFHBMASB PIC X VALUE X'F8'.
*      * Mapping
*          02  DFHBMEOF PIC X VALUE X'80'.
*          02  DFHBMCUR PIC X VALUE X'02'.
*          02  DFHBMEF  PIC X VALUE X'82'.
*
*         01  MYCOMM.
*             02  COMMIND  PIC X.
*             02  COMMNAME PIC X(40).
*             02  COMMADDR PIC X(40).
*             02  COMMZIP  PIC X(5).
*         77  MYGUI6   PIC X(7)  VALUE 'GUI6   '.
*         77  OCCSUM   PIC 9(7)  COMP-3.
*         77  OCCINDX  PIC 9(2)  COMP.
*         77  LOOPCTRL PIC 9(2)  COMP.
*         77  SUMLEN   PIC 9(2)  COMP.
*         01  OCCZONE  PIC 99.
*         01  FILLER REDEFINES OCCZONE.
*             02  FILLER   PIC X.
*             02  OCCZONE2 PIC X.
*         01  OCCCURSO.
*             02  FILLER  PIC X(7)  VALUE 'OCCURS('.
*             02  OCCNUM  PIC X.
*             02  FILLER  PIC X     VALUE ')'.
*         01  SHOWMSG.
*             02  FILLER  PIC X(3)  VALUE 'MO='.
*             02  SHOWMO  PIC XX.
*             02  FILLER  PIC X(5)  VALUE ' DAY='.
*             02  SHOWDAY PIC XX.
*             02  FILLER  PIC X(4)  VALUE ' YR='.
*             02  SHOWYR  PIC XX.
*         01  BADKEY.
*             02  FILLER  PIC X(26) VALUE 'NO ACTION FOR AID KEY HEX '.
*             02  HEXKEY  PIC X(2).
*             02  FILLER  PIC X(6)  VALUE SPACES.
*         77  NOMODS   PIC X(34)
*                      VALUE 'NO FIELDS CHANGED                 '.
*         01  FAILMSG.
*             02  FILLER  PIC X(8)  VALUE 'MAPFAIL/'.
*             02  FAILIND PIC X.
*             02  FILLER  PIC X(25) VALUE ' HAS OCCURRED            '.
*         77  ENDMSG   PIC X(34)
*                      VALUE 'TRANSACTION COMPLETE - PRESS CLEAR'.
*         01  WORK1.
*             02  FILLER PIC X(3).
*             02  RESP2  PIC X.
*         LINKAGE SECTION.
*         01  DFHCOMMAREA.
*             02  FILLER PIC X(86).
*         PROCEDURE DIVISION USING DFHEIBLK DFHCOMMAREA.
*      * EXEC INTERFACE BLOCK
*            02  EIBHEAD  PIC X(8).
*            02  EIBTIME  PIC 9(7) COMP-3.
*            02  EIBDATE  PIC 9(7) COMP-3.
*            02  EIBTRNID PIC X(4).
*            02  EIBTASKN PIC 9(7) COMP-3.
*            02  EIBTRMID PIC X(4).
*            02  FILLER   PIC X(2).
*            02  EIBCPOSN PIC 9(4) COMP.
*            02  EIBCALEN PIC 9(4) COMP.
*            02  EIBAID   PIC X.
*            02  EIBFN    PIC 9(4) COMP.
*            02  EIBRCODE PIC X(6).
*            02  EIBREQID PIC X(8).
*            02  EIBDS    PIC X(8).
*            02  EIBRSRCE PIC X(8).
*            02  EIBRESP  PIC 9(9) COMP.
*            02  EIBRESP2 PIC 9(9) COMP.
*            02  EIBPROG  PIC X(8).
*            02  EIBDTFRM PIC X.
         PRINT LIST,GEN,LISTUSE TURN PRINT LISTING ON FOR USER CODE GEN
TESTBMC1  CSECT                SWITCH TO PROCEDURE CODE AHEAD OF WS
         L     ZC_R0,0(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHEIBLK_PTR STORE PARM POINTER
         L     ZC_R0,4(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHCOMMAREA_PTR STORE PARM POINTER
         MVI   DFHNULL,X'00'
         MVI   DFHENTER,X'7D'
         MVI   DFHPF1,X'F1'
         MVI   DFHPF2,X'F2'
         MVI   DFHPF3,X'F3'
         MVI   DFHPF4,X'F4'
         MVI   DFHPF5,X'F5'
         MVI   DFHPF6,X'F6'
         MVI   DFHPF7,X'F7'
         MVI   DFHPF8,X'F8'
         MVI   DFHPF9,X'F9'
         MVI   DFHPF10,X'7A'
         MVI   DFHPF11,X'7B'
         MVI   DFHPF12,X'7C'
         MVI   DFHPF13,X'C1'
         MVI   DFHPF14,X'C2'
         MVI   DFHPF15,X'C3'
         MVI   DFHPF16,X'C4'
         MVI   DFHPF17,X'C5'
         MVI   DFHPF18,X'C6'
         MVI   DFHPF19,X'C7'
         MVI   DFHPF20,X'C8'
         MVI   DFHPF21,X'C9'
         MVI   DFHPF22,X'4A'
         MVI   DFHPF23,X'4B'
         MVI   DFHPF24,X'4C'
         MVI   DFHPA1,X'6C'
         MVI   DFHPA2,X'6E'
         MVI   DFHPA3,X'6B'
         MVI   DFHCLEAR,X'6D'
         MVI   DFHBMUNP,X'40'
         MVI   DFHBMFSE,X'C1'
         MVI   DFHBMBRY,X'C8'
         MVI   DFHUNIMD,X'C9'
         MVI   DFHBMDAR,X'4C'
         MVI   DFHUNNOD,X'4D'
         MVI   DFHBMUNN,X'50'
         MVI   DFHUNNUM,X'D1'
         MVI   DFHUNNUB,X'D8'
         MVI   DFHUNINT,X'D9'
         MVI   DFHUNNON,X'5D'
         MVI   DFHBMPRO,X'60'
         MVI   DFHBMPRF,X'61'
         MVI   DFHPROTI,X'E8'
         MVI   DFHPROTN,X'6C'
         MVI   DFHBMASK,X'F0'
         MVI   DFHBMASF,X'F1'
         MVI   DFHBMASB,X'F8'
         MVI   DFHBMEOF,X'80'
         MVI   DFHBMCUR,X'02'
         MVI   DFHBMEF,X'82'
         LARL  ZC_R1,=CL8'GUI6   '
         MVC   MYGUI6,0(ZC_R1)
         LARL  ZC_R1,=CL8'OCCURS('
         MVC   ZC_FILLER_V1,0(ZC_R1)
         MVI   ZC_FILLER_V2,C')'
         LARL  ZC_R1,=CL4'MO='
         MVC   ZC_FILLER_V3,0(ZC_R1)
         LARL  ZC_R1,=CL6' DAY='
         MVC   ZC_FILLER_V4,0(ZC_R1)
         LARL  ZC_R1,=CL4' YR='
         MVC   ZC_FILLER_V5,0(ZC_R1)
         LARL  ZC_R1,=CL26'NO ACTION FOR AID KEY HEX '
         MVC   ZC_FILLER_V6,0(ZC_R1)
         MVI   ZC_FILLER_V7,C' '
         MVC   ZC_FILLER_V7+1(6-1),ZC_FILLER_V7
         LARL  ZC_R1,=CL34'NO FIELDS CHANGED                 '
         MVC   NOMODS,0(ZC_R1)
         LARL  ZC_R1,=CL8'MAPFAIL/'
         MVC   ZC_FILLER_V8,0(ZC_R1)
         LARL  ZC_R1,=CL26' HAS OCCURRED            '
         MVC   ZC_FILLER_V9,0(ZC_R1)
         LARL  ZC_R1,=CL34'TRANSACTION COMPLETE - PRESS CLEAR'
         MVC   ENDMSG,0(ZC_R1)
         MVI   ZC_FILLER_V10,C' '
         MVI   ZC_FILLER_V11,C' '
         MVI   ZC_FILLER_V12,C' '
         MVI   ZC_FILLER_V13,C' '
         MVI   ZC_FILLER_V14,C' '
         MVHHI RETURN_CODE,0
*      *  XC    COMMIND(86),COMMIND CLEAR COMMAREA
*             MOVE LOW-VALUES TO MYCOMM.
*      *  ICM   R5,15,TCTTECA      ADDRESS RECEIVED COMMAREA ?
*      *  BNZ   NOT1ST             EXIT IF OK
*ZC    318         MOVE  LOW_VALUES,TO,MYCOMM
         MVI   MYCOMM,X'00'
         MVC   MYCOMM+1(86-1),MYCOMM
*             IF EIBCALEN NOT = 0 THEN GO TO NOT1ST.
*ZC    321         IF    EIBCALEN,NOT,=,0,THEN
         LH    0,EIBCALEN
         CHI   0,0
         BRC   15-ZC_NE,PG_IF_1_1
*      * SETUP DSA COMMAREA
*      *  LA    R5,COMMIND         ADDRESS DSA COMMAREA
*      *  USING COMMIND,R5
*      * RESEND4  EQU   *
*ZC    321         GO    TO,NOT1ST
         J     PG_NOT1ST
PG_IF_1_1  DS    0H  END_IF
*         RESEND4.
*      * INITIAL GUI4 MAP
PG_RESEND4  DS    0H
*             EXEC CICS SEND MAP('GUI4') MAPSET('MAP01C') MAPONLY ERASE
*ZC    328         EXEC  CICS,SEND,MAP('GUI4'),MAPSET('MAP01C'),MAPONLYX
               ,ERASE
         LARL  R1,P1804         ADDRESS SOURCE
         LARL  R15,P1804        ADDRESS TARGET
         XC    0(P1804END-P1804,R15),0(R1) XC IT
         LARL  R1,=X'1804'         ADDRESS SOURCE
         LARL  R15,P1804FN        ADDRESS TARGET
         MVC   0(L'P1804FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'GUI4'         ADDRESS SOURCE
         LARL  R15,P1804MAP        ADDRESS TARGET
         MVC   0(L'P1804MAP,R15),0(R1) MVC IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R1,=AL4(P1804MLN)         ADDRESS SOURCE
         LARL  R15,P0E06LEN        ADDRESS TARGET
         MVC   0(L'P0E06LEN,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_1078   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_1078   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_1078) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_1078 EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         J     P0E06BYP_1078   EXIT
*
P0E06    DS    0H
P0E06FN  DS    XL2                FUNCTION CODE
P0E06EIB DS    AL4                EIB
P0E06TCT DS    AL4                TCTTE
P0E06PGM DS    CL8                PROGRAM
P0E06LEN DS    AL4                ADDRESS OF LENGTH
P0E06FLN DS    AL4                ADDRESS OF FLENGTH
P0E06ENT DS    AL4                ENTRY POINT
P0E06NOH DS    X                  FF=NOHANDLE
         DS    X
P0E06RSP DS    AL4                RESP
P0E06RS2 DS    AL4                RESP2
P0E06END EQU   *                  END MARKER
         DS    0H
*
P0E06BYP_1078 DS 0H
         LARL  R1,P1804MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P1804CRS        ADDRESS TARGET
         MVC   0(L'P1804CRS,R15),0(R1) MVC IT
         LARL  R1,P1804OPT         ADDRESS TARGET
         MVI   0(R1),B'10010000'      MVI IT
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(2000)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(0)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         LA    R15,8(R1)         SET GETMAIN ADDRESS FOR REQUESTOR
         J     P0C02BYP_1090   EXIT
*
P0C02    DS    0H
P0C02FN  DS    XL2                FUNCTION CODE
P0C02EIB DS    AL4                EIB
P0C02TCT DS    AL4                TCTTE
P0C02LEN DS    AL4                LENGTH/FLENGTH
P0C02INM DS    X                  FF=INITIMG SPECIFIED
         DS    X
P0C02INT DS    X                  INITIMG
         DS    X
P0C02GMA DS    AL4                GETMAIN ADDRESS
P0C02NOH DS    X                  FF=NOHANDLE
         DS    X
P0C02RSP DS    AL4                RESP
P0C02RS2 DS    AL4                RESP2
P0C02END EQU   *                  END MARKER
         DS    0H
*
P0C02BYP_1090 DS 0H
         LR    R0,R15             COPY OUTPUT AREA ADDRESS
         LARL  R1,P1804OUT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P1804EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1804TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1804)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1804NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1804BYP_1073   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1804BYP_1073   EXIT IF NONE
* MAPFAIL, INVMPSZ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1804BYP_1073) ENTRYPOINT FOR IGNORE CONDITION
*
P1804    DS    0H
P1804FN  DS    XL2                FUNCTION CODE
P1804EIB DS    AL4                EIB
P1804TCT DS    AL4                TCTTE
P1804MSA DS    AL4                MAPSET ADDRESS
P1804MAP DS    CL7                MAP NAME
         DS    X
P1804MLN DS    XL2                MAPSET LENGTH
P1804DSC DS    AL4                STRUCTURE ADDRESS
P1804DSL DS    AL2                STRUCTURE LENGTH
P1804OUT DS    AL4                OUTPUT AREA
P1804OAL DS    XL2                OUTPUT AREA LENGTH (FOR SET)
P1804CRS DS    XL2                CURSOR POSITION (X'FFFF'=NONE)
P1804OPT DS    X                  OPTION BITS...
*1804ERS EQU   X'80'                 ERASE
*1804EAU EQU   X'40'                 ERASEAUP
*1804CSM EQU   X'20'                 SYMBOLIC CURSOR
*1804MNY EQU   X'10'                 MAPONLY
*1804DNY EQU   X'08'                 DATAONLY
*1804ALM EQU   X'04'                 ALARM
*1804FKB EQU   X'02'                 FREEKB
*1804FRS EQU   X'01'                 FRSET
         DS    X
P1804SET DS    X                  FF=SET SPECIFIED
         DS    X
P1804NOH DS    X                  FF=NOHANDLE
         DS    X
P1804RSP DS    AL4                RESP
P1804RS2 DS    AL4                RESP2
P1804END EQU   *                  END MARKER
         DS    0H
*
P1804BYP_1073 DS 0H
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LRL   R0,P1804OUT           INDIRECT FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_1102   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_1102   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_1102) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04    DS    0H
P0C04FN  DS    XL2                FUNCTION CODE
P0C04EIB DS    AL4                EIB
P0C04TCT DS    AL4                TCTTE
P0C04FMA DS    AL4                FREEMAIN ADDRESS
P0C04NOH DS    X                  FF=NOHANDLE
         DS    X
P0C04RSP DS    AL4                RESP
P0C04RS2 DS    AL4                RESP2
P0C04END EQU   *                  END MARKER
         DS    0H
*
P0C04BYP_1102 DS 0H
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_1110   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_1110   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_1110) ENTRYPOINT FOR IGNORE CONDITION
*
P0E0A    DS    0H
P0E0AFN  DS    XL2                FUNCTION CODE
P0E0AEIB DS    AL4                EIB
P0E0ATCT DS    AL4                TCTTE
P0E0APGM DS    CL8                PROGRAM
P0E0ACST DS    CL8                OUR PROGRAM NAME
P0E0ANOH DS    X                  FF=NOHANDLE
         DS    X
P0E0ARSP DS    AL4                RESP
P0E0ARS2 DS    AL4                RESP2
P0E0AEND EQU   *                  END MARKER
         DS    0H
*
P0E0ABYP_1110 DS 0H
*                       END-EXEC.
*      *  MVI   COMMIND,C'1'       SET GUI4 REENTRY POINT
*             MOVE '1' TO COMMIND.
*      *  B     RETURN             EXIT
*ZC    331         MOVE  '1',TO,COMMIND
         MVI   COMMIND,C'1'
*             GO TO ECRETURN.
*      * NOT1ST   EQU   *
*ZC    333         GO    TO,ECRETURN
         J     PG_ECRETURN
*         NOT1ST.
*      * PROCESS INPUT
PG_RESEND4_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_NOT1ST  DS    0H
*             MOVE DFHCOMMAREA TO MYCOMM.
*      *  CLI   COMMIND,C'1'       COMMAREA=1 ?
*      *  BE    GUI4RENT           EXIT IF IT IS
*      *  CLI   COMMIND,C'2'       COMMAREA=2 ?
*      *  BE    GUI6RENT           EXIT IF IT IS
*      *  CLI   COMMIND,C'3'       COMMAREA=3 ?
*      *  BE    GUI6HRNT           EXIT IF IT IS
*      *  DC    H'0'               BAD COMMAREA
*ZC    337         MOVE  DFHCOMMAREA,TO,MYCOMM
         L     ZC_R5,ZC_DFHCOMMAREA_PTR
         USING DFHCOMMAREA_DSECT,ZC_R5
         MVC   MYCOMM,DFHCOMMAREA
         DROP     ZC_R5
*             IF COMMIND = '1' THEN GO TO GUI4RENT.
*ZC    345         IF    COMMIND,=,'1',THEN
         CLI   COMMIND,C'1'
         BRC   15-ZC_EQ,PG_IF_2_1
*ZC    345         GO    TO,GUI4RENT
         J     PG_GUI4RENT
PG_IF_2_1  DS    0H  END_IF
*             IF COMMIND = '2' THEN GO TO GUI6RENT.
*ZC    346         IF    COMMIND,=,'2',THEN
         CLI   COMMIND,C'2'
         BRC   15-ZC_EQ,PG_IF_3_1
*ZC    346         GO    TO,GUI6RENT
         J     PG_GUI6RENT
PG_IF_3_1  DS    0H  END_IF
*             IF COMMIND = '3' THEN GO TO GUI6HRNT.
*ZC    347         IF    COMMIND,=,'3',THEN
         CLI   COMMIND,C'3'
         BRC   15-ZC_EQ,PG_IF_4_1
*ZC    347         GO    TO,GUI6HRNT
         J     PG_GUI6HRNT
PG_IF_4_1  DS    0H  END_IF
*             GO TO ABEND.
*      * GUI4RENT EQU   *
*ZC    348         GO    TO,ABEND
         J     PG_ABEND
*         GUI4RENT.
*      * PROCESS GUI4 INPUT
PG_NOT1ST_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GUI4RENT  DS    0H
*             EXEC CICS IGNORE CONDITION MAPFAIL END-EXEC.
*ZC    352         EXEC  CICS,IGNORE,CONDITION,MAPFAIL
         LARL  R1,P020A         ADDRESS SOURCE
         LARL  R15,P020A        ADDRESS TARGET
         XC    0(P020AEND-P020A,R15),0(R1) XC IT
         LARL  R1,=X'020A'         ADDRESS SOURCE
         LARL  R15,P020AFN        ADDRESS TARGET
         MVC   0(L'P020AFN,R15),0(R1) MVC IT
         LARL  R1,P020AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P020ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R14,P020ACND       R14=ADDRESS OF COND INDICATORS
         MVI   0(R14),36      SET CONDITION INDICATOR
         AHI   R14,1              BUMP POINTER
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P020AHCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P020A)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         J     P020ABYP_1177   EXIT
*
P020A    DS    0H
P020AFN  DS    XL2                FUNCTION CODE
P020AEIB DS    AL4                EIB
P020ATCT DS    AL4                TCTTE
P020AHCN DS    AL4                A(DFHEIHCN)
P020ACND DS    XL30               ROOM FOR 30 CONDITIONS
P020ARSP DS    AL4                RESP
P020ARS2 DS    AL4                RESP2
P020AEND EQU   *                  END MARKER
         DS    0H
*
P020ABYP_1177 DS 0H
*             EXEC CICS RECEIVE MAP('GUI4') MAPSET('MAP01C') END-EXEC.
*ZC    353         EXEC  CICS,RECEIVE,MAP('GUI4'),MAPSET('MAP01C')
         LARL  R1,P1802         ADDRESS SOURCE
         LARL  R15,P1802        ADDRESS TARGET
         XC    0(P1802END-P1802,R15),0(R1) XC IT
         LARL  R1,=X'1802'         ADDRESS SOURCE
         LARL  R15,P1802FN        ADDRESS TARGET
         MVC   0(L'P1802FN,R15),0(R1) MVC IT
         LARL  R1,P1802EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1802TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'GUI4'         ADDRESS SOURCE
         LARL  R15,P1802MAP        ADDRESS TARGET
         MVC   0(L'P1802MAP,R15),0(R1) MVC IT
         LA    R0,GUI4I        R0=DEFAULT MAP STRUCTURE ADDRESS
         LARL  R1,P1802DSC         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'GUI4I      R0=MAP STRUCTURE LENGTH (COBOL)
         LARL  R1,P1802DSL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R1,=AL4(P1802LEN_1185)         ADDRESS SOURCE
         LARL  R15,P0E06LEN        ADDRESS TARGET
         MVC   0(L'P0E06LEN,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_1194   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_1194   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_1194) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_1194 EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         LARL  R1,P1802MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,P1802LEN_1185         ADDRESS SOURCE
         LARL  R15,P1802MLN        ADDRESS TARGET
         MVC   0(L'P1802MLN,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1802)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1802NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1802BYP_1185   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1802BYP_1185   EXIT IF NONE
* MAPFAIL, INVMPSZ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1802BYP_1185) ENTRYPOINT FOR IGNORE CONDITION
*
P1802LEN_1185 DS XL2
*
P1802    DS    0H
P1802FN  DS    XL2                FUNCTION CODE
P1802EIB DS    AL4                EIB
P1802TCT DS    AL4                TCTTE
P1802MSA DS    AL4                MAPSET ADDRESS
P1802MAP DS    CL7                MAP NAME
         DS    X
P1802MLN DS    XL2                MAPSET LENGTH
P1802DSC DS    AL4                STRUCTURE ADDRESS
P1802DSL DS    AL2                STRUCTURE LENGTH
P1802NOH DS    X                  FF=NOHANDLE
         DS    X
P1802RSP DS    AL4                RESP
P1802RS2 DS    AL4                RESP2
P1802END EQU   *                  END MARKER
         DS    0H
*
P1802BYP_1185 DS 0H
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_1206   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_1206   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_1206) ENTRYPOINT FOR IGNORE CONDITION
P0E0ABYP_1206 DS 0H
*      *  CLI   EIBAID,DFHPF3      PF3 ?
*      *  BE    GUI6               YES, EXIT TO START GUI6
*             IF EIBAID = DFHPF3   THEN GO TO GUI6.
*ZC    356         IF    EIBAID,=,DFHPF3,THEN
         CLC   EIBAID,DFHPF3
         BRC   15-ZC_EQ,PG_IF_5_1
*      *  CLI   EIBAID,DFHCLEAR    CLEAR ?
*      *  BE    RESEND4            YES, EXIT TO REFRESH DISPLAY
*ZC    356         GO    TO,GUI6
         J     PG_GUI6
PG_IF_5_1  DS    0H  END_IF
*             IF EIBAID = DFHCLEAR THEN GO TO RESEND4.
*ZC    359         IF    EIBAID,=,DFHCLEAR,THEN
         CLC   EIBAID,DFHCLEAR
         BRC   15-ZC_EQ,PG_IF_6_1
*      *  CLC   INPUTI,=C'END'     REQUEST TO END ?
*      *  BE    GUI6               EXIT IF IT IS
*ZC    359         GO    TO,RESEND4
         J     PG_RESEND4
PG_IF_6_1  DS    0H  END_IF
*             IF INPUTI = 'END' THEN GO TO GUI6.
*ZC    362         IF    INPUTI,=,'END',THEN
         LARL  ZC_R1,=CL4'END'
         CLC   INPUTI,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_7_1
*      *  MVC   REPLYO,INPUTI      DISPLAY THE INPUT
*ZC    362         GO    TO,GUI6
         J     PG_GUI6
PG_IF_7_1  DS    0H  END_IF
*             MOVE INPUTI TO REPLYO.
*ZC    364         MOVE  INPUTI,TO,REPLYO
         MVC   REPLYO,INPUTI
*             EXEC CICS SEND MAP('GUI4') MAPSET('MAP01C') END-EXEC.
*ZC    365         EXEC  CICS,SEND,MAP('GUI4'),MAPSET('MAP01C')
         LARL  R1,P1804         ADDRESS SOURCE
         LARL  R15,P1804        ADDRESS TARGET
         XC    0(P1804END-P1804,R15),0(R1) XC IT
         LARL  R1,=X'1804'         ADDRESS SOURCE
         LARL  R15,P1804FN        ADDRESS TARGET
         MVC   0(L'P1804FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'GUI4'         ADDRESS SOURCE
         LARL  R15,P1804MAP        ADDRESS TARGET
         MVC   0(L'P1804MAP,R15),0(R1) MVC IT
         LA    R0,GUI4O        R0=DEFAULT MAP STRUCTURE ADDRESS
         LARL  R1,P1804DSC         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'GUI4O      R0=DEFAULT MAP STRUC LENGTH (COBOL)
         LARL  R1,P1804DSL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R1,=AL4(P1804MLN)         ADDRESS SOURCE
         LARL  R15,P0E06LEN        ADDRESS TARGET
         MVC   0(L'P0E06LEN,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_1267   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_1267   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_1267) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_1267 EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         LARL  R1,P1804MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P1804CRS        ADDRESS TARGET
         MVC   0(L'P1804CRS,R15),0(R1) MVC IT
         LARL  R1,P1804OPT         ADDRESS TARGET
         MVI   0(R1),B'00000000'      MVI IT
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(2000)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(0)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         LA    R15,8(R1)         SET GETMAIN ADDRESS FOR REQUESTOR
         LR    R0,R15             COPY OUTPUT AREA ADDRESS
         LARL  R1,P1804OUT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P1804EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1804TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1804)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1804NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1804BYP_1260   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1804BYP_1260   EXIT IF NONE
* MAPFAIL, INVMPSZ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1804BYP_1260) ENTRYPOINT FOR IGNORE CONDITION
*
P1804BYP_1260 DS 0H
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LRL   R0,P1804OUT           INDIRECT FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_1291   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_1291   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_1291) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_1291 DS 0H
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_1299   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_1299   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_1299) ENTRYPOINT FOR IGNORE CONDITION
P0E0ABYP_1299 DS 0H
*      *  B     RETURN             LOOP
*             GO TO ECRETURN.
*      * GUI6     EQU   *
*ZC    367         GO    TO,ECRETURN
         J     PG_ECRETURN
*         GUI6.
*      * INITIAL GUI6 MAP
*      *  XC    COMMIND(86),COMMIND CLEAR COMMAREA
PG_GUI4RENT_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GUI6  DS    0H
*             MOVE LOW-VALUES TO MYCOMM.
*ZC    372         MOVE  LOW_VALUES,TO,MYCOMM
         MVI   MYCOMM,X'00'
         MVC   MYCOMM+1(86-1),MYCOMM
*             EXEC CICS SEND MAP('GUI6') MAPSET('MAP01C') MAPONLY ERASE
*ZC    373         EXEC  CICS,SEND,MAP('GUI6'),MAPSET('MAP01C'),MAPONLYX
               ,ERASE
         LARL  R1,P1804         ADDRESS SOURCE
         LARL  R15,P1804        ADDRESS TARGET
         XC    0(P1804END-P1804,R15),0(R1) XC IT
         LARL  R1,=X'1804'         ADDRESS SOURCE
         LARL  R15,P1804FN        ADDRESS TARGET
         MVC   0(L'P1804FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'GUI6'         ADDRESS SOURCE
         LARL  R15,P1804MAP        ADDRESS TARGET
         MVC   0(L'P1804MAP,R15),0(R1) MVC IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R1,=AL4(P1804MLN)         ADDRESS SOURCE
         LARL  R15,P0E06LEN        ADDRESS TARGET
         MVC   0(L'P0E06LEN,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_1325   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_1325   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_1325) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_1325 EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         LARL  R1,P1804MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P1804CRS        ADDRESS TARGET
         MVC   0(L'P1804CRS,R15),0(R1) MVC IT
         LARL  R1,P1804OPT         ADDRESS TARGET
         MVI   0(R1),B'10010000'      MVI IT
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(2000)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(0)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         LA    R15,8(R1)         SET GETMAIN ADDRESS FOR REQUESTOR
         LR    R0,R15             COPY OUTPUT AREA ADDRESS
         LARL  R1,P1804OUT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P1804EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1804TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1804)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1804NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1804BYP_1320   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1804BYP_1320   EXIT IF NONE
* MAPFAIL, INVMPSZ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1804BYP_1320) ENTRYPOINT FOR IGNORE CONDITION
*
P1804BYP_1320 DS 0H
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LRL   R0,P1804OUT           INDIRECT FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_1349   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_1349   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_1349) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_1349 DS 0H
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_1357   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_1357   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_1357) ENTRYPOINT FOR IGNORE CONDITION
P0E0ABYP_1357 DS 0H
*                       END-EXEC.
*      *  MVI   COMMIND,C'2'       SET GUI6 REENTRY POINT
*             MOVE '2' TO COMMIND.
*      *  B     RETURN             EXIT
*ZC    376         MOVE  '2',TO,COMMIND
         MVI   COMMIND,C'2'
*             GO TO ECRETURN.
*      * GUI6RENT EQU   *
*ZC    378         GO    TO,ECRETURN
         J     PG_ECRETURN
*         GUI6RENT.
PG_GUI6_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GUI6RENT  DS    0H
*             EXEC  CICS HANDLE CONDITION MAPFAIL(MAPFAILS) END-EXEC.
*ZC    381         EXEC  CICS,HANDLE,CONDITION,MAPFAIL(MAPFAILS)
         LARL  R1,P0204         ADDRESS SOURCE
         LARL  R15,P0204        ADDRESS TARGET
         XC    0(P0204END-P0204,R15),0(R1) XC IT
         LARL  R1,=X'0204'         ADDRESS SOURCE
         LARL  R15,P0204FN        ADDRESS TARGET
         MVC   0(L'P0204FN,R15),0(R1) MVC IT
         LARL  R1,P0204EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0204TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0204CND        R1=ADDRESS CONDITION NUMBERS
         LARL  R14,P0204ADR       R14=ADDRESSES OR FF IF CANCEL
         MVI   0(R1),36       SET CONDITION NUMBER
         LARL  R0,PG_MAPFAILS     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0204HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0204)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         J     P0204BYP_1377   EXIT
*
P0204    DS    0H
P0204FN  DS    XL2                FUNCTION CODE
P0204EIB DS    AL4                EIB
P0204TCT DS    AL4                TCTTE
P0204HCN DS    AL4                A(DFHEIHCN)
P0204CND DS    XL30               ROOM FOR 30 CONDITIONS
P0204ADR DS    30AL4              ROOM FOR 30 ADDRESSES, FF......=CLEAR
P0204RSP DS    AL4                RESP
P0204RS2 DS    AL4                RESP2
P0204END EQU   *                  END MARKER
         DS    0H
*
P0204BYP_1377 DS 0H
*             EXEC  CICS RECEIVE MAP('GUI6') MAPSET('MAP01C') END-EXEC.
*ZC    382         EXEC  CICS,RECEIVE,MAP('GUI6'),MAPSET('MAP01C')
         LARL  R1,P1802         ADDRESS SOURCE
         LARL  R15,P1802        ADDRESS TARGET
         XC    0(P1802END-P1802,R15),0(R1) XC IT
         LARL  R1,=X'1802'         ADDRESS SOURCE
         LARL  R15,P1802FN        ADDRESS TARGET
         MVC   0(L'P1802FN,R15),0(R1) MVC IT
         LARL  R1,P1802EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1802TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'GUI6'         ADDRESS SOURCE
         LARL  R15,P1802MAP        ADDRESS TARGET
         MVC   0(L'P1802MAP,R15),0(R1) MVC IT
         LA    R0,GUI6I        R0=DEFAULT MAP STRUCTURE ADDRESS
         LARL  R1,P1802DSC         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'GUI6I      R0=MAP STRUCTURE LENGTH (COBOL)
         LARL  R1,P1802DSL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R1,=AL4(P1802LEN_1385)         ADDRESS SOURCE
         LARL  R15,P0E06LEN        ADDRESS TARGET
         MVC   0(L'P0E06LEN,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_1394   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_1394   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_1394) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_1394 EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         LARL  R1,P1802MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,P1802LEN_1385         ADDRESS SOURCE
         LARL  R15,P1802MLN        ADDRESS TARGET
         MVC   0(L'P1802MLN,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1802)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1802NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1802BYP_1385   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1802BYP_1385   EXIT IF NONE
* MAPFAIL, INVMPSZ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1802BYP_1385) ENTRYPOINT FOR IGNORE CONDITION
*
P1802LEN_1385 DS XL2
*
P1802BYP_1385 DS 0H
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_1406   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_1406   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_1406) ENTRYPOINT FOR IGNORE CONDITION
P0E0ABYP_1406 DS 0H
*      * SHORTRD  EQU   *
*         SHORTRD.
*      *  CLI   EIBAID,DFHENTER    ENTER ?
*      *  BE    GUI6DATA           EXIT IF IT IS
PG_GUI6RENT_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_SHORTRD  DS    0H
*             IF EIBAID = DFHENTER THEN GO TO GUI6DATA.
*ZC    387         IF    EIBAID,=,DFHENTER,THEN
         CLC   EIBAID,DFHENTER
         BRC   15-ZC_EQ,PG_IF_8_1
*      *  CLI   EIBAID,DFHPF1      PF1 ?
*      *  BE    GUI6HELP           EXIT IF IT IS
*ZC    387         GO    TO,GUI6DATA
         J     PG_GUI6DATA
PG_IF_8_1  DS    0H  END_IF
*             IF EIBAID = DFHPF1   THEN GO TO GUI6HELP.
*ZC    390         IF    EIBAID,=,DFHPF1,THEN
         CLC   EIBAID,DFHPF1
         BRC   15-ZC_EQ,PG_IF_9_1
*      *  CLI   EIBAID,DFHPF2      PF2 ?
*      *  BE    EAU                EXIT IF IT IS
*ZC    390         GO    TO,GUI6HELP
         J     PG_GUI6HELP
PG_IF_9_1  DS    0H  END_IF
*             IF EIBAID = DFHPF2   THEN GO TO EAU.
*ZC    393         IF    EIBAID,=,DFHPF2,THEN
         CLC   EIBAID,DFHPF2
         BRC   15-ZC_EQ,PG_IF_10_1
*      *  CLI   EIBAID,DFHPF3      PF3 ?
*      *  BE    ALLDONE            EXIT IF IT IS
*ZC    393         GO    TO,EAU
         J     PG_EAU
PG_IF_10_1  DS    0H  END_IF
*             IF EIBAID = DFHPF3   THEN GO TO ALLDONE.
*ZC    396         IF    EIBAID,=,DFHPF3,THEN
         CLC   EIBAID,DFHPF3
         BRC   15-ZC_EQ,PG_IF_11_1
*      *  CLI   EIBAID,DFHCLEAR    CLEAR ?
*      *  BE    GUI6               YES, EXIT TO REFRESH DISPLAY
*ZC    396         GO    TO,ALLDONE
         J     PG_ALLDONE
PG_IF_11_1  DS    0H  END_IF
*             IF EIBAID = DFHCLEAR THEN GO TO GUI6.
*ZC    399         IF    EIBAID,=,DFHCLEAR,THEN
         CLC   EIBAID,DFHCLEAR
         BRC   15-ZC_EQ,PG_IF_12_1
*      * BAD KEY
*      *  UNPK  HEXKEY(3),EIBAID(2) UNPACK AID
*      *  TR    HEXKEY(2),HEXTAB-240 TRANSLATE
*      *  MVI   HEXKEY+2,C' '      CLEAR EXTRA BYTE
*ZC    399         GO    TO,GUI6
         J     PG_GUI6
PG_IF_12_1  DS    0H  END_IF
*             IF EIBAID = DFHPF4  THEN MOVE 'F4' TO HEXKEY.
*ZC    404         IF    EIBAID,=,DFHPF4,THEN
         CLC   EIBAID,DFHPF4
         BRC   15-ZC_EQ,PG_IF_13_1
*ZC    404         MOVE  'F4',TO,HEXKEY
         LARL  ZC_R1,=CL2'F4'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_13_1  DS    0H  END_IF
*             IF EIBAID = DFHPF5  THEN MOVE 'F5' TO HEXKEY.
*ZC    405         IF    EIBAID,=,DFHPF5,THEN
         CLC   EIBAID,DFHPF5
         BRC   15-ZC_EQ,PG_IF_14_1
*ZC    405         MOVE  'F5',TO,HEXKEY
         LARL  ZC_R1,=CL2'F5'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_14_1  DS    0H  END_IF
*             IF EIBAID = DFHPF6  THEN MOVE 'F6' TO HEXKEY.
*ZC    406         IF    EIBAID,=,DFHPF6,THEN
         CLC   EIBAID,DFHPF6
         BRC   15-ZC_EQ,PG_IF_15_1
*ZC    406         MOVE  'F6',TO,HEXKEY
         LARL  ZC_R1,=CL2'F6'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_15_1  DS    0H  END_IF
*             IF EIBAID = DFHPF7  THEN MOVE 'F7' TO HEXKEY.
*ZC    407         IF    EIBAID,=,DFHPF7,THEN
         CLC   EIBAID,DFHPF7
         BRC   15-ZC_EQ,PG_IF_16_1
*ZC    407         MOVE  'F7',TO,HEXKEY
         LARL  ZC_R1,=CL2'F7'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_16_1  DS    0H  END_IF
*             IF EIBAID = DFHPF8  THEN MOVE 'F8' TO HEXKEY.
*ZC    408         IF    EIBAID,=,DFHPF8,THEN
         CLC   EIBAID,DFHPF8
         BRC   15-ZC_EQ,PG_IF_17_1
*ZC    408         MOVE  'F8',TO,HEXKEY
         LARL  ZC_R1,=CL2'F8'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_17_1  DS    0H  END_IF
*             IF EIBAID = DFHPF9  THEN MOVE 'F9' TO HEXKEY.
*ZC    409         IF    EIBAID,=,DFHPF9,THEN
         CLC   EIBAID,DFHPF9
         BRC   15-ZC_EQ,PG_IF_18_1
*ZC    409         MOVE  'F9',TO,HEXKEY
         LARL  ZC_R1,=CL2'F9'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_18_1  DS    0H  END_IF
*             IF EIBAID = DFHPF10 THEN MOVE '7A' TO HEXKEY.
*ZC    410         IF    EIBAID,=,DFHPF10,THEN
         CLC   EIBAID,DFHPF10
         BRC   15-ZC_EQ,PG_IF_19_1
*ZC    410         MOVE  '7A',TO,HEXKEY
         LARL  ZC_R1,=CL2'7A'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_19_1  DS    0H  END_IF
*             IF EIBAID = DFHPF11 THEN MOVE '7B' TO HEXKEY.
*ZC    411         IF    EIBAID,=,DFHPF11,THEN
         CLC   EIBAID,DFHPF11
         BRC   15-ZC_EQ,PG_IF_20_1
*ZC    411         MOVE  '7B',TO,HEXKEY
         LARL  ZC_R1,=CL2'7B'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_20_1  DS    0H  END_IF
*             IF EIBAID = DFHPF12 THEN MOVE '7C' TO HEXKEY.
*ZC    412         IF    EIBAID,=,DFHPF12,THEN
         CLC   EIBAID,DFHPF12
         BRC   15-ZC_EQ,PG_IF_21_1
*ZC    412         MOVE  '7C',TO,HEXKEY
         LARL  ZC_R1,=CL2'7C'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_21_1  DS    0H  END_IF
*             IF EIBAID = DFHPF13 THEN MOVE 'C1' TO HEXKEY.
*ZC    413         IF    EIBAID,=,DFHPF13,THEN
         CLC   EIBAID,DFHPF13
         BRC   15-ZC_EQ,PG_IF_22_1
*ZC    413         MOVE  'C1',TO,HEXKEY
         LARL  ZC_R1,=CL2'C1'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_22_1  DS    0H  END_IF
*             IF EIBAID = DFHPF14 THEN MOVE 'C2' TO HEXKEY.
*ZC    414         IF    EIBAID,=,DFHPF14,THEN
         CLC   EIBAID,DFHPF14
         BRC   15-ZC_EQ,PG_IF_23_1
*ZC    414         MOVE  'C2',TO,HEXKEY
         LARL  ZC_R1,=CL2'C2'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_23_1  DS    0H  END_IF
*             IF EIBAID = DFHPF15 THEN MOVE 'C3' TO HEXKEY.
*ZC    415         IF    EIBAID,=,DFHPF15,THEN
         CLC   EIBAID,DFHPF15
         BRC   15-ZC_EQ,PG_IF_24_1
*ZC    415         MOVE  'C3',TO,HEXKEY
         LARL  ZC_R1,=CL2'C3'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_24_1  DS    0H  END_IF
*             IF EIBAID = DFHPF16 THEN MOVE 'C4' TO HEXKEY.
*ZC    416         IF    EIBAID,=,DFHPF16,THEN
         CLC   EIBAID,DFHPF16
         BRC   15-ZC_EQ,PG_IF_25_1
*ZC    416         MOVE  'C4',TO,HEXKEY
         LARL  ZC_R1,=CL2'C4'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_25_1  DS    0H  END_IF
*             IF EIBAID = DFHPF17 THEN MOVE 'C5' TO HEXKEY.
*ZC    417         IF    EIBAID,=,DFHPF17,THEN
         CLC   EIBAID,DFHPF17
         BRC   15-ZC_EQ,PG_IF_26_1
*ZC    417         MOVE  'C5',TO,HEXKEY
         LARL  ZC_R1,=CL2'C5'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_26_1  DS    0H  END_IF
*             IF EIBAID = DFHPF18 THEN MOVE 'C6' TO HEXKEY.
*ZC    418         IF    EIBAID,=,DFHPF18,THEN
         CLC   EIBAID,DFHPF18
         BRC   15-ZC_EQ,PG_IF_27_1
*ZC    418         MOVE  'C6',TO,HEXKEY
         LARL  ZC_R1,=CL2'C6'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_27_1  DS    0H  END_IF
*             IF EIBAID = DFHPF19 THEN MOVE 'C7' TO HEXKEY.
*ZC    419         IF    EIBAID,=,DFHPF19,THEN
         CLC   EIBAID,DFHPF19
         BRC   15-ZC_EQ,PG_IF_28_1
*ZC    419         MOVE  'C7',TO,HEXKEY
         LARL  ZC_R1,=CL2'C7'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_28_1  DS    0H  END_IF
*             IF EIBAID = DFHPF20 THEN MOVE 'C8' TO HEXKEY.
*ZC    420         IF    EIBAID,=,DFHPF20,THEN
         CLC   EIBAID,DFHPF20
         BRC   15-ZC_EQ,PG_IF_29_1
*ZC    420         MOVE  'C8',TO,HEXKEY
         LARL  ZC_R1,=CL2'C8'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_29_1  DS    0H  END_IF
*             IF EIBAID = DFHPF21 THEN MOVE 'C9' TO HEXKEY.
*ZC    421         IF    EIBAID,=,DFHPF21,THEN
         CLC   EIBAID,DFHPF21
         BRC   15-ZC_EQ,PG_IF_30_1
*ZC    421         MOVE  'C9',TO,HEXKEY
         LARL  ZC_R1,=CL2'C9'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_30_1  DS    0H  END_IF
*             IF EIBAID = DFHPF22 THEN MOVE '4A' TO HEXKEY.
*ZC    422         IF    EIBAID,=,DFHPF22,THEN
         CLC   EIBAID,DFHPF22
         BRC   15-ZC_EQ,PG_IF_31_1
*ZC    422         MOVE  '4A',TO,HEXKEY
         LARL  ZC_R1,=CL2'4A'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_31_1  DS    0H  END_IF
*             IF EIBAID = DFHPF23 THEN MOVE '4B' TO HEXKEY.
*ZC    423         IF    EIBAID,=,DFHPF23,THEN
         CLC   EIBAID,DFHPF23
         BRC   15-ZC_EQ,PG_IF_32_1
*ZC    423         MOVE  '4B',TO,HEXKEY
         LARL  ZC_R1,=CL2'4B'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_32_1  DS    0H  END_IF
*             IF EIBAID = DFHPF24 THEN MOVE '4C' TO HEXKEY.
*ZC    424         IF    EIBAID,=,DFHPF24,THEN
         CLC   EIBAID,DFHPF24
         BRC   15-ZC_EQ,PG_IF_33_1
*ZC    424         MOVE  '4C',TO,HEXKEY
         LARL  ZC_R1,=CL2'4C'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_33_1  DS    0H  END_IF
*             IF EIBAID = DFHPA1  THEN MOVE '6C' TO HEXKEY.
*ZC    425         IF    EIBAID,=,DFHPA1,THEN
         CLC   EIBAID,DFHPA1
         BRC   15-ZC_EQ,PG_IF_34_1
*ZC    425         MOVE  '6C',TO,HEXKEY
         LARL  ZC_R1,=CL2'6C'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_34_1  DS    0H  END_IF
*             IF EIBAID = DFHPA2  THEN MOVE '6E' TO HEXKEY.
*ZC    426         IF    EIBAID,=,DFHPA2,THEN
         CLC   EIBAID,DFHPA2
         BRC   15-ZC_EQ,PG_IF_35_1
*ZC    426         MOVE  '6E',TO,HEXKEY
         LARL  ZC_R1,=CL2'6E'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_35_1  DS    0H  END_IF
*             IF EIBAID = DFHPA3  THEN MOVE '6B' TO HEXKEY.
*ZC    427         IF    EIBAID,=,DFHPA3,THEN
         CLC   EIBAID,DFHPA3
         BRC   15-ZC_EQ,PG_IF_36_1
*      *  MVC   ERRMSGO,BADKEY     MOVE BAD KEY MESSAGE
*ZC    427         MOVE  '6B',TO,HEXKEY
         LARL  ZC_R1,=CL2'6B'
         MVC   HEXKEY,0(ZC_R1)
PG_IF_36_1  DS    0H  END_IF
*             MOVE BADKEY TO ERRMSGO.
*      *  B     REDISP             EXIT
*ZC    429         MOVE  BADKEY,TO,ERRMSGO
         MVC   ERRMSGO,BADKEY
*             GO TO REDISP.
*      * EAU      EQU   *
*ZC    431         GO    TO,REDISP
         J     PG_REDISP
*         EAU.
PG_SHORTRD_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_EAU  DS    0H
*             EXEC CICS SEND CONTROL ERASEAUP CURSOR END-EXEC.
*ZC    434         EXEC  CICS,SEND,CONTROL,ERASEAUP,CURSOR
         LARL  R1,P1812         ADDRESS SOURCE
         LARL  R15,P1812        ADDRESS TARGET
         XC    0(P1812END-P1812,R15),0(R1) XC IT
         LARL  R1,=X'1812'         ADDRESS SOURCE
         LARL  R15,P1812FN        ADDRESS TARGET
         MVC   0(L'P1812FN,R15),0(R1) MVC IT
         LARL  R1,P1812EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1812TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P1812CRS        ADDRESS TARGET
         MVC   0(L'P1812CRS,R15),0(R1) MVC IT
         LARL  R1,P1812OPT         ADDRESS TARGET
         MVI   0(R1),B'01100000'      MVI IT
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(7)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(0)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         LA    R15,8(R1)         SET GETMAIN ADDRESS FOR REQUESTOR
         LARL  R1,P1812OUT         ADDRESS TARGET
         ST    R15,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1812)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LRL   R0,P1812OUT           INDIRECT FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_1872   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_1872   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_1872) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_1872 DS 0H
         J     P1812BYP_1855   EXIT
*
P1812    DS    0H
P1812FN  DS    XL2                FUNCTION CODE
P1812EIB DS    AL4                EIB
P1812TCT DS    AL4                TCTTE
P1812OUT DS    AL4                OUTPUT AREA
P1812CRS DS    AL2                CURSOR POSITION (X'FFFF'=NONE)
P1812OPT DS    X                  OPTION BITS...
*              X'80'                 ERASE
*              X'40'                 ERASEAUP
*              X'20'                 SYMBOLIC CURSOR
*              X'04'                 ALARM
*              X'02'                 FREEKB
*              X'01'                 FRSET
         DS    X
P1812NOH DS    X                  FF=NOHANDLE
         DS    X
P1812RSP DS    AL4                RESP
P1812RS2 DS    AL4                RESP2
P1812END EQU   *                  END MARKER
         DS    0H
*
P1812BYP_1855 DS 0H
*      *  B     RETURN             EXIT
*             GO TO ECRETURN.
*      * GUI6DATA EQU   *
*ZC    436         GO    TO,ECRETURN
         J     PG_ECRETURN
*         GUI6DATA.
*      * ENTER PRESSED
*      * DISPLAY CURSOR LOCATION
*      *  MVC   CURSO,=9C'?'       MARK CURSOR LOCATION UNKNOWN
PG_EAU_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GUI6DATA  DS    0H
*             MOVE '?????????' TO CURSO.
*      *  TM    NAMEF,DFHBMCUR     CURSOR ON NAME ?
*      *  BNO   CURS01             EXIT IF NOT
*      *  MVC   CURSO,=CL9'NAME'   MARK CURSOR LOCATION
*ZC    443         MOVE  '?????????',TO,CURSO
         LARL  ZC_R1,=CL10'?????????'
         MVC   CURSO,0(ZC_R1)
*             IF NAMEF = DFHBMCUR OR
*                NAMEF = DFHBMEF  THEN
*ZC    447         IF    NAMEF,=,DFHBMCUR,OR,NAMEF,=,DFHBMEF,THEN
         CLC   NAMEF,DFHBMCUR
         BRC   ZC_EQ,PG_IF_37_IOP1_T
         CLC   NAMEF,DFHBMEF
         BRC   15-ZC_EQ,PG_IF_37_1
PG_IF_37_IOP1_T  DS    0H  IF_IOP_OR_TRUE
*             MOVE 'NAME     ' TO CURSO
*      *  B     GUI6PROC           EXIT
*ZC    449         MOVE  'NAME     ',TO,CURSO
         LARL  ZC_R1,=CL10'NAME     '
         MVC   CURSO,0(ZC_R1)
*             GO TO GUI6PROC.
*      * CURS01   EQU   *
*      *  TM    ADDRF,DFHBMCUR     CURSOR ON ADDR ?
*      *  BNO   CURS02             EXIT IF NOT
*      *  MVC   CURSO,=CL9'ADDR'   MARK CURSOR LOCATION
*ZC    451         GO    TO,GUI6PROC
         J     PG_GUI6PROC
PG_IF_37_1  DS    0H  END_IF
*             IF ADDRF = DFHBMCUR OR
*                ADDRF = DFHBMEF  THEN
*ZC    456         IF    ADDRF,=,DFHBMCUR,OR,ADDRF,=,DFHBMEF,THEN
         CLC   ADDRF,DFHBMCUR
         BRC   ZC_EQ,PG_IF_38_IOP1_T
         CLC   ADDRF,DFHBMEF
         BRC   15-ZC_EQ,PG_IF_38_1
PG_IF_38_IOP1_T  DS    0H  IF_IOP_OR_TRUE
*             MOVE 'ADDR     ' TO CURSO
*      *  B     GUI6PROC           EXIT
*ZC    458         MOVE  'ADDR     ',TO,CURSO
         LARL  ZC_R1,=CL10'ADDR     '
         MVC   CURSO,0(ZC_R1)
*             GO TO GUI6PROC.
*      * CURS02   EQU   *
*      *  TM    ZIPF,DFHBMCUR      CURSOR ON ZIP ?
*      *  BNO   CURS03             EXIT IF NOT
*      *  MVC   CURSO,=CL9'ZIP'    MARK CURSOR LOCATION
*ZC    460         GO    TO,GUI6PROC
         J     PG_GUI6PROC
PG_IF_38_1  DS    0H  END_IF
*             IF ZIPF  = DFHBMCUR OR
*                ZIPF  = DFHBMEF  THEN
*ZC    465         IF    ZIPF,=,DFHBMCUR,OR,ZIPF,=,DFHBMEF,THEN
         CLC   ZIPF,DFHBMCUR
         BRC   ZC_EQ,PG_IF_39_IOP1_T
         CLC   ZIPF,DFHBMEF
         BRC   15-ZC_EQ,PG_IF_39_1
PG_IF_39_IOP1_T  DS    0H  IF_IOP_OR_TRUE
*             MOVE 'ZIP      ' TO CURSO
*      *  B     GUI6PROC           EXIT
*ZC    467         MOVE  'ZIP      ',TO,CURSO
         LARL  ZC_R1,=CL10'ZIP      '
         MVC   CURSO,0(ZC_R1)
*             GO TO GUI6PROC.
*      * CURS03   EQU   *
*      *  LA    R6,1               COUNT OCCURS
*      *  LA    R7,TESTOCCF        ADDRESS OCCURS
*ZC    469         GO    TO,GUI6PROC
         J     PG_GUI6PROC
PG_IF_39_1  DS    0H  END_IF
*             MOVE 1 TO OCCINDX.
*      * OCCLOOP  EQU   *
*ZC    473         MOVE  1,TO,OCCINDX
         MVHHI OCCINDX,1
*         OCCLOOP.
*      *  TM    0(R7),DFHBMCUR     CURSOR ON THIS OCCURS ?
*      *  BO    CURSOCC            EXIT IF IT IS
PG_GUI6DATA_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_OCCLOOP  DS    0H
*             IF TESTOCCF IN TESTOCCD (OCCINDX) = DFHBMCUR OR
*                TESTOCCF IN TESTOCCD (OCCINDX) = DFHBMEF  THEN
*ZC    478         IF    TESTOCCF,IN,TESTOCCD,'(',OCCINDX,')',=,DFHBMCUX
               R,OR,TESTOCCF,IN,TESTOCCD,'(',OCCINDX,')',=,DFHBMEF,THEN
         LH    ZC_R2,OCCINDX
         BCTR  ZC_R2,0
         MSFI  ZC_R2,8 L'TESTOCCD
         LA    ZC_R2,TESTOCCF(ZC_R2)
         CLC   0(1,ZC_R2),DFHBMCUR
         BRC   ZC_EQ,PG_IF_40_IOP1_T
         LH    ZC_R2,OCCINDX
         BCTR  ZC_R2,0
         MSFI  ZC_R2,8 L'TESTOCCD
         LA    ZC_R2,TESTOCCF(ZC_R2)
         CLC   0(1,ZC_R2),DFHBMEF
         BRC   15-ZC_EQ,PG_IF_40_1
PG_IF_40_IOP1_T  DS    0H  IF_IOP_OR_TRUE
*             GO TO CURSOCC.
*      *  AHI   R6,1               BUMP OCCURS COUNT
*ZC    480         GO    TO,CURSOCC
         J     PG_CURSOCC
PG_IF_40_1  DS    0H  END_IF
*             ADD 1 TO OCCINDX.
*      *  CHI   R6,6               GOT TO END ?
*      *  BE    CURS04             EXIT
*ZC    482         ADD   1,TO,OCCINDX
         LH    ZC_R0,OCCINDX
         AHI   ZC_R0,1
         STH   ZC_R0,OCCINDX
*             IF OCCINDX = 6 THEN GO TO CURS04.
*ZC    485         IF    OCCINDX,=,6,THEN
         LH    0,OCCINDX
         CHI   0,6
         BRC   15-ZC_EQ,PG_IF_41_1
*      *  AHI   R7,3+5             BUMP TO NEXT OCCURS
*      *  B     OCCLOOP            LOOP
*ZC    485         GO    TO,CURS04
         J     PG_CURS04
PG_IF_41_1  DS    0H  END_IF
*             GO TO OCCLOOP.
*      * CURSOCC  EQU   *
*ZC    488         GO    TO,OCCLOOP
         J     PG_OCCLOOP
*         CURSOCC.
*      *  MVC   CURSO,=CL9'OCCURS(.)' MARK CURSOR LOCATION
*      *  STC   R6,CURSO+7         STORE OCCURS NUMBER
*      *  OI    CURSO+7,X'F0'      CONVERT TO CHAR
PG_OCCLOOP_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_CURSOCC  DS    0H
*             MOVE OCCINDX  TO OCCZONE.
*ZC    494         MOVE  OCCINDX,TO,OCCZONE
         LH    0,OCCINDX
         CVD   0,ZCVT_PWORK
         UNPK  0+OCCZONE(2),0+ZCVT_PWORK(8) UNPK UP TO 15 DIGITS
         OI    2-1+OCCZONE,X'F0'  RPI 1065
*             MOVE OCCZONE2 TO OCCNUM.
*ZC    495         MOVE  OCCZONE2,TO,OCCNUM
         MVC   OCCNUM,OCCZONE2
*             MOVE OCCCURSO TO CURSO.
*      *  B     GUI6PROC           EXIT
*ZC    496         MOVE  OCCCURSO,TO,CURSO
         MVC   CURSO,OCCCURSO
*             GO TO GUI6PROC.
*      * CURS04   EQU   *
*ZC    498         GO    TO,GUI6PROC
         J     PG_GUI6PROC
*         CURS04.
*      *  TM    DATEF,DFHBMCUR     CURSOR ON DATE ?
*      *  BNO   CURS05             EXIT IF NOT
*      *  MVC   CURSO,=CL9'GRPNAME' MARK CURSOR LOCATION
PG_CURSOCC_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_CURS04  DS    0H
*             IF DATEF = DFHBMCUR OR
*                DATEF = DFHBMEF  THEN
*ZC    504         IF    DATEF,=,DFHBMCUR,OR,DATEF,=,DFHBMEF,THEN
         CLC   DATEF,DFHBMCUR
         BRC   ZC_EQ,PG_IF_42_IOP1_T
         CLC   DATEF,DFHBMEF
         BRC   15-ZC_EQ,PG_IF_42_1
PG_IF_42_IOP1_T  DS    0H  IF_IOP_OR_TRUE
*             MOVE 'GRPNAME  ' TO CURSO
*      *  B     GUI6PROC           EXIT
*ZC    506         MOVE  'GRPNAME  ',TO,CURSO
         LARL  ZC_R1,=CL10'GRPNAME  '
         MVC   CURSO,0(ZC_R1)
*             GO TO GUI6PROC.
*      * CURS05   EQU   *
*      *  TM    TESTPCOF,DFHBMCUR  CURSOR ON TESTPCO ?
*      *  BNO   GUI6PROC           EXIT IF NOT
*      *  MVC   CURSO,=CL9'TESTPCO' MARK CURSOR LOCATION
*ZC    508         GO    TO,GUI6PROC
         J     PG_GUI6PROC
PG_IF_42_1  DS    0H  END_IF
*             IF TESTPCOF = DFHBMCUR OR
*                TESTPCOF = DFHBMEF  THEN
*ZC    513         IF    TESTPCOF,=,DFHBMCUR,OR,TESTPCOF,=,DFHBMEF,THEN
         CLC   TESTPCOF,DFHBMCUR
         BRC   ZC_EQ,PG_IF_43_IOP1_T
         CLC   TESTPCOF,DFHBMEF
         BRC   15-ZC_EQ,PG_IF_43_1
PG_IF_43_IOP1_T  DS    0H  IF_IOP_OR_TRUE
*             MOVE 'TESTPCO  ' TO CURSO.
*      * GUI6PROC EQU   *
*ZC    515         MOVE  'TESTPCO  ',TO,CURSO
         LARL  ZC_R1,=CL10'TESTPCO  '
         MVC   CURSO,0(ZC_R1)
PG_IF_43_1  DS    0H  END_IF
*         GUI6PROC.
*      *  LH    R6,NAMEL           TOTAL
*      *  AH    R6,ADDRL                 ALL
*      *  AH    R6,ZIPL                      LENGTHS
*      *  BNZ   SOMEDATA           EXIT IF NOT ZERO
PG_CURS04_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GUI6PROC  DS    0H
*             MOVE 0 TO SUMLEN.
*ZC    522         MOVE  0,TO,SUMLEN
         MVHHI SUMLEN,0
*             ADD NAMEL, ADDRL, ZIPL TO SUMLEN.
*ZC    523         ADD   NAMEL,ADDRL,ZIPL,TO,SUMLEN
         LH    ZC_R0,SUMLEN
         AH    ZC_R0,NAMEL
         STH   ZC_R0,SUMLEN
         LH    ZC_R0,SUMLEN
         AH    ZC_R0,ADDRL
         STH   ZC_R0,SUMLEN
         LH    ZC_R0,SUMLEN
         AH    ZC_R0,ZIPL
         STH   ZC_R0,SUMLEN
*             IF SUMLEN NOT = 0 THEN GO TO SOMEDATA.
*ZC    524         IF    SUMLEN,NOT,=,0,THEN
         LH    0,SUMLEN
         CHI   0,0
         BRC   15-ZC_NE,PG_IF_44_1
*      * NO FIELDS MODIFIED
*      *  MVC   ERRMSGO,NOMODS     MOVE NO FIELDS MESSAGE
*ZC    524         GO    TO,SOMEDATA
         J     PG_SOMEDATA
PG_IF_44_1  DS    0H  END_IF
*             MOVE NOMODS TO ERRMSGO.
*      * REDISP   EQU   *
*ZC    527         MOVE  NOMODS,TO,ERRMSGO
         MVC   ERRMSGO,NOMODS
*         REDISP.
*      *  CLI   COMMNAME,X'00'     ANY PREVIOUS NAME ?
*      *  BE    TRYADDR2           EXIT IF NOT
*      *  MVC   NAMEHDO,=C'NAME'   SHOW HEADER
*      *  MVC   NEWNAMEO,COMMNAME  MOVE ANY PREVIOUS NAME
PG_GUI6PROC_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_REDISP  DS    0H
*             IF COMMNAME NOT = LOW-VALUES THEN
*ZC    534         IF    COMMNAME,NOT,=,LOW_VALUES,THEN
         LARL  ZC_R1,=(40)X'00'
         CLC   COMMNAME,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_45_1
*             MOVE 'NAME' TO NAMEHDO
*ZC    535         MOVE  'NAME',TO,NAMEHDO
         LARL  ZC_R1,=CL4'NAME'
         MVC   NAMEHDO,0(ZC_R1)
*             MOVE COMMNAME TO NEWNAMEO.
*      * TRYADDR2 EQU   *
*      *  CLI   COMMADDR,X'00'     ANY PREVIOUS ADDR ?
*      *  BE    TRYZIP2            EXIT IF NOT
*      *  MVC   ADDRHDO,=C'ADDR'   SHOW HEADER
*      *  MVC   NEWADDRO,COMMADDR  MOVE ANY PREVIOUS ADDR
*ZC    536         MOVE  COMMNAME,TO,NEWNAMEO
         MVC   NEWNAMEO,COMMNAME
PG_IF_45_1  DS    0H  END_IF
*             IF COMMADDR NOT = LOW-VALUES THEN
*ZC    542         IF    COMMADDR,NOT,=,LOW_VALUES,THEN
         LARL  ZC_R1,=(40)X'00'
         CLC   COMMADDR,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_46_1
*             MOVE 'ADDR' TO ADDRHDO
*ZC    543         MOVE  'ADDR',TO,ADDRHDO
         LARL  ZC_R1,=CL4'ADDR'
         MVC   ADDRHDO,0(ZC_R1)
*             MOVE COMMADDR TO NEWADDRO.
*      * TRYZIP2  EQU   *
*      *  CLI   COMMZIP,X'00'      ANY PREVIOUS ZIP ?
*      *  BE    TRYPAY             EXIT IF NOT
*      *  MVC   ZIPHDO,=C'ZIP '    SHOW HEADER
*      *  MVC   NEWZIPO,COMMZIP    MOVE ANY PREVIOUS ZIP
*ZC    544         MOVE  COMMADDR,TO,NEWADDRO
         MVC   NEWADDRO,COMMADDR
PG_IF_46_1  DS    0H  END_IF
*             IF COMMZIP NOT = LOW-VALUES THEN
*ZC    550         IF    COMMZIP,NOT,=,LOW_VALUES,THEN
         LARL  ZC_R1,=(5+1)X'00'
         CLC   COMMZIP,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_47_1
*             MOVE 'ZIP ' TO ZIPHDO
*ZC    551         MOVE  'ZIP ',TO,ZIPHDO
         LARL  ZC_R1,=CL4'ZIP '
         MVC   ZIPHDO,0(ZC_R1)
*             MOVE COMMZIP TO NEWZIPO.
*      *  B     TRYPAY             EXIT
*ZC    552         MOVE  COMMZIP,TO,NEWZIPO
         MVC   NEWZIPO,COMMZIP
PG_IF_47_1  DS    0H  END_IF
*             GO TO TRYPAY.
*      * SOMEDATA EQU   *
*ZC    554         GO    TO,TRYPAY
         J     PG_TRYPAY
*         SOMEDATA.
*      *  XC    ERRMSGO,ERRMSGO    CLEAR ERROR MESSAGE
*      *  MVI   NAMEHDO,X'00'      ASSUME NO NAME HEADER
*      *  MVI   NEWNAMEO,X'00'     ASSUME NO NAME
PG_REDISP_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_SOMEDATA  DS    0H
*             MOVE LOW-VALUES TO ERRMSGO.
*ZC    560         MOVE  LOW_VALUES,TO,ERRMSGO
         MVI   ERRMSGO,X'00'
         MVC   ERRMSGO+1(34-1),ERRMSGO
*             MOVE LOW-VALUES TO NAMEHDO.
*ZC    561         MOVE  LOW_VALUES,TO,NAMEHDO
         MVI   NAMEHDO,X'00'
         MVC   NAMEHDO+1(4-1),NAMEHDO
*             MOVE LOW-VALUES TO NEWNAMEO.
*      *  OC    NAMEL,NAMEL        ANY NAME ENTERED ?
*      *  BZ    NONAME             EXIT IF NOT
*ZC    562         MOVE  LOW_VALUES,TO,NEWNAMEO
         MVI   NEWNAMEO,X'00'
         MVC   NEWNAMEO+1(40-1),NEWNAMEO
*             IF NAMEL = 0 THEN GO TO NONAME.
*ZC    565         IF    NAMEL,=,0,THEN
         LH    0,NAMEL
         CHI   0,0
         BRC   15-ZC_EQ,PG_IF_48_1
*      *  MVC   NAMEHDO,=C'NAME'   SHOW HEADER
*      *  MVC   NEWNAMEO,NAMEI     SHOW NAME
*      *  MVC   COMMNAME,NAMEI     SAVE NAME
*ZC    565         GO    TO,NONAME
         J     PG_NONAME
PG_IF_48_1  DS    0H  END_IF
*             MOVE 'NAME' TO NAMEHDO.
*ZC    569         MOVE  'NAME',TO,NAMEHDO
         LARL  ZC_R1,=CL4'NAME'
         MVC   NAMEHDO,0(ZC_R1)
*             MOVE NAMEI  TO NEWNAMEO.
*ZC    570         MOVE  NAMEI,TO,NEWNAMEO
         MVC   NEWNAMEO,NAMEI
*             MOVE NAMEI  TO COMMNAME.
*      *  B     TRYADDR            EXIT
*ZC    571         MOVE  NAMEI,TO,COMMNAME
         MVC   COMMNAME,NAMEI
*             GO TO TRYADDR.
*      * NONAME   EQU   *
*ZC    573         GO    TO,TRYADDR
         J     PG_TRYADDR
*         NONAME.
*      *  CLI   COMMNAME,X'00'     ANY PREVIOUS NAME ?
*      *  BE    TRYADDR            EXIT IF NONE
PG_SOMEDATA_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_NONAME  DS    0H
*             IF COMMNAME NOT = LOW-VALUES THEN
*      *  MVC   NAMEHDO,=C'NAME'   SHOW HEADER
*      *  MVC   NEWNAMEO,COMMNAME  SHOW PREVIOUS NAME
*ZC    578         IF    COMMNAME,NOT,=,LOW_VALUES,THEN
         LARL  ZC_R1,=(40)X'00'
         CLC   COMMNAME,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_49_1
*             MOVE 'NAME'   TO NAMEHDO
*ZC    581         MOVE  'NAME',TO,NAMEHDO
         LARL  ZC_R1,=CL4'NAME'
         MVC   NAMEHDO,0(ZC_R1)
*             MOVE COMMNAME TO NEWNAMEO.
*      * TRYADDR  EQU   *
*ZC    582         MOVE  COMMNAME,TO,NEWNAMEO
         MVC   NEWNAMEO,COMMNAME
PG_IF_49_1  DS    0H  END_IF
*         TRYADDR.
*      *  MVI   ADDRHDO,X'00'      ASSUME NO ADDR HEADER
*      *  MVI   NEWADDRO,X'00'     ASSUME NO ADDR
*      *  OC    ADDRL,ADDRL        ANY ADDR ENTERED ?
*      *  BZ    NOADDR             EXIT IF NOT
PG_NONAME_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_TRYADDR  DS    0H
*             IF ADDRL = 0 THEN GO TO NOADDR.
*ZC    589         IF    ADDRL,=,0,THEN
         LH    0,ADDRL
         CHI   0,0
         BRC   15-ZC_EQ,PG_IF_50_1
*      *  MVC   ADDRHDO,=C'ADDR'   SHOW HEADER
*      *  MVC   NEWADDRO,ADDRI     SHOW ADDR
*      *  MVC   COMMADDR,ADDRI     SAVE ADDR
*ZC    589         GO    TO,NOADDR
         J     PG_NOADDR
PG_IF_50_1  DS    0H  END_IF
*             MOVE 'ADDR' TO ADDRHDO.
*ZC    593         MOVE  'ADDR',TO,ADDRHDO
         LARL  ZC_R1,=CL4'ADDR'
         MVC   ADDRHDO,0(ZC_R1)
*             MOVE ADDRI  TO NEWADDRO.
*ZC    594         MOVE  ADDRI,TO,NEWADDRO
         MVC   NEWADDRO,ADDRI
*             MOVE ADDRI  TO COMMADDR.
*      *  B     TRYZIP             EXIT
*ZC    595         MOVE  ADDRI,TO,COMMADDR
         MVC   COMMADDR,ADDRI
*             GO TO TRYZIP.
*      * NOADDR   EQU   *
*ZC    597         GO    TO,TRYZIP
         J     PG_TRYZIP
*         NOADDR.
*      *  CLI   COMMADDR,X'00'     ANY PREVIOUS ADDR ?
*      *  BE    TRYZIP             EXIT IF NONE
PG_TRYADDR_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_NOADDR  DS    0H
*             IF COMMADDR NOT = LOW-VALUES THEN
*      *  MVC   ADDRHDO,=C'ADDR'   SHOW HEADER
*      *  MVC   NEWADDRO,COMMADDR  SHOW PREVIOUS ADDR
*ZC    602         IF    COMMADDR,NOT,=,LOW_VALUES,THEN
         LARL  ZC_R1,=(40)X'00'
         CLC   COMMADDR,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_51_1
*             MOVE 'ADDR'   TO ADDRHDO
*ZC    605         MOVE  'ADDR',TO,ADDRHDO
         LARL  ZC_R1,=CL4'ADDR'
         MVC   ADDRHDO,0(ZC_R1)
*             MOVE COMMADDR TO NEWADDRO.
*      * TRYZIP   EQU   *
*ZC    606         MOVE  COMMADDR,TO,NEWADDRO
         MVC   NEWADDRO,COMMADDR
PG_IF_51_1  DS    0H  END_IF
*         TRYZIP.
*      *  MVI   ZIPHDO,X'00'       ASSUME NO ZIP HEADER
*      *  MVI   NEWZIPO,X'00'      ASSUME NO ZIP
PG_NOADDR_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_TRYZIP  DS    0H
*             MOVE LOW-VALUES TO ZIPHDO.
*ZC    611         MOVE  LOW_VALUES,TO,ZIPHDO
         MVI   ZIPHDO,X'00'
         MVC   ZIPHDO+1(4-1),ZIPHDO
*             MOVE LOW-VALUES TO NEWZIPO.
*      *  OC    ZIPL,ZIPL          ANY ZIP ENTERED ?
*      *  BZ    NOZIP              EXIT IF NOT
*ZC    612         MOVE  LOW_VALUES,TO,NEWZIPO
         MVI   NEWZIPO,X'00'
         MVC   NEWZIPO+1(5-1),NEWZIPO
*             IF ZIPL = 0 THEN GO TO NOZIP.
*ZC    615         IF    ZIPL,=,0,THEN
         LH    0,ZIPL
         CHI   0,0
         BRC   15-ZC_EQ,PG_IF_52_1
*      *  MVC   ZIPHDO,=C'ZIP '    SHOW HEADER
*      *  MVC   NEWZIPO,ZIPI       SHOW ZIP
*      *  MVC   COMMZIP,ZIPI       SAVE ZIP
*ZC    615         GO    TO,NOZIP
         J     PG_NOZIP
PG_IF_52_1  DS    0H  END_IF
*             MOVE 'ZIP ' TO ZIPHDO.
*ZC    619         MOVE  'ZIP ',TO,ZIPHDO
         LARL  ZC_R1,=CL4'ZIP '
         MVC   ZIPHDO,0(ZC_R1)
*             MOVE ZIPI   TO NEWZIPO.
*ZC    620         MOVE  ZIPI,TO,NEWZIPO
         MVC   NEWZIPO,ZIPI
*             MOVE ZIPI   TO COMMZIP.
*      *  B     TRYPAY             EXIT
*ZC    621         MOVE  ZIPI,TO,COMMZIP
         MVC   COMMZIP,ZIPI
*             GO TO TRYPAY.
*      * NOZIP    EQU   *
*ZC    623         GO    TO,TRYPAY
         J     PG_TRYPAY
*         NOZIP.
*      *  CLI   COMMZIP,X'00'      ANY PREVIOUS ZIP ?
*      *  BE    TRYPAY             EXIT IF NONE
PG_TRYZIP_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_NOZIP  DS    0H
*             IF COMMZIP NOT = LOW-VALUES THEN
*      *  MVC   ZIPHDO,=C'ZIP '    SHOW HEADER
*      *  MVC   NEWZIPO,COMMZIP    SHOW PREVIOUS ZIP
*ZC    628         IF    COMMZIP,NOT,=,LOW_VALUES,THEN
         LARL  ZC_R1,=(5+1)X'00'
         CLC   COMMZIP,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_53_1
*             MOVE 'ZIP '  TO ZIPHDO
*ZC    631         MOVE  'ZIP ',TO,ZIPHDO
         LARL  ZC_R1,=CL4'ZIP '
         MVC   ZIPHDO,0(ZC_R1)
*             MOVE COMMZIP TO NEWZIPO.
*      * TRYPAY   EQU   *
*ZC    632         MOVE  COMMZIP,TO,NEWZIPO
         MVC   NEWZIPO,COMMZIP
PG_IF_53_1  DS    0H  END_IF
*         TRYPAY.
*      *  OC    TESTPCOL,TESTPCOL  ANY TESTPCO ?
*      *  BZ    DOGRP              EXIT IF NONE
PG_NOZIP_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_TRYPAY  DS    0H
*             IF TESTPCOL = 0 THEN GO TO DOGRP.
*ZC    637         IF    TESTPCOL,=,0,THEN
         LH    0,TESTPCOL
         CHI   0,0
         BRC   15-ZC_EQ,PG_IF_54_1
*      *  MVC   PAYMEO,=C'Pay the Author' MOVE MESSAGE
*      *  MVC   PAYME1O,TESTPCOI   MOVE INPUT DATA
*      *  XC    TESTPCOO,TESTPCOO  CLEAR THE INPUT DATA, NOT WANTED
*ZC    637         GO    TO,DOGRP
         J     PG_DOGRP
PG_IF_54_1  DS    0H  END_IF
*             MOVE 'Pay the Author' TO PAYMEO.
*ZC    641         MOVE  'Pay the Author',TO,PAYMEO
         LARL  ZC_R1,=CL14'Pay the Author'
         MVC   PAYMEO,0(ZC_R1)
*             MOVE TESTPCOI         TO PAYME1O.
*ZC    642         MOVE  TESTPCOI,TO,PAYME1O
         PACK  ZCVT_PWORK(8),TESTPCOI(12)  PACK SOURCE
         LARL  ZC_R1,=AL1(C' ',X'20',X'20',X'20',X'20',X'20',C',',X'20'X
               ,X'20',X'20',C',',X'20',X'21',X'20')
         MVC   ZCVT_WORKAREA(14),0(ZC_R1) MOVE MASK FOR ED
         LA    ZC_R1,ZCVT_WORKAREA+1+1
         EDMK  ZCVT_WORKAREA(14),8-6+ZCVT_PWORK
         BCTR  ZC_R1,0
         MVI   0(ZC_R1),C'$'
         MVC   PAYME1O,ZCVT_WORKAREA+2
*             MOVE LOW-VALUES       TO TESTPCOO.
*      * DOGRP    EQU   *
*ZC    643         MOVE  LOW_VALUES,TO,TESTPCOO
         MVI   TESTPCOO,X'00'
         MVC   TESTPCOO+1(12-1),TESTPCOO
*         DOGRP.
*      * PROCESS GRPNAME
*      *  MVC   SHOWMDYO,=C'MO=.. DAY=.. YR=..' MOVE MESSAGE
*      *  MVC   SHOWMDYO+3(2),MOO  MOVE MONTH
*      *  MVC   SHOWMDYO+10(2),DAYO MOVE DAY
*      *  MVC   SHOWMDYO+16(2),YRO MOVE YEAR
PG_TRYPAY_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_DOGRP  DS    0H
*             MOVE MOO TO SHOWMO.
*ZC    651         MOVE  MOO,TO,SHOWMO
         MVC   SHOWMO,MOO
*             MOVE DAYO TO SHOWDAY.
*ZC    652         MOVE  DAYO,TO,SHOWDAY
         MVC   SHOWDAY,DAYO
*             MOVE YRO TO SHOWYR.
*ZC    653         MOVE  YRO,TO,SHOWYR
         MVC   SHOWYR,YRO
*             MOVE SHOWMSG TO SHOWMDYO.
*      * PROCESS OCCURS
*      *  SP    OCCSUM,OCCSUM      CLEAR OCCURS SUM
*ZC    654         MOVE  SHOWMSG,TO,SHOWMDYO
         MVC   SHOWMDYO,SHOWMSG
*             MOVE 0 TO OCCSUM.
*      *  LA    R6,5               R6=NO. OF OCCURS
*ZC    657         MOVE  0,TO,OCCSUM
         LARL  ZC_R1,=PL4'0'
         MVC   OCCSUM,0(ZC_R1)
*             MOVE 1 TO LOOPCTRL.
*      *  LA    R7,TESTOCCO        OCCURS DATA
*      * OCCSUMLP EQU   *
*ZC    659         MOVE  1,TO,LOOPCTRL
         MVHHI LOOPCTRL,1
*         OCCSUMLP.
*      *  CLI   0(R7),X'00'        ANY DATA HERE ?
*      *  BE    OCCSUMIN           EXIT IF NONE
PG_DOGRP_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_OCCSUMLP  DS    0H
*             IF TESTOCCI IN TESTOCCD (LOOPCTRL) NOT = LOW-VALUES THEN
*      *  PACK  WORK,0(5,R7)       PACK DATA
*      *  AP    OCCSUM,WORK        SUM IT
*ZC    665         IF    TESTOCCI,IN,TESTOCCD,'(',LOOPCTRL,')',NOT,=,LOX
               W_VALUES,THEN
         LH    ZC_R2,LOOPCTRL
         BCTR  ZC_R2,0
         MSFI  ZC_R2,8 L'TESTOCCD
         LA    ZC_R2,TESTOCCI(ZC_R2)
         LARL  ZC_R1,=(5+1)X'00'
         CLC   0(5,ZC_R2),0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_55_1
*             ADD TESTOCCI IN TESTOCCD (LOOPCTRL) TO OCCSUM.
*      * OCCSUMIN EQU   *
*      *  AHI   R7,3+5             BUMP TO NEXT OCCURS
*      *  BCT   R6,OCCSUMLP        LOOP
*ZC    668         ADD   TESTOCCI,IN,TESTOCCD,'(',LOOPCTRL,')',TO,OCCSUX
                              M
         LH    ZC_R1,LOOPCTRL
         BCTR  ZC_R1,0
         MSFI  ZC_R1,8 L'TESTOCCD
         LA    ZC_R1,TESTOCCI(ZC_R1)
         PACK  ZCVT_PWORK1(3),0(5,ZC_R1)  PACK SOURCE
         AP    OCCSUM,ZCVT_PWORK1(3)
PG_IF_55_1  DS    0H  END_IF
*             ADD 1 TO LOOPCTRL.
*ZC    672         ADD   1,TO,LOOPCTRL
         LH    ZC_R0,LOOPCTRL
         AHI   ZC_R0,1
         STH   ZC_R0,LOOPCTRL
*             IF LOOPCTRL NOT = 6 THEN GO TO OCCSUMLP.
*ZC    673         IF    LOOPCTRL,NOT,=,6,THEN
         LH    0,LOOPCTRL
         CHI   0,6
         BRC   15-ZC_NE,PG_IF_56_1
*      *  UNPK  OCCSUMO(7),OCCSUM  UNPACK RESULT
*ZC    673         GO    TO,OCCSUMLP
         J     PG_OCCSUMLP
PG_IF_56_1  DS    0H  END_IF
*             MOVE OCCSUM TO OCCSUMO.
*      *  B     SENDIT             EXIT
*ZC    675         MOVE  OCCSUM,TO,OCCSUMO
         LARL  ZC_R1,=AL1(C' ',X'20',X'20',X'20',C',',X'20',X'20',X'20'X
               ,C',',X'20',X'21',X'20')
         MVC   ZCVT_WORKAREA(12),0(ZC_R1) MOVE MASK FOR ED
         ZAP   ZCVT_PWORK1(5),OCCSUM
         LA    ZC_R1,ZCVT_WORKAREA+1+1
         EDMK  ZCVT_WORKAREA(12),ZCVT_PWORK1
         MVC   OCCSUMO,ZCVT_WORKAREA+2
*             GO TO SENDIT.
*      * GUI6HELP EQU   *
*ZC    677         GO    TO,SENDIT
         J     PG_SENDIT
*         GUI6HELP.
*      * GUI6 HELP MAP
PG_OCCSUMLP_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GUI6HELP  DS    0H
*             EXEC CICS SEND MAP('GUI6H') MAPSET('MAP01C') MAPONLY ERASX
                              E
*ZC    681         EXEC  CICS,SEND,MAP('GUI6H'),MAPSET('MAP01C'),MAPONLX
               Y,ERASE
         LARL  R1,P1804         ADDRESS SOURCE
         LARL  R15,P1804        ADDRESS TARGET
         XC    0(P1804END-P1804,R15),0(R1) XC IT
         LARL  R1,=X'1804'         ADDRESS SOURCE
         LARL  R15,P1804FN        ADDRESS TARGET
         MVC   0(L'P1804FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'GUI6H'         ADDRESS SOURCE
         LARL  R15,P1804MAP        ADDRESS TARGET
         MVC   0(L'P1804MAP,R15),0(R1) MVC IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R1,=AL4(P1804MLN)         ADDRESS SOURCE
         LARL  R15,P0E06LEN        ADDRESS TARGET
         MVC   0(L'P0E06LEN,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_2547   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_2547   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_2547) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_2547 EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         LARL  R1,P1804MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P1804CRS        ADDRESS TARGET
         MVC   0(L'P1804CRS,R15),0(R1) MVC IT
         LARL  R1,P1804OPT         ADDRESS TARGET
         MVI   0(R1),B'10010000'      MVI IT
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(2000)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(0)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         LA    R15,8(R1)         SET GETMAIN ADDRESS FOR REQUESTOR
         LR    R0,R15             COPY OUTPUT AREA ADDRESS
         LARL  R1,P1804OUT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P1804EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1804TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1804)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1804NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1804BYP_2542   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1804BYP_2542   EXIT IF NONE
* MAPFAIL, INVMPSZ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1804BYP_2542) ENTRYPOINT FOR IGNORE CONDITION
*
P1804BYP_2542 DS 0H
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LRL   R0,P1804OUT           INDIRECT FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_2571   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_2571   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_2571) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_2571 DS 0H
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_2579   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_2579   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_2579) ENTRYPOINT FOR IGNORE CONDITION
P0E0ABYP_2579 DS 0H
*                       END-EXEC.
*      *  MVI   COMMIND,C'3'       SET GUI6 REENTRY POINT
*             MOVE '3' TO COMMIND.
*      * RETURN   EQU   *
*ZC    684         MOVE  '3',TO,COMMIND
         MVI   COMMIND,C'3'
*         ECRETURN.
PG_GUI6HELP_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ECRETURN  DS    0H
*             EXEC CICS RETURN TRANSID('BMC1') COMMAREA(MYCOMM)
*ZC    687         EXEC  CICS,RETURN,TRANSID('BMC1'),COMMAREA(MYCOMM),LX
               ENGTH(86)
         LARL  R1,P0E08         ADDRESS SOURCE
         LARL  R15,P0E08        ADDRESS TARGET
         XC    0(P0E08END-P0E08,R15),0(R1) XC IT
         LARL  R1,=X'0E08'         ADDRESS SOURCE
         LARL  R15,P0E08FN        ADDRESS TARGET
         MVC   0(L'P0E08FN,R15),0(R1) MVC IT
         LARL  R1,=CL4'BMC1'         ADDRESS SOURCE
         LARL  R15,P0E08TRN        ADDRESS TARGET
         MVC   0(L'P0E08TRN,R15),0(R1) MVC IT
         LA    R0,MYCOMM       R0=COMMAREA ADDRESS FROM LABEL
         LARL  R1,P0E08COM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,86         R0=COMMAREA LENGTH
         LARL  R1,P0E08CLN         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
* SPECIAL LINKAGE
         LARL  R1,P0E08           R1=PARAMETER LIST
         LARL  R14,P0E08RTN_2596 RETURN ADDRESS
         LRL   R15,=V(LCL0E08)    R15=EXTERNAL RETURN MODULE ADDRESS
         BR    R15                GO TO IT
*
P0E08RTN_2596 EQU *
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E08BYP_2596   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(0)             IGNORE HERE IS NOT PERMITTED
*
P0E08    DS    0H
P0E08FN  DS    XL2                FUNCTION CODE
P0E08TRN DS    CL4                TRANSID
P0E08COM DS    AL4                COMMAREA ADDRESS
P0E08CLN DS    XL2                COMMAREA LENGTH
P0E08IMM DS    X                  FF=IMMEDIATE
         DS    X
P0E08CNR DS    X                  FF=CLEANER
         DS    X
P0E08RSP DS    AL4                RESP
P0E08RS2 DS    AL4                RESP2
P0E08END EQU   *                  END MARKER
         DS    0H
*
P0E08BYP_2596 DS 0H
*                       LENGTH(86) END-EXEC.
*      * GUI6HRNT EQU   *
*         GUI6HRNT.
*      * RETURN FROM HELP SCREEN
*      *  MVI   COMMIND,C'2'       SET GUI6 REENTRY POINT
PG_ECRETURN_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GUI6HRNT  DS    0H
*             MOVE '2' TO COMMIND.
*      *  CLI   EIBAID,DFHCLEAR    CLEAR ?
*      *  BE    GUI6               YES, EXIT TO REFRESH DISPLAY
*ZC    693         MOVE  '2',TO,COMMIND
         MVI   COMMIND,C'2'
*             IF EIBAID = DFHCLEAR THEN GO TO GUI6.
*ZC    696         IF    EIBAID,=,DFHCLEAR,THEN
         CLC   EIBAID,DFHCLEAR
         BRC   15-ZC_EQ,PG_IF_57_1
*      *  CLI   EIBAID,DFHPF3      PF3 ?
*      *  BNE   REDISP             EXIT IF NOT
*ZC    696         GO    TO,GUI6
         J     PG_GUI6
PG_IF_57_1  DS    0H  END_IF
*             IF EIBAID NOT = DFHPF3 THEN GO TO REDISP.
*ZC    699         IF    EIBAID,NOT,=,DFHPF3,THEN
         CLC   EIBAID,DFHPF3
         BRC   15-ZC_NE,PG_IF_58_1
*      * ALLDONE  EQU   *
*ZC    699         GO    TO,REDISP
         J     PG_REDISP
PG_IF_58_1  DS    0H  END_IF
*         ALLDONE.
*      *  MVC   ERRMSGO,ENDMSG     MOVE ENDING MESSAGE
PG_GUI6HRNT_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ALLDONE  DS    0H
*             MOVE ENDMSG TO ERRMSGO.
*ZC    703         MOVE  ENDMSG,TO,ERRMSGO
         MVC   ERRMSGO,ENDMSG
*             EXEC CICS SEND MAP('GUI6') MAPSET('MAP01C') END-EXEC.
*ZC    704         EXEC  CICS,SEND,MAP('GUI6'),MAPSET('MAP01C')
         LARL  R1,P1804         ADDRESS SOURCE
         LARL  R15,P1804        ADDRESS TARGET
         XC    0(P1804END-P1804,R15),0(R1) XC IT
         LARL  R1,=X'1804'         ADDRESS SOURCE
         LARL  R15,P1804FN        ADDRESS TARGET
         MVC   0(L'P1804FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'GUI6'         ADDRESS SOURCE
         LARL  R15,P1804MAP        ADDRESS TARGET
         MVC   0(L'P1804MAP,R15),0(R1) MVC IT
         LA    R0,GUI6O        R0=DEFAULT MAP STRUCTURE ADDRESS
         LARL  R1,P1804DSC         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'GUI6O      R0=DEFAULT MAP STRUC LENGTH (COBOL)
         LARL  R1,P1804DSL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R1,=AL4(P1804MLN)         ADDRESS SOURCE
         LARL  R15,P0E06LEN        ADDRESS TARGET
         MVC   0(L'P0E06LEN,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_2654   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_2654   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_2654) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_2654 EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         LARL  R1,P1804MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P1804CRS        ADDRESS TARGET
         MVC   0(L'P1804CRS,R15),0(R1) MVC IT
         LARL  R1,P1804OPT         ADDRESS TARGET
         MVI   0(R1),B'00000000'      MVI IT
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(2000)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(0)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         LA    R15,8(R1)         SET GETMAIN ADDRESS FOR REQUESTOR
         LR    R0,R15             COPY OUTPUT AREA ADDRESS
         LARL  R1,P1804OUT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P1804EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1804TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1804)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1804NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1804BYP_2647   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1804BYP_2647   EXIT IF NONE
* MAPFAIL, INVMPSZ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1804BYP_2647) ENTRYPOINT FOR IGNORE CONDITION
*
P1804BYP_2647 DS 0H
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LRL   R0,P1804OUT           INDIRECT FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_2678   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_2678   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_2678) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_2678 DS 0H
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_2686   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_2686   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_2686) ENTRYPOINT FOR IGNORE CONDITION
P0E0ABYP_2686 DS 0H
*             EXEC CICS RETURN END-EXEC.
*ZC    705         EXEC  CICS,RETURN
         LARL  R1,P0E08         ADDRESS SOURCE
         LARL  R15,P0E08        ADDRESS TARGET
         XC    0(P0E08END-P0E08,R15),0(R1) XC IT
         LARL  R1,=X'0E08'         ADDRESS SOURCE
         LARL  R15,P0E08FN        ADDRESS TARGET
         MVC   0(L'P0E08FN,R15),0(R1) MVC IT
* SPECIAL LINKAGE
         LARL  R1,P0E08           R1=PARAMETER LIST
         LARL  R14,P0E08RTN_2696 RETURN ADDRESS
         LRL   R15,=V(LCL0E08)    R15=EXTERNAL RETURN MODULE ADDRESS
         BR    R15                GO TO IT
*
P0E08RTN_2696 EQU *
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E08BYP_2696   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(0)             IGNORE HERE IS NOT PERMITTED
*
P0E08BYP_2696 DS 0H
*      * SENDIT   EQU   *
*         SENDIT.
*      * TEST MAP AS LABEL WITH FROM AND LENGTH
PG_ALLDONE_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_SENDIT  DS    0H
*             EXEC CICS SEND MAP(MYGUI6) MAPSET('MAP01C') FROM(GUI6O)
*ZC    709         EXEC  CICS,SEND,MAP(MYGUI6),MAPSET('MAP01C'),FROM(GUX
               I6O),LENGTH(LENGTH,OF,GUI6O),ERASE
         LARL  R1,P1804         ADDRESS SOURCE
         LARL  R15,P1804        ADDRESS TARGET
         XC    0(P1804END-P1804,R15),0(R1) XC IT
         LARL  R1,=X'1804'         ADDRESS SOURCE
         LARL  R15,P1804FN        ADDRESS TARGET
         MVC   0(L'P1804FN,R15),0(R1) MVC IT
         LARL  R15,P1804MAP       ADDRESS TARGET
         MVC   0(7,R15),MYGUI6      MOVE MAPNAME FROM LABEL
         LA    R0,GUI6O           R0=MAP STRUCTURE ADDRESS
         LARL  R1,P1804DSC         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'GUI6O       SET LENGTH
         LARL  R1,P1804DSL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R1,=AL4(P1804MLN)         ADDRESS SOURCE
         LARL  R15,P0E06LEN        ADDRESS TARGET
         MVC   0(L'P0E06LEN,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_2709   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_2709   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_2709) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_2709 EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         LARL  R1,P1804MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P1804CRS        ADDRESS TARGET
         MVC   0(L'P1804CRS,R15),0(R1) MVC IT
         LARL  R1,P1804OPT         ADDRESS TARGET
         MVI   0(R1),B'10000000'      MVI IT
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(2000)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(0)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         LA    R15,8(R1)         SET GETMAIN ADDRESS FOR REQUESTOR
         LR    R0,R15             COPY OUTPUT AREA ADDRESS
         LARL  R1,P1804OUT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P1804EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1804TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1804)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1804NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1804BYP_2703   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1804BYP_2703   EXIT IF NONE
* MAPFAIL, INVMPSZ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1804BYP_2703) ENTRYPOINT FOR IGNORE CONDITION
*
P1804BYP_2703 DS 0H
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LRL   R0,P1804OUT           INDIRECT FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_2733   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_2733   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_2733) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_2733 DS 0H
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_2741   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_2741   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_2741) ENTRYPOINT FOR IGNORE CONDITION
P0E0ABYP_2741 DS 0H
*                       LENGTH(LENGTH OF GUI6O) ERASE END-EXEC.
*      *  B     RETURN             EXIT
*             GO TO ECRETURN.
*      * MAPFAILS EQU   *
*ZC    712         GO    TO,ECRETURN
         J     PG_ECRETURN
*         MAPFAILS.
*      *  CLC   EIBRESP2,=F'2'     SHORT READ ?
*      *  BE    SHORTRD            EXIT IF IT IS
PG_SENDIT_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_MAPFAILS  DS    0H
*             MOVE EIBRESP2 TO WORK1.
*ZC    717         MOVE  EIBRESP2,TO,WORK1
         MVC   WORK1,EIBRESP2
*             IF RESP2 = X'02' THEN GO TO SHORTRD.
*ZC    718         IF    RESP2,=,X'02',THEN
         CLI   RESP2,X'02'
         BRC   15-ZC_EQ,PG_IF_59_1
*      *  MVC   FAILMSG+8(1),EIBRESP2+3 SET RESP2
*      *  OI    FAILMSG+8,X'F0'    CONVERT TO CHAR
*ZC    718         GO    TO,SHORTRD
         J     PG_SHORTRD
PG_IF_59_1  DS    0H  END_IF
*             IF RESP2 = X'01' THEN MOVE '1' TO FAILIND.
*ZC    721         IF    RESP2,=,X'01',THEN
         CLI   RESP2,X'01'
         BRC   15-ZC_EQ,PG_IF_60_1
*ZC    721         MOVE  '1',TO,FAILIND
         MVI   FAILIND,C'1'
PG_IF_60_1  DS    0H  END_IF
*             IF RESP2 = X'03' THEN MOVE '3' TO FAILIND.
*ZC    722         IF    RESP2,=,X'03',THEN
         CLI   RESP2,X'03'
         BRC   15-ZC_EQ,PG_IF_61_1
*ZC    722         MOVE  '3',TO,FAILIND
         MVI   FAILIND,C'3'
PG_IF_61_1  DS    0H  END_IF
*             IF RESP2 = X'04' THEN MOVE '4' TO FAILIND.
*ZC    723         IF    RESP2,=,X'04',THEN
         CLI   RESP2,X'04'
         BRC   15-ZC_EQ,PG_IF_62_1
*ZC    723         MOVE  '4',TO,FAILIND
         MVI   FAILIND,C'4'
PG_IF_62_1  DS    0H  END_IF
*             IF RESP2 = X'05' THEN MOVE '5' TO FAILIND.
*ZC    724         IF    RESP2,=,X'05',THEN
         CLI   RESP2,X'05'
         BRC   15-ZC_EQ,PG_IF_63_1
*ZC    724         MOVE  '5',TO,FAILIND
         MVI   FAILIND,C'5'
PG_IF_63_1  DS    0H  END_IF
*             IF RESP2 = X'06' THEN MOVE '6' TO FAILIND.
*ZC    725         IF    RESP2,=,X'06',THEN
         CLI   RESP2,X'06'
         BRC   15-ZC_EQ,PG_IF_64_1
*ZC    725         MOVE  '6',TO,FAILIND
         MVI   FAILIND,C'6'
PG_IF_64_1  DS    0H  END_IF
*             IF RESP2 = X'07' THEN MOVE '7' TO FAILIND.
*ZC    726         IF    RESP2,=,X'07',THEN
         CLI   RESP2,X'07'
         BRC   15-ZC_EQ,PG_IF_65_1
*ZC    726         MOVE  '7',TO,FAILIND
         MVI   FAILIND,C'7'
PG_IF_65_1  DS    0H  END_IF
*             IF RESP2 = X'08' THEN MOVE '8' TO FAILIND.
*ZC    727         IF    RESP2,=,X'08',THEN
         CLI   RESP2,X'08'
         BRC   15-ZC_EQ,PG_IF_66_1
*      *  MVC   ERRMSGO,FAILMSG    MOVE FAILURE MESSAGE
*ZC    727         MOVE  '8',TO,FAILIND
         MVI   FAILIND,C'8'
PG_IF_66_1  DS    0H  END_IF
*             MOVE FAILMSG TO ERRMSGO.
*      *  B     SENDIT             EXIT
*ZC    729         MOVE  FAILMSG,TO,ERRMSGO
         MVC   ERRMSGO,FAILMSG
*             GO TO SENDIT.
*ZC    731         GO    TO,SENDIT
         J     PG_SENDIT
*         ABEND.
PG_MAPFAILS_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ABEND  DS    0H
*             EXEC CICS ABEND ABCODE('BMC1') END-EXEC.
*ZC    733         EXEC  CICS,ABEND,ABCODE('BMC1')
         LARL  R1,P0E0C         ADDRESS SOURCE
         LARL  R15,P0E0C        ADDRESS TARGET
         XC    0(P0E0CEND-P0E0C,R15),0(R1) XC IT
         LARL  R1,=X'0E0C'         ADDRESS SOURCE
         LARL  R15,P0E0CFN        ADDRESS TARGET
         MVC   0(L'P0E0CFN,R15),0(R1) MVC IT
         LARL  R1,=CL4'BMC1'         ADDRESS SOURCE
         LARL  R15,CICS_ABEND_2885_ABCODE        ADDRESS TARGET
         MVC   0(L'CICS_ABEND_2885_ABCODE,R15),0(R1) MVC IT
         LARL  R1,P0E0CEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0CTCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0C)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         DC    X'0000'            ABEND POINT
         DC    X'FE'              FE=TAKE DUMP  FF=NODUMP
         DC    C'ABEND'           MARKER
CICS_ABEND_2885_ABCODE DC CL4' ' ABEND CODE IF ANY
*
P0E0C    DS    0H
P0E0CFN  DS    XL2                FUNCTION CODE
P0E0CEIB DS    AL4                EIB
P0E0CTCT DS    AL4                TCTTE
P0E0CCAN DS    X                  FF=CANCEL
         DS    X
P0E0CNOH DS    X                  FF=NOHANDLE
         DS    X
P0E0CRSP DS    AL4                RESP
P0E0CRS2 DS    AL4                RESP2
P0E0CEND EQU   *                  END MARKER
         DS    0H
*
PG_ABEND_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
SN_END_PROCEDURE  DS 0H SECTION
*        PROCEDURE END
         LH    ZC_R1,RETURN_CODE
         L     ZC_R15,ZCVT_GOBACK
         BASR  ZC_R14,ZC_R15
         LTORG
* ZCOBOL WORKING STORAGE SECTION DATA ITEMS
* LVL DATA NAME                      ADDR     LEN      DUP TYP PIC     X
                  VALUE
* 01  GUI4I                          00000070 00000018 1   X           X
                  
* 02  FILLER                         00000070 0000000C 1   X   X(12)   X
                  
* 02  INPUTL                         0000007C 00000002 1   H   9(4)    X
                  
* 02  INPUTF                         0000007E 00000001 1   X   X       X
                  
* 02  FILLER                         0000007E 00000001 1   X           X
                  
* 03  INPUTA                         0000007E 00000001 1   X   X       X
                  
* 02  INPUTI                         0000007F 00000003 1   X   X(3)    X
                  
* 02  FILLER                         0000007F 00000003 1   X           X
                  
* 03  INPUTO                         0000007F 00000003 1   X   X(3)    X
                  
* 02  REPLYL                         00000082 00000002 1   H   9(4)    X
                  
* 02  REPLYF                         00000084 00000001 1   X   X       X
                  
* 02  FILLER                         00000084 00000001 1   X           X
                  
* 03  REPLYA                         00000084 00000001 1   X   X       X
                  
* 02  REPLYI                         00000085 00000003 1   X   X(3)    X
                  
* 02  FILLER                         00000085 00000003 1   X           X
                  
* 03  REPLYO                         00000085 00000003 1   X   X(3)    X
                  
* 01  GUI4O                          00000070 00000018 1   X           X
                  
* 02  FILLER                         00000070 00000018 1   X   X(24)   X
                  
* 01  GUI6I                          00000088 00000192 1   X           X
                  
* 02  FILLER                         00000088 0000000C 1   X   X(12)   X
                  
* 02  NAMEL                          00000094 00000002 1   H   9(4)    X
                  
* 02  NAMEF                          00000096 00000001 1   X   X       X
                  
* 02  FILLER                         00000096 00000001 1   X           X
                  
* 03  NAMEA                          00000096 00000001 1   X   X       X
                  
* 02  NAMEI                          00000097 00000028 1   X   X(40)   X
                  
* 02  FILLER                         00000097 00000028 1   X           X
                  
* 03  NAMEO                          00000097 00000028 1   X   X(40)   X
                  
* 02  ADDRL                          000000BF 00000002 1   H   9(4)    X
                  
* 02  ADDRF                          000000C1 00000001 1   X   X       X
                  
* 02  FILLER                         000000C1 00000001 1   X           X
                  
* 03  ADDRA                          000000C1 00000001 1   X   X       X
                  
* 02  ADDRI                          000000C2 00000028 1   X   X(40)   X
                  
* 02  FILLER                         000000C2 00000028 1   X           X
                  
* 03  ADDRO                          000000C2 00000028 1   X   X(40)   X
                  
* 02  ZIPL                           000000EA 00000002 1   H   9(4)    X
                  
* 02  ZIPF                           000000EC 00000001 1   X   X       X
                  
* 02  FILLER                         000000EC 00000001 1   X           X
                  
* 03  ZIPA                           000000EC 00000001 1   X   X       X
                  
* 02  ZIPI                           000000ED 00000005 1   X   X(5)    X
                  
* 02  FILLER                         000000ED 00000005 1   X           X
                  
* 03  ZIPO                           000000ED 00000005 1   X   X(5)    X
                  
* 02  NAMEHDL                        000000F2 00000002 1   H   9(4)    X
                  
* 02  NAMEHDF                        000000F4 00000001 1   X   X       X
                  
* 02  FILLER                         000000F4 00000001 1   X           X
                  
* 03  NAMEHDA                        000000F4 00000001 1   X   X       X
                  
* 02  NAMEHDI                        000000F5 00000004 1   X   X(4)    X
                  
* 02  FILLER                         000000F5 00000004 1   X           X
                  
* 03  NAMEHDO                        000000F5 00000004 1   X   X(4)    X
                  
* 02  NEWNAMEL                       000000F9 00000002 1   H   9(4)    X
                  
* 02  NEWNAMEF                       000000FB 00000001 1   X   X       X
                  
* 02  FILLER                         000000FB 00000001 1   X           X
                  
* 03  NEWNAMEA                       000000FB 00000001 1   X   X       X
                  
* 02  NEWNAMEI                       000000FC 00000028 1   X   X(40)   X
                  
* 02  FILLER                         000000FC 00000028 1   X           X
                  
* 03  NEWNAMEO                       000000FC 00000028 1   X   X(40)   X
                  
* 02  ADDRHDL                        00000124 00000002 1   H   9(4)    X
                  
* 02  ADDRHDF                        00000126 00000001 1   X   X       X
                  
* 02  FILLER                         00000126 00000001 1   X           X
                  
* 03  ADDRHDA                        00000126 00000001 1   X   X       X
                  
* 02  ADDRHDI                        00000127 00000004 1   X   X(4)    X
                  
* 02  FILLER                         00000127 00000004 1   X           X
                  
* 03  ADDRHDO                        00000127 00000004 1   X   X(4)    X
                  
* 02  NEWADDRL                       0000012B 00000002 1   H   9(4)    X
                  
* 02  NEWADDRF                       0000012D 00000001 1   X   X       X
                  
* 02  FILLER                         0000012D 00000001 1   X           X
                  
* 03  NEWADDRA                       0000012D 00000001 1   X   X       X
                  
* 02  NEWADDRI                       0000012E 00000028 1   X   X(40)   X
                  
* 02  FILLER                         0000012E 00000028 1   X           X
                  
* 03  NEWADDRO                       0000012E 00000028 1   X   X(40)   X
                  
* 02  ZIPHDL                         00000156 00000002 1   H   9(4)    X
                  
* 02  ZIPHDF                         00000158 00000001 1   X   X       X
                  
* 02  FILLER                         00000158 00000001 1   X           X
                  
* 03  ZIPHDA                         00000158 00000001 1   X   X       X
                  
* 02  ZIPHDI                         00000159 00000004 1   X   X(4)    X
                  
* 02  FILLER                         00000159 00000004 1   X           X
                  
* 03  ZIPHDO                         00000159 00000004 1   X   X(4)    X
                  
* 02  NEWZIPL                        0000015D 00000002 1   H   9(4)    X
                  
* 02  NEWZIPF                        0000015F 00000001 1   X   X       X
                  
* 02  FILLER                         0000015F 00000001 1   X           X
                  
* 03  NEWZIPA                        0000015F 00000001 1   X   X       X
                  
* 02  NEWZIPI                        00000160 00000005 1   X   X(5)    X
                  
* 02  FILLER                         00000160 00000005 1   X           X
                  
* 03  NEWZIPO                        00000160 00000005 1   X   X(5)    X
                  
* 02  ERRMSGL                        00000165 00000002 1   H   9(4)    X
                  
* 02  ERRMSGF                        00000167 00000001 1   X   X       X
                  
* 02  FILLER                         00000167 00000001 1   X           X
                  
* 03  ERRMSGA                        00000167 00000001 1   X   X       X
                  
* 02  ERRMSGI                        00000168 00000022 1   X   X(34)   X
                  
* 02  FILLER                         00000168 00000022 1   X           X
                  
* 03  ERRMSGO                        00000168 00000022 1   X   X(34)   X
                  
* 02  TESTOCCD                       0000018A 00000008 5   X           X
                  
* 03  TESTOCCL                       0000018A 00000002 1   H   9(4)    X
                  
* 03  TESTOCCF                       0000018C 00000001 1   X   X       X
                  
* 03  FILLER                         0000018C 00000001 1   X           X
                  
* 04  TESTOCCA                       0000018C 00000001 1   X   X       X
                  
* 03  TESTOCCI                       0000018D 00000005 1   Z   9(5)    X
                  
* 03  FILLER                         0000018D 00000005 1   X           X
                  
* 04  TESTOCCO                       0000018D 00000005 1   X   X(5)    X
                  
* 02  OCCSUML                        000001B2 00000002 1   H   9(4)    X
                  
* 02  OCCSUMF                        000001B4 00000001 1   X   X       X
                  
* 02  FILLER                         000001B4 00000001 1   X           X
                  
* 03  OCCSUMA                        000001B4 00000001 1   X   X       X
                  
* 02  OCCSUMI                        000001B5 0000000A 1   X   X(10)   X
                  
* 02  FILLER                         000001B5 0000000A 1   X           X
                  
* 03  OCCSUMO                        000001B5 0000000A 1   X   ZZ,ZZZ,ZX
               Z9 
* 02  DATEL                          000001BF 00000002 1   H   9(4)    X
                  
* 02  DATEF                          000001C1 00000001 1   X   X       X
                  
* 02  FILLER                         000001C1 00000001 1   X           X
                  
* 03  DATEA                          000001C1 00000001 1   X   X       X
                  
* 02  DATEI                          000001C2 00000008 1   X           X
                  
* 02  DATEO                          000001C2 00000008 1   X           X
                  
* 03  MOI                            000001C2 00000002 1   X   X(2)    X
                  
* 03  FILLER                         000001C2 00000002 1   X           X
                  
* 04  MOO                            000001C2 00000002 1   X   X(2)    X
                  
* 03  SEP1I                          000001C4 00000001 1   X   X       X
                  
* 03  FILLER                         000001C4 00000001 1   X           X
                  
* 04  SEP1O                          000001C4 00000001 1   X   X       X
                  
* 03  DAYI                           000001C5 00000002 1   X   X(2)    X
                  
* 03  FILLER                         000001C5 00000002 1   X           X
                  
* 04  DAYO                           000001C5 00000002 1   X   X(2)    X
                  
* 03  SEP2I                          000001C7 00000001 1   X   X       X
                  
* 03  FILLER                         000001C7 00000001 1   X           X
                  
* 04  SEP2O                          000001C7 00000001 1   X   X       X
                  
* 03  YRI                            000001C8 00000002 1   X   X(2)    X
                  
* 03  FILLER                         000001C8 00000002 1   X           X
                  
* 04  YRO                            000001C8 00000002 1   X   X(2)    X
                  
* 02  SHOWMDYL                       000001CA 00000002 1   H   9(4)    X
                  
* 02  SHOWMDYF                       000001CC 00000001 1   X   X       X
                  
* 02  FILLER                         000001CC 00000001 1   X           X
                  
* 03  SHOWMDYA                       000001CC 00000001 1   X   X       X
                  
* 02  SHOWMDYI                       000001CD 00000012 1   X   X(18)   X
                  
* 02  FILLER                         000001CD 00000012 1   X           X
                  
* 03  SHOWMDYO                       000001CD 00000012 1   X   X(18)   X
                  
* 02  TESTPCOL                       000001DF 00000002 1   H   9(4)    X
                  
* 02  TESTPCOF                       000001E1 00000001 1   X   X       X
                  
* 02  FILLER                         000001E1 00000001 1   X           X
                  
* 03  TESTPCOA                       000001E1 00000001 1   X   X       X
                  
* 02  TESTPCOI                       000001E2 0000000C 1   Z   9(12)   X
                  
* 02  FILLER                         000001E2 0000000C 1   X           X
                  
* 03  TESTPCOO                       000001E2 0000000C 1   X   X(12)   X
                  
* 02  PAYMEL                         000001EE 00000002 1   H   9(4)    X
                  
* 02  PAYMEF                         000001F0 00000001 1   X   X       X
                  
* 02  FILLER                         000001F0 00000001 1   X           X
                  
* 03  PAYMEA                         000001F0 00000001 1   X   X       X
                  
* 02  PAYMEI                         000001F1 0000000E 1   X   X(14)   X
                  
* 02  FILLER                         000001F1 0000000E 1   X           X
                  
* 03  PAYMEO                         000001F1 0000000E 1   X   X(14)   X
                  
* 02  PAYME1L                        000001FF 00000002 1   H   9(4)    X
                  
* 02  PAYME1F                        00000201 00000001 1   X   X       X
                  
* 02  FILLER                         00000201 00000001 1   X           X
                  
* 03  PAYME1A                        00000201 00000001 1   X   X       X
                  
* 02  PAYME1I                        00000202 0000000C 1   X   X(12)   X
                  
* 02  FILLER                         00000202 0000000C 1   X           X
                  
* 03  PAYME1O                        00000202 0000000C 1   X   $$$$,$$$X
               ,$ 
* 02  CURSL                          0000020E 00000002 1   H   9(4)    X
                  
* 02  CURSF                          00000210 00000001 1   X   X       X
                  
* 02  FILLER                         00000210 00000001 1   X           X
                  
* 03  CURSA                          00000210 00000001 1   X   X       X
                  
* 02  CURSI                          00000211 00000009 1   X   X(9)    X
                  
* 02  FILLER                         00000211 00000009 1   X           X
                  
* 03  CURSO                          00000211 00000009 1   X   X(9)    X
                  
* 01  GUI6O                          00000088 00000192 1   X           X
                  
* 02  FILLER                         00000088 00000192 1   X   X(402)  X
                  
* 01  GUI6HI                         0000021A 0000000C 1   X           X
                  
* 02  FILLER                         0000021A 0000000C 1   X   X(12)   X
                  
* 01  DFHAID                         00000226 0000001E 1   X           X
                  
* 02  DFHNULL                        00000226 00000001 1   X   X       X
                  X''00''
* 02  DFHENTER                       00000227 00000001 1   X   X       X
                  X''7D''
* 02  DFHPF1                         00000228 00000001 1   X   X       X
                  X''F1''
* 02  DFHPF2                         00000229 00000001 1   X   X       X
                  X''F2''
* 02  DFHPF3                         0000022A 00000001 1   X   X       X
                  X''F3''
* 02  DFHPF4                         0000022B 00000001 1   X   X       X
                  X''F4''
* 02  DFHPF5                         0000022C 00000001 1   X   X       X
                  X''F5''
* 02  DFHPF6                         0000022D 00000001 1   X   X       X
                  X''F6''
* 02  DFHPF7                         0000022E 00000001 1   X   X       X
                  X''F7''
* 02  DFHPF8                         0000022F 00000001 1   X   X       X
                  X''F8''
* 02  DFHPF9                         00000230 00000001 1   X   X       X
                  X''F9''
* 02  DFHPF10                        00000231 00000001 1   X   X       X
                  X''7A''
* 02  DFHPF11                        00000232 00000001 1   X   X       X
                  X''7B''
* 02  DFHPF12                        00000233 00000001 1   X   X       X
                  X''7C''
* 02  DFHPF13                        00000234 00000001 1   X   X       X
                  X''C1''
* 02  DFHPF14                        00000235 00000001 1   X   X       X
                  X''C2''
* 02  DFHPF15                        00000236 00000001 1   X   X       X
                  X''C3''
* 02  DFHPF16                        00000237 00000001 1   X   X       X
                  X''C4''
* 02  DFHPF17                        00000238 00000001 1   X   X       X
                  X''C5''
* 02  DFHPF18                        00000239 00000001 1   X   X       X
                  X''C6''
* 02  DFHPF19                        0000023A 00000001 1   X   X       X
                  X''C7''
* 02  DFHPF20                        0000023B 00000001 1   X   X       X
                  X''C8''
* 02  DFHPF21                        0000023C 00000001 1   X   X       X
                  X''C9''
* 02  DFHPF22                        0000023D 00000001 1   X   X       X
                  X''4A''
* 02  DFHPF23                        0000023E 00000001 1   X   X       X
                  X''4B''
* 02  DFHPF24                        0000023F 00000001 1   X   X       X
                  X''4C''
* 02  DFHPA1                         00000240 00000001 1   X   X       X
                  X''6C''
* 02  DFHPA2                         00000241 00000001 1   X   X       X
                  X''6E''
* 02  DFHPA3                         00000242 00000001 1   X   X       X
                  X''6B''
* 02  DFHCLEAR                       00000243 00000001 1   X   X       X
                  X''6D''
* 01  DFHBMSCA                       00000244 00000015 1   X           X
                  
* 02  DFHBMUNP                       00000244 00000001 1   X   X       X
                  X''40''
* 02  DFHBMFSE                       00000245 00000001 1   X   X       X
                  X''C1''
* 02  DFHBMBRY                       00000246 00000001 1   X   X       X
                  X''C8''
* 02  DFHUNIMD                       00000247 00000001 1   X   X       X
                  X''C9''
* 02  DFHBMDAR                       00000248 00000001 1   X   X       X
                  X''4C''
* 02  DFHUNNOD                       00000249 00000001 1   X   X       X
                  X''4D''
* 02  DFHBMUNN                       0000024A 00000001 1   X   X       X
                  X''50''
* 02  DFHUNNUM                       0000024B 00000001 1   X   X       X
                  X''D1''
* 02  DFHUNNUB                       0000024C 00000001 1   X   X       X
                  X''D8''
* 02  DFHUNINT                       0000024D 00000001 1   X   X       X
                  X''D9''
* 02  DFHUNNON                       0000024E 00000001 1   X   X       X
                  X''5D''
* 02  DFHBMPRO                       0000024F 00000001 1   X   X       X
                  X''60''
* 02  DFHBMPRF                       00000250 00000001 1   X   X       X
                  X''61''
* 02  DFHPROTI                       00000251 00000001 1   X   X       X
                  X''E8''
* 02  DFHPROTN                       00000252 00000001 1   X   X       X
                  X''6C''
* 02  DFHBMASK                       00000253 00000001 1   X   X       X
                  X''F0''
* 02  DFHBMASF                       00000254 00000001 1   X   X       X
                  X''F1''
* 02  DFHBMASB                       00000255 00000001 1   X   X       X
                  X''F8''
* 02  DFHBMEOF                       00000256 00000001 1   X   X       X
                  X''80''
* 02  DFHBMCUR                       00000257 00000001 1   X   X       X
                  X''02''
* 02  DFHBMEF                        00000258 00000001 1   X   X       X
                  X''82''
* 01  MYCOMM                         00000259 00000056 1   X           X
                  
* 02  COMMIND                        00000259 00000001 1   X   X       X
                  
* 02  COMMNAME                       0000025A 00000028 1   X   X(40)   X
                  
* 02  COMMADDR                       00000282 00000028 1   X   X(40)   X
                  
* 02  COMMZIP                        000002AA 00000005 1   X   X(5)    X
                  
* 01  MYGUI6                         000002AF 00000007 1   X   X(7)    X
                  ''GUI6   ''
* 01  OCCSUM                         000002B6 00000004 1   P   9(7)    X
                  
* 01  OCCINDX                        000002BA 00000002 1   H   9(2)    X
                  
* 01  LOOPCTRL                       000002BC 00000002 1   H   9(2)    X
                  
* 01  SUMLEN                         000002BE 00000002 1   H   9(2)    X
                  
* 01  OCCZONE                        000002C0 00000002 1   Z   99      X
                  
* 01  FILLER                         000002C0 00000002 1   X           X
                  
* 02  FILLER                         000002C0 00000001 1   X   X       X
                  
* 02  OCCZONE2                       000002C1 00000001 1   X   X       X
                  
* 01  OCCCURSO                       000002C2 00000009 1   X           X
                  
* 02  ZC_FILLER_V1                   000002C2 00000007 1   X   X(7)    X
                  ''OCCURS(''
* 02  OCCNUM                         000002C9 00000001 1   X   X       X
                  
* 02  ZC_FILLER_V2                   000002CA 00000001 1   X   X       X
                  '')''
* 01  SHOWMSG                        000002CB 00000012 1   X           X
                  
* 02  ZC_FILLER_V3                   000002CB 00000003 1   X   X(3)    X
                  ''MO=''
* 02  SHOWMO                         000002CE 00000002 1   X   XX      X
                  
* 02  ZC_FILLER_V4                   000002D0 00000005 1   X   X(5)    X
                  '' DAY=''
* 02  SHOWDAY                        000002D5 00000002 1   X   XX      X
                  
* 02  ZC_FILLER_V5                   000002D7 00000004 1   X   X(4)    X
                  '' YR=''
* 02  SHOWYR                         000002DB 00000002 1   X   XX      X
                  
* 01  BADKEY                         000002DD 00000022 1   X           X
                  
* 02  ZC_FILLER_V6                   000002DD 0000001A 1   X   X(26)   X
                  ''NO ACTION FOR AID KEY HEX ''
* 02  HEXKEY                         000002F7 00000002 1   X   X(2)    X
                  
* 02  ZC_FILLER_V7                   000002F9 00000006 1   X   X(6)    X
                  SPACES
* 01  NOMODS                         000002FF 00000022 1   X   X(34)   X
                  ''NO FIELDS CHANGED                 ''
* 01  FAILMSG                        00000321 00000022 1   X           X
                  
* 02  ZC_FILLER_V8                   00000321 00000008 1   X   X(8)    X
                  ''MAPFAIL/''
* 02  FAILIND                        00000329 00000001 1   X   X       X
                  
* 02  ZC_FILLER_V9                   0000032A 00000019 1   X   X(25)   X
                  '' HAS OCCURRED            ''
* 01  ENDMSG                         00000343 00000022 1   X   X(34)   X
                  ''TRANSACTION COMPLETE - PRESS CLEAR''
* 01  WORK1                          00000365 00000004 1   X           X
                  
* 02  FILLER                         00000365 00000003 1   X   X(3)    X
                  
* 02  RESP2                          00000368 00000001 1   X   X       X
                  
* 01  DEBUG_ITEM                     00000369 00000058 1   X           X
                  
* 02  DEBUG_LINE                     00000369 00000006 1   X   X(6)    X
                  
* 02  ZC_FILLER_V10                  0000036F 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_NAME                     00000370 0000001E 1   X   X(30)   X
                  
* 02  ZC_FILLER_V11                  0000038E 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_SUB_1                    0000038F 00000004 1   Z   9999    X
                  
* 02  ZC_FILLER_V12                  00000393 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_SUB_2                    00000394 00000004 1   Z   9999    X
                  
* 02  ZC_FILLER_V13                  00000398 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_SUB_3                    00000399 00000004 1   Z   9999    X
                  
* 02  ZC_FILLER_V14                  0000039D 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_CONTENTS                 0000039E 00000023 1   X   X(35)   X
                  
* 01  RETURN_CODE                    000003C1 00000002 1   H   9(4)    X
                  0
* 01  ZC_DFHCOMMAREA_PTR             000003C3 00000004 1   A           X
                  
* 01  ZC_DFHEIBLK_PTR                000003C7 00000004 1   A           X
                  
* 01  ZC_ZC_LK_END_PTR               000003CB 00000004 1   A           X
                  
DFHEISTG DSECT
ZC_WS_LOC_1 EQU *-ZC_WS CHECK GUI4I WS LOC
GUI4I       DS  0CL24
ZC_WS_LOC_2 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  CL12
ZC_WS_LOC_3 EQU *-ZC_WS CHECK INPUTL WS LOC
INPUTL      DS  HL2
ZC_WS_LOC_4 EQU *-ZC_WS CHECK INPUTF WS LOC
INPUTF      DS  CL1
         ORG   INPUTF  START REDEFINE
ZC_WS_LOC_5 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_6 EQU *-ZC_WS CHECK INPUTA WS LOC
INPUTA      DS  CL1
ZC_WS_LOC_7 EQU *-ZC_WS CHECK INPUTI WS LOC
INPUTI      DS  CL3
         ORG   INPUTI  START REDEFINE
ZC_WS_LOC_8 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL3
ZC_WS_LOC_9 EQU *-ZC_WS CHECK INPUTO WS LOC
INPUTO      DS  CL3
ZC_WS_LOC_10 EQU *-ZC_WS CHECK REPLYL WS LOC
REPLYL      DS  HL2
ZC_WS_LOC_11 EQU *-ZC_WS CHECK REPLYF WS LOC
REPLYF      DS  CL1
         ORG   REPLYF  START REDEFINE
ZC_WS_LOC_12 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_13 EQU *-ZC_WS CHECK REPLYA WS LOC
REPLYA      DS  CL1
ZC_WS_LOC_14 EQU *-ZC_WS CHECK REPLYI WS LOC
REPLYI      DS  CL3
         ORG   REPLYI  START REDEFINE
ZC_WS_LOC_15 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL3
ZC_WS_LOC_16 EQU *-ZC_WS CHECK REPLYO WS LOC
REPLYO      DS  CL3
         ORG   GUI4I  START REDEFINE
ZC_WS_LOC_17 EQU *-ZC_WS CHECK GUI4O WS LOC
GUI4O       DS  0CL24
ZC_WS_LOC_18 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  CL24
ZC_WS_LOC_19 EQU *-ZC_WS CHECK GUI6I WS LOC
GUI6I       DS  0CL402
ZC_WS_LOC_20 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  CL12
ZC_WS_LOC_21 EQU *-ZC_WS CHECK NAMEL WS LOC
NAMEL       DS  HL2
ZC_WS_LOC_22 EQU *-ZC_WS CHECK NAMEF WS LOC
NAMEF       DS  CL1
         ORG   NAMEF  START REDEFINE
ZC_WS_LOC_23 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_24 EQU *-ZC_WS CHECK NAMEA WS LOC
NAMEA       DS  CL1
ZC_WS_LOC_25 EQU *-ZC_WS CHECK NAMEI WS LOC
NAMEI       DS  CL40
         ORG   NAMEI  START REDEFINE
ZC_WS_LOC_26 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL40
ZC_WS_LOC_27 EQU *-ZC_WS CHECK NAMEO WS LOC
NAMEO       DS  CL40
ZC_WS_LOC_28 EQU *-ZC_WS CHECK ADDRL WS LOC
ADDRL       DS  HL2
ZC_WS_LOC_29 EQU *-ZC_WS CHECK ADDRF WS LOC
ADDRF       DS  CL1
         ORG   ADDRF  START REDEFINE
ZC_WS_LOC_30 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_31 EQU *-ZC_WS CHECK ADDRA WS LOC
ADDRA       DS  CL1
ZC_WS_LOC_32 EQU *-ZC_WS CHECK ADDRI WS LOC
ADDRI       DS  CL40
         ORG   ADDRI  START REDEFINE
ZC_WS_LOC_33 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL40
ZC_WS_LOC_34 EQU *-ZC_WS CHECK ADDRO WS LOC
ADDRO       DS  CL40
ZC_WS_LOC_35 EQU *-ZC_WS CHECK ZIPL WS LOC
ZIPL        DS  HL2
ZC_WS_LOC_36 EQU *-ZC_WS CHECK ZIPF WS LOC
ZIPF        DS  CL1
         ORG   ZIPF  START REDEFINE
ZC_WS_LOC_37 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_38 EQU *-ZC_WS CHECK ZIPA WS LOC
ZIPA        DS  CL1
ZC_WS_LOC_39 EQU *-ZC_WS CHECK ZIPI WS LOC
ZIPI        DS  CL5
         ORG   ZIPI  START REDEFINE
ZC_WS_LOC_40 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL5
ZC_WS_LOC_41 EQU *-ZC_WS CHECK ZIPO WS LOC
ZIPO        DS  CL5
ZC_WS_LOC_42 EQU *-ZC_WS CHECK NAMEHDL WS LOC
NAMEHDL     DS  HL2
ZC_WS_LOC_43 EQU *-ZC_WS CHECK NAMEHDF WS LOC
NAMEHDF     DS  CL1
         ORG   NAMEHDF  START REDEFINE
ZC_WS_LOC_44 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_45 EQU *-ZC_WS CHECK NAMEHDA WS LOC
NAMEHDA     DS  CL1
ZC_WS_LOC_46 EQU *-ZC_WS CHECK NAMEHDI WS LOC
NAMEHDI     DS  CL4
         ORG   NAMEHDI  START REDEFINE
ZC_WS_LOC_47 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL4
ZC_WS_LOC_48 EQU *-ZC_WS CHECK NAMEHDO WS LOC
NAMEHDO     DS  CL4
ZC_WS_LOC_49 EQU *-ZC_WS CHECK NEWNAMEL WS LOC
NEWNAMEL    DS  HL2
ZC_WS_LOC_50 EQU *-ZC_WS CHECK NEWNAMEF WS LOC
NEWNAMEF    DS  CL1
         ORG   NEWNAMEF  START REDEFINE
ZC_WS_LOC_51 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_52 EQU *-ZC_WS CHECK NEWNAMEA WS LOC
NEWNAMEA    DS  CL1
ZC_WS_LOC_53 EQU *-ZC_WS CHECK NEWNAMEI WS LOC
NEWNAMEI    DS  CL40
         ORG   NEWNAMEI  START REDEFINE
ZC_WS_LOC_54 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL40
ZC_WS_LOC_55 EQU *-ZC_WS CHECK NEWNAMEO WS LOC
NEWNAMEO    DS  CL40
ZC_WS_LOC_56 EQU *-ZC_WS CHECK ADDRHDL WS LOC
ADDRHDL     DS  HL2
ZC_WS_LOC_57 EQU *-ZC_WS CHECK ADDRHDF WS LOC
ADDRHDF     DS  CL1
         ORG   ADDRHDF  START REDEFINE
ZC_WS_LOC_58 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_59 EQU *-ZC_WS CHECK ADDRHDA WS LOC
ADDRHDA     DS  CL1
ZC_WS_LOC_60 EQU *-ZC_WS CHECK ADDRHDI WS LOC
ADDRHDI     DS  CL4
         ORG   ADDRHDI  START REDEFINE
ZC_WS_LOC_61 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL4
ZC_WS_LOC_62 EQU *-ZC_WS CHECK ADDRHDO WS LOC
ADDRHDO     DS  CL4
ZC_WS_LOC_63 EQU *-ZC_WS CHECK NEWADDRL WS LOC
NEWADDRL    DS  HL2
ZC_WS_LOC_64 EQU *-ZC_WS CHECK NEWADDRF WS LOC
NEWADDRF    DS  CL1
         ORG   NEWADDRF  START REDEFINE
ZC_WS_LOC_65 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_66 EQU *-ZC_WS CHECK NEWADDRA WS LOC
NEWADDRA    DS  CL1
ZC_WS_LOC_67 EQU *-ZC_WS CHECK NEWADDRI WS LOC
NEWADDRI    DS  CL40
         ORG   NEWADDRI  START REDEFINE
ZC_WS_LOC_68 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL40
ZC_WS_LOC_69 EQU *-ZC_WS CHECK NEWADDRO WS LOC
NEWADDRO    DS  CL40
ZC_WS_LOC_70 EQU *-ZC_WS CHECK ZIPHDL WS LOC
ZIPHDL      DS  HL2
ZC_WS_LOC_71 EQU *-ZC_WS CHECK ZIPHDF WS LOC
ZIPHDF      DS  CL1
         ORG   ZIPHDF  START REDEFINE
ZC_WS_LOC_72 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_73 EQU *-ZC_WS CHECK ZIPHDA WS LOC
ZIPHDA      DS  CL1
ZC_WS_LOC_74 EQU *-ZC_WS CHECK ZIPHDI WS LOC
ZIPHDI      DS  CL4
         ORG   ZIPHDI  START REDEFINE
ZC_WS_LOC_75 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL4
ZC_WS_LOC_76 EQU *-ZC_WS CHECK ZIPHDO WS LOC
ZIPHDO      DS  CL4
ZC_WS_LOC_77 EQU *-ZC_WS CHECK NEWZIPL WS LOC
NEWZIPL     DS  HL2
ZC_WS_LOC_78 EQU *-ZC_WS CHECK NEWZIPF WS LOC
NEWZIPF     DS  CL1
         ORG   NEWZIPF  START REDEFINE
ZC_WS_LOC_79 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_80 EQU *-ZC_WS CHECK NEWZIPA WS LOC
NEWZIPA     DS  CL1
ZC_WS_LOC_81 EQU *-ZC_WS CHECK NEWZIPI WS LOC
NEWZIPI     DS  CL5
         ORG   NEWZIPI  START REDEFINE
ZC_WS_LOC_82 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL5
ZC_WS_LOC_83 EQU *-ZC_WS CHECK NEWZIPO WS LOC
NEWZIPO     DS  CL5
ZC_WS_LOC_84 EQU *-ZC_WS CHECK ERRMSGL WS LOC
ERRMSGL     DS  HL2
ZC_WS_LOC_85 EQU *-ZC_WS CHECK ERRMSGF WS LOC
ERRMSGF     DS  CL1
         ORG   ERRMSGF  START REDEFINE
ZC_WS_LOC_86 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_87 EQU *-ZC_WS CHECK ERRMSGA WS LOC
ERRMSGA     DS  CL1
ZC_WS_LOC_88 EQU *-ZC_WS CHECK ERRMSGI WS LOC
ERRMSGI     DS  CL34
         ORG   ERRMSGI  START REDEFINE
ZC_WS_LOC_89 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL34
ZC_WS_LOC_90 EQU *-ZC_WS CHECK ERRMSGO WS LOC
ERRMSGO     DS  CL34
ZC_WS_LOC_91 EQU *-ZC_WS CHECK TESTOCCD WS LOC
TESTOCCD    DS  0CL8
ZC_WS_LOC_92 EQU *-ZC_WS CHECK TESTOCCL WS LOC
TESTOCCL    DS  HL2
ZC_WS_LOC_93 EQU *-ZC_WS CHECK TESTOCCF WS LOC
TESTOCCF    DS  CL1
         ORG   TESTOCCF  START REDEFINE
ZC_WS_LOC_94 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_95 EQU *-ZC_WS CHECK TESTOCCA WS LOC
TESTOCCA    DS  CL1
ZC_WS_LOC_96 EQU *-ZC_WS CHECK TESTOCCI WS LOC
TESTOCCI    DS  ZL5
         ORG   TESTOCCI  START REDEFINE
ZC_WS_LOC_97 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL5
ZC_WS_LOC_98 EQU *-ZC_WS CHECK TESTOCCO WS LOC
TESTOCCO    DS  CL5
         DS    XL32 PAD FOR MULT OCCURS
ZC_WS_LOC_99 EQU *-ZC_WS CHECK OCCSUML WS LOC
OCCSUML     DS  HL2
ZC_WS_LOC_100 EQU *-ZC_WS CHECK OCCSUMF WS LOC
OCCSUMF     DS  CL1
         ORG   OCCSUMF  START REDEFINE
ZC_WS_LOC_101 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_102 EQU *-ZC_WS CHECK OCCSUMA WS LOC
OCCSUMA     DS  CL1
ZC_WS_LOC_103 EQU *-ZC_WS CHECK OCCSUMI WS LOC
OCCSUMI     DS  CL10
         ORG   OCCSUMI  START REDEFINE
ZC_WS_LOC_104 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL10
ZC_WS_LOC_105 EQU *-ZC_WS CHECK OCCSUMO WS LOC
OCCSUMO     DS  CL10
ZC_WS_LOC_106 EQU *-ZC_WS CHECK DATEL WS LOC
DATEL       DS  HL2
ZC_WS_LOC_107 EQU *-ZC_WS CHECK DATEF WS LOC
DATEF       DS  CL1
         ORG   DATEF  START REDEFINE
ZC_WS_LOC_108 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_109 EQU *-ZC_WS CHECK DATEA WS LOC
DATEA       DS  CL1
ZC_WS_LOC_110 EQU *-ZC_WS CHECK DATEI WS LOC
DATEI       DS  0CL8
         ORG   DATEI  START REDEFINE
ZC_WS_LOC_111 EQU *-ZC_WS CHECK DATEO WS LOC
DATEO       DS  0CL8
ZC_WS_LOC_112 EQU *-ZC_WS CHECK MOI WS LOC
MOI         DS  CL2
         ORG   MOI  START REDEFINE
ZC_WS_LOC_113 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL2
ZC_WS_LOC_114 EQU *-ZC_WS CHECK MOO WS LOC
MOO         DS  CL2
ZC_WS_LOC_115 EQU *-ZC_WS CHECK SEP1I WS LOC
SEP1I       DS  CL1
         ORG   SEP1I  START REDEFINE
ZC_WS_LOC_116 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_117 EQU *-ZC_WS CHECK SEP1O WS LOC
SEP1O       DS  CL1
ZC_WS_LOC_118 EQU *-ZC_WS CHECK DAYI WS LOC
DAYI        DS  CL2
         ORG   DAYI  START REDEFINE
ZC_WS_LOC_119 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL2
ZC_WS_LOC_120 EQU *-ZC_WS CHECK DAYO WS LOC
DAYO        DS  CL2
ZC_WS_LOC_121 EQU *-ZC_WS CHECK SEP2I WS LOC
SEP2I       DS  CL1
         ORG   SEP2I  START REDEFINE
ZC_WS_LOC_122 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_123 EQU *-ZC_WS CHECK SEP2O WS LOC
SEP2O       DS  CL1
ZC_WS_LOC_124 EQU *-ZC_WS CHECK YRI WS LOC
YRI         DS  CL2
         ORG   YRI  START REDEFINE
ZC_WS_LOC_125 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL2
ZC_WS_LOC_126 EQU *-ZC_WS CHECK YRO WS LOC
YRO         DS  CL2
ZC_WS_LOC_127 EQU *-ZC_WS CHECK SHOWMDYL WS LOC
SHOWMDYL    DS  HL2
ZC_WS_LOC_128 EQU *-ZC_WS CHECK SHOWMDYF WS LOC
SHOWMDYF    DS  CL1
         ORG   SHOWMDYF  START REDEFINE
ZC_WS_LOC_129 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_130 EQU *-ZC_WS CHECK SHOWMDYA WS LOC
SHOWMDYA    DS  CL1
ZC_WS_LOC_131 EQU *-ZC_WS CHECK SHOWMDYI WS LOC
SHOWMDYI    DS  CL18
         ORG   SHOWMDYI  START REDEFINE
ZC_WS_LOC_132 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL18
ZC_WS_LOC_133 EQU *-ZC_WS CHECK SHOWMDYO WS LOC
SHOWMDYO    DS  CL18
ZC_WS_LOC_134 EQU *-ZC_WS CHECK TESTPCOL WS LOC
TESTPCOL    DS  HL2
ZC_WS_LOC_135 EQU *-ZC_WS CHECK TESTPCOF WS LOC
TESTPCOF    DS  CL1
         ORG   TESTPCOF  START REDEFINE
ZC_WS_LOC_136 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_137 EQU *-ZC_WS CHECK TESTPCOA WS LOC
TESTPCOA    DS  CL1
ZC_WS_LOC_138 EQU *-ZC_WS CHECK TESTPCOI WS LOC
TESTPCOI    DS  ZL12
         ORG   TESTPCOI  START REDEFINE
ZC_WS_LOC_139 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL12
ZC_WS_LOC_140 EQU *-ZC_WS CHECK TESTPCOO WS LOC
TESTPCOO    DS  CL12
ZC_WS_LOC_141 EQU *-ZC_WS CHECK PAYMEL WS LOC
PAYMEL      DS  HL2
ZC_WS_LOC_142 EQU *-ZC_WS CHECK PAYMEF WS LOC
PAYMEF      DS  CL1
         ORG   PAYMEF  START REDEFINE
ZC_WS_LOC_143 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_144 EQU *-ZC_WS CHECK PAYMEA WS LOC
PAYMEA      DS  CL1
ZC_WS_LOC_145 EQU *-ZC_WS CHECK PAYMEI WS LOC
PAYMEI      DS  CL14
         ORG   PAYMEI  START REDEFINE
ZC_WS_LOC_146 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL14
ZC_WS_LOC_147 EQU *-ZC_WS CHECK PAYMEO WS LOC
PAYMEO      DS  CL14
ZC_WS_LOC_148 EQU *-ZC_WS CHECK PAYME1L WS LOC
PAYME1L     DS  HL2
ZC_WS_LOC_149 EQU *-ZC_WS CHECK PAYME1F WS LOC
PAYME1F     DS  CL1
         ORG   PAYME1F  START REDEFINE
ZC_WS_LOC_150 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_151 EQU *-ZC_WS CHECK PAYME1A WS LOC
PAYME1A     DS  CL1
ZC_WS_LOC_152 EQU *-ZC_WS CHECK PAYME1I WS LOC
PAYME1I     DS  CL12
         ORG   PAYME1I  START REDEFINE
ZC_WS_LOC_153 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL12
ZC_WS_LOC_154 EQU *-ZC_WS CHECK PAYME1O WS LOC
PAYME1O     DS  CL12
ZC_WS_LOC_155 EQU *-ZC_WS CHECK CURSL WS LOC
CURSL       DS  HL2
ZC_WS_LOC_156 EQU *-ZC_WS CHECK CURSF WS LOC
CURSF       DS  CL1
         ORG   CURSF  START REDEFINE
ZC_WS_LOC_157 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL1
ZC_WS_LOC_158 EQU *-ZC_WS CHECK CURSA WS LOC
CURSA       DS  CL1
ZC_WS_LOC_159 EQU *-ZC_WS CHECK CURSI WS LOC
CURSI       DS  CL9
         ORG   CURSI  START REDEFINE
ZC_WS_LOC_160 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL9
ZC_WS_LOC_161 EQU *-ZC_WS CHECK CURSO WS LOC
CURSO       DS  CL9
         ORG   GUI6I  START REDEFINE
ZC_WS_LOC_162 EQU *-ZC_WS CHECK GUI6O WS LOC
GUI6O       DS  0CL402
ZC_WS_LOC_163 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  CL402
ZC_WS_LOC_164 EQU *-ZC_WS CHECK GUI6HI WS LOC
GUI6HI      DS  0CL12
ZC_WS_LOC_165 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  CL12
ZC_WS_LOC_166 EQU *-ZC_WS CHECK DFHAID WS LOC
DFHAID      DS  0CL30
ZC_WS_LOC_167 EQU *-ZC_WS CHECK DFHNULL WS LOC
DFHNULL     DC XL1'00'
ZC_WS_LOC_168 EQU *-ZC_WS CHECK DFHENTER WS LOC
DFHENTER    DC XL1'7D'
ZC_WS_LOC_169 EQU *-ZC_WS CHECK DFHPF1 WS LOC
DFHPF1      DC XL1'F1'
ZC_WS_LOC_170 EQU *-ZC_WS CHECK DFHPF2 WS LOC
DFHPF2      DC XL1'F2'
ZC_WS_LOC_171 EQU *-ZC_WS CHECK DFHPF3 WS LOC
DFHPF3      DC XL1'F3'
ZC_WS_LOC_172 EQU *-ZC_WS CHECK DFHPF4 WS LOC
DFHPF4      DC XL1'F4'
ZC_WS_LOC_173 EQU *-ZC_WS CHECK DFHPF5 WS LOC
DFHPF5      DC XL1'F5'
ZC_WS_LOC_174 EQU *-ZC_WS CHECK DFHPF6 WS LOC
DFHPF6      DC XL1'F6'
ZC_WS_LOC_175 EQU *-ZC_WS CHECK DFHPF7 WS LOC
DFHPF7      DC XL1'F7'
ZC_WS_LOC_176 EQU *-ZC_WS CHECK DFHPF8 WS LOC
DFHPF8      DC XL1'F8'
ZC_WS_LOC_177 EQU *-ZC_WS CHECK DFHPF9 WS LOC
DFHPF9      DC XL1'F9'
ZC_WS_LOC_178 EQU *-ZC_WS CHECK DFHPF10 WS LOC
DFHPF10     DC XL1'7A'
ZC_WS_LOC_179 EQU *-ZC_WS CHECK DFHPF11 WS LOC
DFHPF11     DC XL1'7B'
ZC_WS_LOC_180 EQU *-ZC_WS CHECK DFHPF12 WS LOC
DFHPF12     DC XL1'7C'
ZC_WS_LOC_181 EQU *-ZC_WS CHECK DFHPF13 WS LOC
DFHPF13     DC XL1'C1'
ZC_WS_LOC_182 EQU *-ZC_WS CHECK DFHPF14 WS LOC
DFHPF14     DC XL1'C2'
ZC_WS_LOC_183 EQU *-ZC_WS CHECK DFHPF15 WS LOC
DFHPF15     DC XL1'C3'
ZC_WS_LOC_184 EQU *-ZC_WS CHECK DFHPF16 WS LOC
DFHPF16     DC XL1'C4'
ZC_WS_LOC_185 EQU *-ZC_WS CHECK DFHPF17 WS LOC
DFHPF17     DC XL1'C5'
ZC_WS_LOC_186 EQU *-ZC_WS CHECK DFHPF18 WS LOC
DFHPF18     DC XL1'C6'
ZC_WS_LOC_187 EQU *-ZC_WS CHECK DFHPF19 WS LOC
DFHPF19     DC XL1'C7'
ZC_WS_LOC_188 EQU *-ZC_WS CHECK DFHPF20 WS LOC
DFHPF20     DC XL1'C8'
ZC_WS_LOC_189 EQU *-ZC_WS CHECK DFHPF21 WS LOC
DFHPF21     DC XL1'C9'
ZC_WS_LOC_190 EQU *-ZC_WS CHECK DFHPF22 WS LOC
DFHPF22     DC XL1'4A'
ZC_WS_LOC_191 EQU *-ZC_WS CHECK DFHPF23 WS LOC
DFHPF23     DC XL1'4B'
ZC_WS_LOC_192 EQU *-ZC_WS CHECK DFHPF24 WS LOC
DFHPF24     DC XL1'4C'
ZC_WS_LOC_193 EQU *-ZC_WS CHECK DFHPA1 WS LOC
DFHPA1      DC XL1'6C'
ZC_WS_LOC_194 EQU *-ZC_WS CHECK DFHPA2 WS LOC
DFHPA2      DC XL1'6E'
ZC_WS_LOC_195 EQU *-ZC_WS CHECK DFHPA3 WS LOC
DFHPA3      DC XL1'6B'
ZC_WS_LOC_196 EQU *-ZC_WS CHECK DFHCLEAR WS LOC
DFHCLEAR    DC XL1'6D'
ZC_WS_LOC_197 EQU *-ZC_WS CHECK DFHBMSCA WS LOC
DFHBMSCA    DS  0CL21
ZC_WS_LOC_198 EQU *-ZC_WS CHECK DFHBMUNP WS LOC
DFHBMUNP    DC XL1'40'
ZC_WS_LOC_199 EQU *-ZC_WS CHECK DFHBMFSE WS LOC
DFHBMFSE    DC XL1'C1'
ZC_WS_LOC_200 EQU *-ZC_WS CHECK DFHBMBRY WS LOC
DFHBMBRY    DC XL1'C8'
ZC_WS_LOC_201 EQU *-ZC_WS CHECK DFHUNIMD WS LOC
DFHUNIMD    DC XL1'C9'
ZC_WS_LOC_202 EQU *-ZC_WS CHECK DFHBMDAR WS LOC
DFHBMDAR    DC XL1'4C'
ZC_WS_LOC_203 EQU *-ZC_WS CHECK DFHUNNOD WS LOC
DFHUNNOD    DC XL1'4D'
ZC_WS_LOC_204 EQU *-ZC_WS CHECK DFHBMUNN WS LOC
DFHBMUNN    DC XL1'50'
ZC_WS_LOC_205 EQU *-ZC_WS CHECK DFHUNNUM WS LOC
DFHUNNUM    DC XL1'D1'
ZC_WS_LOC_206 EQU *-ZC_WS CHECK DFHUNNUB WS LOC
DFHUNNUB    DC XL1'D8'
ZC_WS_LOC_207 EQU *-ZC_WS CHECK DFHUNINT WS LOC
DFHUNINT    DC XL1'D9'
ZC_WS_LOC_208 EQU *-ZC_WS CHECK DFHUNNON WS LOC
DFHUNNON    DC XL1'5D'
ZC_WS_LOC_209 EQU *-ZC_WS CHECK DFHBMPRO WS LOC
DFHBMPRO    DC XL1'60'
ZC_WS_LOC_210 EQU *-ZC_WS CHECK DFHBMPRF WS LOC
DFHBMPRF    DC XL1'61'
ZC_WS_LOC_211 EQU *-ZC_WS CHECK DFHPROTI WS LOC
DFHPROTI    DC XL1'E8'
ZC_WS_LOC_212 EQU *-ZC_WS CHECK DFHPROTN WS LOC
DFHPROTN    DC XL1'6C'
ZC_WS_LOC_213 EQU *-ZC_WS CHECK DFHBMASK WS LOC
DFHBMASK    DC XL1'F0'
ZC_WS_LOC_214 EQU *-ZC_WS CHECK DFHBMASF WS LOC
DFHBMASF    DC XL1'F1'
ZC_WS_LOC_215 EQU *-ZC_WS CHECK DFHBMASB WS LOC
DFHBMASB    DC XL1'F8'
ZC_WS_LOC_216 EQU *-ZC_WS CHECK DFHBMEOF WS LOC
DFHBMEOF    DC XL1'80'
ZC_WS_LOC_217 EQU *-ZC_WS CHECK DFHBMCUR WS LOC
DFHBMCUR    DC XL1'02'
ZC_WS_LOC_218 EQU *-ZC_WS CHECK DFHBMEF WS LOC
DFHBMEF     DC XL1'82'
ZC_WS_LOC_219 EQU *-ZC_WS CHECK MYCOMM WS LOC
MYCOMM      DS  0CL86
ZC_WS_LOC_220 EQU *-ZC_WS CHECK COMMIND WS LOC
COMMIND     DS  CL1
ZC_WS_LOC_221 EQU *-ZC_WS CHECK COMMNAME WS LOC
COMMNAME    DS  CL40
ZC_WS_LOC_222 EQU *-ZC_WS CHECK COMMADDR WS LOC
COMMADDR    DS  CL40
ZC_WS_LOC_223 EQU *-ZC_WS CHECK COMMZIP WS LOC
COMMZIP     DS  CL5
ZC_WS_LOC_224 EQU *-ZC_WS CHECK MYGUI6 WS LOC
MYGUI6      DC CL7'GUI6   '
ZC_WS_LOC_225 EQU *-ZC_WS CHECK OCCSUM WS LOC
OCCSUM      DS  PL4
ZC_WS_LOC_226 EQU *-ZC_WS CHECK OCCINDX WS LOC
OCCINDX     DS  HL2
ZC_WS_LOC_227 EQU *-ZC_WS CHECK LOOPCTRL WS LOC
LOOPCTRL    DS  HL2
ZC_WS_LOC_228 EQU *-ZC_WS CHECK SUMLEN WS LOC
SUMLEN      DS  HL2
ZC_WS_LOC_229 EQU *-ZC_WS CHECK OCCZONE WS LOC
OCCZONE     DS  ZL2
         ORG   OCCZONE  START REDEFINE
ZC_WS_LOC_230 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL2
ZC_WS_LOC_231 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  CL1
ZC_WS_LOC_232 EQU *-ZC_WS CHECK OCCZONE2 WS LOC
OCCZONE2    DS  CL1
ZC_WS_LOC_233 EQU *-ZC_WS CHECK OCCCURSO WS LOC
OCCCURSO    DS  0CL9
ZC_WS_LOC_234 EQU *-ZC_WS CHECK ZC_FILLER_V1 WS LOC
ZC_FILLER_V1    DC CL7'OCCURS('
ZC_WS_LOC_235 EQU *-ZC_WS CHECK OCCNUM WS LOC
OCCNUM      DS  CL1
ZC_WS_LOC_236 EQU *-ZC_WS CHECK ZC_FILLER_V2 WS LOC
ZC_FILLER_V2    DC CL1')'
ZC_WS_LOC_237 EQU *-ZC_WS CHECK SHOWMSG WS LOC
SHOWMSG     DS  0CL18
ZC_WS_LOC_238 EQU *-ZC_WS CHECK ZC_FILLER_V3 WS LOC
ZC_FILLER_V3    DC CL3'MO='
ZC_WS_LOC_239 EQU *-ZC_WS CHECK SHOWMO WS LOC
SHOWMO      DS  CL2
ZC_WS_LOC_240 EQU *-ZC_WS CHECK ZC_FILLER_V4 WS LOC
ZC_FILLER_V4    DC CL5' DAY='
ZC_WS_LOC_241 EQU *-ZC_WS CHECK SHOWDAY WS LOC
SHOWDAY     DS  CL2
ZC_WS_LOC_242 EQU *-ZC_WS CHECK ZC_FILLER_V5 WS LOC
ZC_FILLER_V5    DC CL4' YR='
ZC_WS_LOC_243 EQU *-ZC_WS CHECK SHOWYR WS LOC
SHOWYR      DS  CL2
ZC_WS_LOC_244 EQU *-ZC_WS CHECK BADKEY WS LOC
BADKEY      DS  0CL34
ZC_WS_LOC_245 EQU *-ZC_WS CHECK ZC_FILLER_V6 WS LOC
ZC_FILLER_V6    DC CL26'NO ACTION FOR AID KEY HEX '
ZC_WS_LOC_246 EQU *-ZC_WS CHECK HEXKEY WS LOC
HEXKEY      DS  CL2
ZC_WS_LOC_247 EQU *-ZC_WS CHECK ZC_FILLER_V7 WS LOC
ZC_FILLER_V7    DC CL6' '
ZC_WS_LOC_248 EQU *-ZC_WS CHECK NOMODS WS LOC
NOMODS      DC CL34'NO FIELDS CHANGED                 '
ZC_WS_LOC_249 EQU *-ZC_WS CHECK FAILMSG WS LOC
FAILMSG     DS  0CL34
ZC_WS_LOC_250 EQU *-ZC_WS CHECK ZC_FILLER_V8 WS LOC
ZC_FILLER_V8    DC CL8'MAPFAIL/'
ZC_WS_LOC_251 EQU *-ZC_WS CHECK FAILIND WS LOC
FAILIND     DS  CL1
ZC_WS_LOC_252 EQU *-ZC_WS CHECK ZC_FILLER_V9 WS LOC
ZC_FILLER_V9    DC CL25' HAS OCCURRED            '
ZC_WS_LOC_253 EQU *-ZC_WS CHECK ENDMSG WS LOC
ENDMSG      DC CL34'TRANSACTION COMPLETE - PRESS CLEAR'
ZC_WS_LOC_254 EQU *-ZC_WS CHECK WORK1 WS LOC
WORK1       DS  0CL4
ZC_WS_LOC_255 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  CL3
ZC_WS_LOC_256 EQU *-ZC_WS CHECK RESP2 WS LOC
RESP2       DS  CL1
ZC_WS_LOC_280 EQU *-ZC_WS CHECK DEBUG_ITEM WS LOC
DEBUG_ITEM    DS  0CL88
ZC_WS_LOC_281 EQU *-ZC_WS CHECK DEBUG_LINE WS LOC
DEBUG_LINE    DS  CL6
ZC_WS_LOC_282 EQU *-ZC_WS CHECK ZC_FILLER_V10 WS LOC
ZC_FILLER_V10    DC CL1' '
ZC_WS_LOC_283 EQU *-ZC_WS CHECK DEBUG_NAME WS LOC
DEBUG_NAME    DS  CL30
ZC_WS_LOC_284 EQU *-ZC_WS CHECK ZC_FILLER_V11 WS LOC
ZC_FILLER_V11    DC CL1' '
ZC_WS_LOC_285 EQU *-ZC_WS CHECK DEBUG_SUB_1 WS LOC
DEBUG_SUB_1    DS  ZL4
ZC_WS_LOC_286 EQU *-ZC_WS CHECK ZC_FILLER_V12 WS LOC
ZC_FILLER_V12    DC CL1' '
ZC_WS_LOC_287 EQU *-ZC_WS CHECK DEBUG_SUB_2 WS LOC
DEBUG_SUB_2    DS  ZL4
ZC_WS_LOC_288 EQU *-ZC_WS CHECK ZC_FILLER_V13 WS LOC
ZC_FILLER_V13    DC CL1' '
ZC_WS_LOC_289 EQU *-ZC_WS CHECK DEBUG_SUB_3 WS LOC
DEBUG_SUB_3    DS  ZL4
ZC_WS_LOC_290 EQU *-ZC_WS CHECK ZC_FILLER_V14 WS LOC
ZC_FILLER_V14    DC CL1' '
ZC_WS_LOC_291 EQU *-ZC_WS CHECK DEBUG_CONTENTS WS LOC
DEBUG_CONTENTS    DS  CL35
ZC_WS_LOC_292 EQU *-ZC_WS CHECK RETURN_CODE WS LOC
RETURN_CODE    DC AL2(0)                  RPI 1065
ZC_WS_LOC_293 EQU *-ZC_WS CHECK ZC_DFHCOMMAREA_PTR WS LOC
ZC_DFHCOMMAREA_PTR    DS  AL4
ZC_WS_LOC_294 EQU *-ZC_WS CHECK ZC_DFHEIBLK_PTR WS LOC
ZC_DFHEIBLK_PTR    DS  AL4
ZC_WS_LOC_295 EQU *-ZC_WS CHECK ZC_ZC_LK_END_PTR WS LOC
ZC_ZC_LK_END_PTR    DS  AL4
* ZCOBOL LINKAGE SECTION DATA ITEMS
* LVL DATA NAME                      ADDR     LEN      DUP TYP PIC     X
                  VALUE
* 01  DFHCOMMAREA                    00000000 00000056 1   X           X
                  
* 02  FILLER                         00000000 00000056 1   X   X(86)   X
                  
* 01  DFHEIBLK                       00000000 00000054 1   X           X
                  
* 02  EIBHEAD                        00000000 00000008 1   X   X(8)    X
                  
* 02  EIBTIME                        00000008 00000004 1   P   9(7)    X
                  
* 02  EIBDATE                        0000000C 00000004 1   P   9(7)    X
                  
* 02  EIBTRNID                       00000010 00000004 1   X   X(4)    X
                  
* 02  EIBTASKN                       00000014 00000004 1   P   9(7)    X
                  
* 02  EIBTRMID                       00000018 00000004 1   X   X(4)    X
                  
* 02  FILLER                         0000001C 00000002 1   X   X(2)    X
                  
* 02  EIBCPOSN                       0000001E 00000002 1   H   9(4)    X
                  
* 02  EIBCALEN                       00000020 00000002 1   H   9(4)    X
                  
* 02  EIBAID                         00000022 00000001 1   X   X       X
                  
* 02  EIBFN                          00000023 00000002 1   H   9(4)    X
                  
* 02  EIBRCODE                       00000025 00000006 1   X   X(6)    X
                  
* 02  EIBREQID                       0000002B 00000008 1   X   X(8)    X
                  
* 02  EIBDS                          00000033 00000008 1   X   X(8)    X
                  
* 02  EIBRSRCE                       0000003B 00000008 1   X   X(8)    X
                  
* 02  EIBRESP                        00000043 00000004 1   F   9(9)    X
                  
* 02  EIBRESP2                       00000047 00000004 1   F   9(9)    X
                  
* 02  EIBPROG                        0000004B 00000008 1   X   X(8)    X
                  
* 02  EIBDTFRM                       00000053 00000001 1   X   X       X
                  
* 01  ZC_LK_END                      00000000 00000001 1   X   X       X
                  
DFHEISTG DSECT
DFHCOMMAREA_DSECT   DSECT
ZC_LK_LOC_257 EQU *-DFHCOMMAREA CHECK DFHCOMMAREA LK LOC
DFHCOMMAREA    DS  0CL86
ZC_LK_LOC_258 EQU *-DFHCOMMAREA CHECK FILLER LK LOC
            DS  CL86
DFHEIBLK_DSECT   DSECT
ZC_LK_LOC_259 EQU *-DFHEIBLK CHECK DFHEIBLK LK LOC
DFHEIBLK    DS  0CL84
ZC_LK_LOC_260 EQU *-DFHEIBLK CHECK EIBHEAD LK LOC
EIBHEAD     DS  CL8
ZC_LK_LOC_261 EQU *-DFHEIBLK CHECK EIBTIME LK LOC
EIBTIME     DS  PL4
ZC_LK_LOC_262 EQU *-DFHEIBLK CHECK EIBDATE LK LOC
EIBDATE     DS  PL4
ZC_LK_LOC_263 EQU *-DFHEIBLK CHECK EIBTRNID LK LOC
EIBTRNID    DS  CL4
ZC_LK_LOC_264 EQU *-DFHEIBLK CHECK EIBTASKN LK LOC
EIBTASKN    DS  PL4
ZC_LK_LOC_265 EQU *-DFHEIBLK CHECK EIBTRMID LK LOC
EIBTRMID    DS  CL4
ZC_LK_LOC_266 EQU *-DFHEIBLK CHECK FILLER LK LOC
            DS  CL2
ZC_LK_LOC_267 EQU *-DFHEIBLK CHECK EIBCPOSN LK LOC
EIBCPOSN    DS  HL2
ZC_LK_LOC_268 EQU *-DFHEIBLK CHECK EIBCALEN LK LOC
EIBCALEN    DS  HL2
ZC_LK_LOC_269 EQU *-DFHEIBLK CHECK EIBAID LK LOC
EIBAID      DS  CL1
ZC_LK_LOC_270 EQU *-DFHEIBLK CHECK EIBFN LK LOC
EIBFN       DS  HL2
ZC_LK_LOC_271 EQU *-DFHEIBLK CHECK EIBRCODE LK LOC
EIBRCODE    DS  CL6
ZC_LK_LOC_272 EQU *-DFHEIBLK CHECK EIBREQID LK LOC
EIBREQID    DS  CL8
ZC_LK_LOC_273 EQU *-DFHEIBLK CHECK EIBDS LK LOC
EIBDS       DS  CL8
ZC_LK_LOC_274 EQU *-DFHEIBLK CHECK EIBRSRCE LK LOC
EIBRSRCE    DS  CL8
ZC_LK_LOC_275 EQU *-DFHEIBLK CHECK EIBRESP LK LOC
EIBRESP     DS  FL4
ZC_LK_LOC_276 EQU *-DFHEIBLK CHECK EIBRESP2 LK LOC
EIBRESP2    DS  FL4
ZC_LK_LOC_277 EQU *-DFHEIBLK CHECK EIBPROG LK LOC
EIBPROG     DS  CL8
ZC_LK_LOC_278 EQU *-DFHEIBLK CHECK EIBDTFRM LK LOC
EIBDTFRM    DS  CL1
ZC_LK_END_DSECT   DSECT
ZC_LK_LOC_279 EQU *-ZC_LK_END CHECK ZC_LK_END LK LOC
ZC_LK_END    DS  CL1
DFHEISTG DSECT
ZC_WS_DIFF EQU  *-ZC_WS-975  DIFF BETWEEN ALLOC AND CALC WS
ZC_WS_END DS   0D
         MNOTE *,'ZCOBOL TOTAL SYMBOLS                 = 295'
         MNOTE *,'ZCOBOL TOTAL SYMBOL DUPLICATES       = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL MAX DUP CHAIN    = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LEVEL 88         = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL SET INDEXES      = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LINKAGE SECTIONS = 3'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE SECTIONS      = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPHS    = 29'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPH DUP = 0'
DFHEISTG DSECT
         ORG
DFHEIEND EQU   *
         END
