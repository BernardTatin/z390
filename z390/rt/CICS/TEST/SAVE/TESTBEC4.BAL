* ZCOBOL PGM='RT\CICS\TEST\TESTBEC4' VER=V1.5.01a MM/DD/YY 
* ZCOBOL OPTIONS=(CICS)
         COPY  TESTBEC4_ZC_LABELS.CPY
*      ****************************************************************X
                              *
*      * Copyright 2006 Automated Software Tools Corporation           X
                              *
*      * This source code is part of z390 assembler/emulator package   X
                              *
*      * The z390 package is distributed under GNU general public      X
                              *
*      * license                                                       X
                              *
*      * Author - Don Higgins                                          X
                              *
*      ****************************************************************X
                              *
*         IDENTIFICATION DIVISION.
*      * TEST BED 4 IN COBOL
*      * TEST HANDLE AID AND DUMP
*         PROGRAM-ID. TESTBEC4.
         PRINT NOLIST,NOGEN,NOLISTUSE    SET LIST OPTION FOR INTERNAL CX
               ODE
DFHEIBR  EQU   11
         USING DFHEIBLK_DSECT,DFHEIBR
*
* TERMINAL CONTROL TABLE - TERMINAL ENTRY
*
DFHTCTTE DSECT
TCTTEHED DS    CL8         'DFHTCTTE'
TCTTETI  DS    CL4         TERMINAL ID
TCTTEDA  DS    AL4         A(TIOA)
TCTTETC  DS    CL4         NEXT TRANSID
TCTTEINT DS    CL4         INITIAL TRANSID
TCTTECA  DS    AL4         RETURN COMMAREA ADDRESS
TCTTECAL DS    XL2         RETURN COMMAREA ADDRESS LENGTH
TCTTELNK DS    XL2         RETURN LINK LEVEL, 0 RETURNS TO Z390KCP
TCTTELKA DS    AL4         LINK LEVEL AREA POINTER
*                          EACH 4-BYTE ENTRY HAS THE DSA ADDRESS
TCTTEABD DS    AL4         HANDLE ABEND BLOCK
TCTTESCC DS    AL4         STORAGE CONTROL CHAIN
TCTTEIMM DS    X           FF=RETURN IMMEDIATE
TCTTETS  DS    X           FF=SHUTDOWN REQUEST
TCTTETYP DS    C           TRANSID START TYPE (FROM Z390KCP/KCPGOTYP)
*                             A = .INI INITIAL TRANSID
*                             B = SCREEN INPUT
*                             C = RETURN TRANSID()
*                             D = IC START-NO DATA
*                             E = IC START-DATA
TCTTECND DS    X           FF=XCTL COMMAREA MUST BE FREED ON RETURN
TCTTEEDF DS    X           FF=EDF IS ACTIVE
TCTTEEBA DS    X           00='BEFORE'  FF='AFTER' CEDF INTERCEPT
TCTTEEDL DS    X           00=NORMAL LINKAGE  FF=DIRECT LINKAGE
TCTTEEDT DS    CL4         TERMID FOR EDF OUTPUT
TCTTEEDA DS    AL4         ADDRESS OF EDF PROCESSOR LCLCEDF
TCTTEQFN DS    PL3         SEQUENTIAL TERMINAL FILE NUMBER
TCTTEQFO DS    X           FF=CURRENT SEQUENTIAL FILE IS OPEN
TCTTEQFL DS    AL4         ADDRESS OF SEQUENTIAL TERMINAL FILENAME
TCTTEQDI DS    AL4         ADDRESS OF RECEIVE DCB
TCTTEQDO DS    AL4         ADDRESS OF SEND DCB
TCTTECWA DS    AL4         ADDRESS OF LOCAL CWA COPY
TCTTECWL DS    XL4         LENGTH OF LOCAL CWA COPY
TCTTELCL DS    AL4         ADDRESS OF LCL MODULE INDEXER
TCTTEIQF DS    X           FF=INQUIRE FILE BROWSE IN PROGRESS
TCTTEIFN DS    CL8         INQUIRE FILE CURRENT POSITION
* FIELDS FOR ASSIGN
TCTTEABP DS    X           ABDUMP INDICATOR
TCTTEABG DS    CL8         ABENDING PROGRAM
TCTTEPSW DS    XL8         ASRA PSW
TCTTEASR DS    XL64        ASRA REGS
TCTTEINV DS    CL8         INVOKING PROGRAM
TCTTERET DS    CL8         RETURN PROGRAM
TCTTELNA EQU   *-TCTTEABP  ASSIGN FIELDS TO CLEAR
TCTTEABC DS    CL4         ABCODE OR BLANK
TCTTENXT DS    CL4         RETURN TRANSID OR BLANK
TCTTEMCL DS    AL2         MAP COLUMN
TCTTEMHT DS    AL2         MAP HEIGHT
TCTTEMLN DS    AL2         MAP LINE
TCTTEMWH DS    AL2         MAP WIDTH
TCTTELEN EQU   *-DFHTCTTE
TCTTEAR  EQU   10
         USING DFHTCTTE,TCTTEAR
R0 EQU 0
R1 EQU 1
R2 EQU 2
R3 EQU 3
R4 EQU 4
R5 EQU 5
R6 EQU 6
R7 EQU 7
R8 EQU 8
R9 EQU 9
R10 EQU 10
R11 EQU 11
R12 EQU 12
R13 EQU 13
R14 EQU 14
R15 EQU 15
TESTBEC4       CSECT
*            R1 >>> A(EIB,COMMAREA)
* TCTTEAR (R10) >>> TCTTE
* DFHEIBR (R11) >>> EIB
*         (R14) >>> RETURN ADDRESS (LINK ONLY)
*
         LR    R2,R1              R2=SAVE USER PARM POINTER
* ENTRY IS ONLY BY DIRECT BRANCH FROM MODULES LCL0E02 (LINK)
* OR LCL0E04 (XCTL)
*
* DON'T SAVE THE REGS IF XCTL, THIS ISN'T A NEW LINK LEVEL
         CHHSI EIBFN,X'0E04'      XCTL ?
         JE    CICS_EIENT_0017_NOSAVE EXIT IF IT IS
* FIND LAST LINKER AND ESTABLISH LINKAGE
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         AHI   R15,-1             -1
         SLL   R15,2              *4
         L     R1,TCTTELKA        R0=LKA ADDRESS
         AR    R1,R15             INDEX TO LAST LINK-LEVEL ENTRY
         L     R13,0(R1)          SAVE AREA OF LAST LINK-LEVEL
         STM   14,12,12+4*(14-14)(13)
CICS_EIENT_0017_NOSAVE EQU *
*
* GETMAIN THE DSA, AND SET UP THE CHAIN
*
         LAY   R1,(DFHEIEND-DFHEISTG) R1=DSA LENGTH
         LA    0,B'00'
         SVC   4 GMAIN R0=(X'02'=31B,X'01'=COND),R1=LEN OUT(R0=L,R1=A)
         ST    R1,8(R13)          SAVE NEW DSA SAVE AREA IN PRIOR SAVE
         ST    R13,4(R1)          SAVE OLD SAVE AREA IN NEW DSA SAVE
         LR    R13,R1             DSA BASE 1
         USING DFHEISTG,R13
         XC    DFHEICAP(DFHEIUSR-DFHEICAP),DFHEICAP CLEAR PREFIX DSA
*
* SAVE DSA LENGTH
*
         ST    R0,DFHEILEN        SAVE DSA LENGTH FOR FREEMAIN
*
* SET EIB AND COMMAREA ADDRESSES
*
         MVC   DFHEIEIB,0(R2)     SET EIB ADDRESS IN DSA
         MVC   DFHEICAP,4(R2)     SET COMMAREA ADDRESS IN DSA
*
* IF WE CAME FROM XCTL, WE MUST FREE THE PARM STORAGE AREA
*
         CHHSI EIBFN,X'0E04'      XCTL ?
         JNE   CICS_EIENT_0017_01 EXIT IF NOT
         LA    R0,8               LENGTH OF 8
         LR    1,R2
         SVC   5 FREEMAIN R0=LEN, R1=ADDR
         LA    R2,DFHEIEIB        SET UP THE PARM AGAIN
CICS_EIENT_0017_01 DS 0H
*
* FIND OUR LKA ENTRY AND STORE OUR DSA ADDRESS
*
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         SLL   R15,2              *4
         L     R1,TCTTELKA        R1=LKA ADDRESS
         AR    R1,R15             INDEX TO OUR LINK LEVEL ENTRY
         ST    R13,0(R1)          SAVE OUR DSA ADDRESS
         MVC   DFHEIINV,TCTTEINV  SET INVOKING PROGRAM FOR ASSIGN
         MVC   DFHEIRET,TCTTERET  SET RETURN PROGRAM FOR ASSIGN
*
         CNOP  4,8             FORCE ZC390PVT TO DOUBLEWORD BOUNDARY
         BRAS  ZC_R8,ZC_LOAD
         USING *,ZC_R8            BASE FOR LOAD AND CICS V5 USE
*
*  THESE FIELDS MUST BE KEPT IN SYNC WITH zcobol\ZC390PVT.CPY
*
         DC    CL8'TESTBEC4'    PVTPGM   ZCOBOL PGM NAME
         DC    CL8'01/02/05'   PVTDATE  ZCOBOL COMPILE DATE
         DC    CL8'22.33'   PVTTIME  ZCOBOL COMPILE TIME
         DC    CL8'V1.5.01a'    PVTVER   ZCOBOL COMPILER VERSION
         DC    C'1'     PVTCICS  ZCOBOL EXEC CICS PGM
         DC    C'1'   PVTEXTND ZCOBOL EXTENDED PRECISION
         DC    C'0'    PVTTRUNC ZCOBOL TRUNCATE TO PICTURE
         DC    C'1'      PVTR64   ZCOBOL USE 64 BIT REGISTERS
ZC_LOAD  DS    0H
         LA    0,=CL8'ZC390LIB'
         SR    15,15 USE DEFAULT SYS390 SEARCH
         SVC   8 LOAD R0=A(NAME) R15=DDNAME/DSNAME ADDR OR 0
         LTR   ZC_R15,ZC_R15
         JZ    ZC_LOAD_OK
         BRAS  1,*+(WTO#0027_EOT-*+1)/2*2
         DC    AL2(WTO#0027_EOT-*,0),C'ZC390LIB NOT FOUND'
WTO#0027_EOT EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
ZC_LOAD_OK DS  0H
         LR    ZC_R9,ZC_R0
         USING ZC390CVT,ZC_R9    R9=CVT
         CLC   ZCVT_ID,=C'ZCVT'              CHECK ZCVT ID AND LENGTH
         JNE   ZC_VER_ERR                    IN ZC390LIB.390 MATCH
         CLC   ZCVT_LEN,=A(ZCVT_END-ZCVT_ID) ZCOBOL PGM COMPILED ID/LEN
         BNE   ZC_VER_ERR
         L     ZC_R15,ZCVT_ZC390NUC
         BASR  ZC_R14,ZC_R15 CALL ZC390NUC TO VERIFY VER, OPTIONS
         J     ZC_VER_OK
ZC_VER_ERR DS 0H
         BRAS  1,*+(WTO#0028_EOT-*+1)/2*2
         DC    AL2(WTO#0028_EOT-*,0),C'ZC390LIB ZCVT VERIFY ERROR'
WTO#0028_EOT EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
         LTORG
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
ZC_R0    EQU   0
ZC_R1    EQU   1
ZC_R2    EQU   2
ZC_R3    EQU   3
ZC_R4    EQU   4
ZC_R5    EQU   5
ZC_R6    EQU   6
ZC_R7    EQU   7
ZC_R8    EQU   8
ZC_R9    EQU   9
ZC_R10   EQU  10
ZC_R11   EQU  11
ZC_R12   EQU  12
ZC_R13   EQU  13
ZC_R14   EQU  14
ZC_R15   EQU  15
ZC_F0    EQU   0
ZC_F1    EQU   1
ZC_F2    EQU   2
ZC_F3    EQU   3
ZC_F4    EQU   4
ZC_F5    EQU   5
ZC_F6    EQU   6
ZC_F7    EQU   7
ZC_F8    EQU   8
ZC_F9    EQU   9
ZC_F10   EQU  10
ZC_F11   EQU  11
ZC_F12   EQU  12
ZC_F13   EQU  13
ZC_F14   EQU  14
ZC_F15   EQU  15
ZC_H     EQU   2   HIGH
ZC_L     EQU   4   LOW
ZC_E     EQU   8   EQUAL
ZC_NH    EQU   13  NOT HIGHT
ZC_NL    EQU   11  NOT LOW
ZC_NE    EQU   7   NOT EQUAL
ZC_O     EQU   1   OVERFLOW
ZC_P     EQU   2   POSITIVE
ZC_M     EQU   4   MINUS
ZC_Z     EQU   8   ZERO
ZC_NP    EQU   13  NOT POSITIVE
ZC_NM    EQU   11  NOT MINUS
ZC_NZ    EQU   7   NOT ZERO
ZC_NO    EQU   14  NOT OVERFLOW
ZC_EQ    EQU   8   EQUAL
ZC_GT    EQU   2   GREATER THAN
ZC_LT    EQU   4   LESS    THAN
ZC_GE    EQU   11  GREATER THAN OR EQUAL
ZC_LE    EQU   13  LESS    THAN OR EQUAL
         POP   PRINT,NOPRINT
PFPO_TEST    EQU  X'80' PFPO TEST IF VALID OPCODE (NOT SUPPORTED YET)
PFPO_RADIX   EQU  1 PFPO OPCODE - CONVERT FROM ONE RADIX TO ANOTHER
PFPO_RND     EQU  0 PFOP ROUNDING OPTION (ONLY DEFAULT ALLOWED)
PFPO_TYPE_EH EQU  0 EH HFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DH EQU  1 ED HFP LONG      64 BITS 15 DIGITS
PFPO_TYPE_LH EQU  2 EL HFP EXTENDED 128 BITS 30 DIGITS
PFPO_TYPE_EB EQU  5 EB BFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DB EQU  6 DB BFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LB EQU  7 LB BFP EXTENDED 128 BITS 34 DIGITS
PFPO_TYPE_ED EQU  8 ED DFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DD EQU  9 DD DFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LD EQU 10 LD DFP EXTENDED 128 BITS 34 DIGITS
ZC_VER_OK DS   0H
ZC390CVT DSECT                ZCOBOL CVT AT ENTRY TO ZC390LIB.390
ZCVT_ID            DC    C'ZCVT'             ZCVT ID  VERIFIED BY ZCOB
ZCVT_LEN           DC    A(ZCVT_END-ZCVT_ID) ZCVT LEN VERIFIED BY ZCOB
ZCVT_VER           DC    CL8'V1.5.01a'    ZCVT VER VERIFIED BY ZC390NUC
ZCVT_ZC390NUC  DC V(ZC390NUC)      MODULE  SYSTEM ROUTINE MODULE INIT
ZCVT_CALL           DC V(CALL)       ENTRY R0=A(PGM),R1=A(PARMLIST)
ZCVT_CMP64R32       DC V(CMP64R32)   ENTRY COMPARE R0-1=FLD1 R2-3=FLD2
ZCVT_CVTLBTQ        DC V(CVTLBTQ)    ENTRY CVT LB IN F4-6 TO Q IN R0-1
ZCVT_CVTLDTP        DC V(CVTLDTP)    ENTRY CVT LD IN F0-2 TO PL31 R0-1
ZCVT_CVTQTLB        DC V(CVTQTLB)    ENTRY CVT Q IN R0-1 TO LB IN F4-6
ZCVT_DIV64R32       DC V(DIV64R32)   ENTRY DIVIDE R0-1=N64, R2-3=MAX64
ZCVT_DIVQ128        DC V(DIVQ128)    ENTRY DIVIDE Q128 R0-R1 BY R2-R3
ZCVT_GOBACK         DC V(GOBACK)     ENTRY R1=RC
ZCVT_MPYQ128        DC V(MPYQ128)    ENTRY MULTIPLY Q128 R0-R1 BY R2-R3
ZCVT_OSE64R32       DC V(OSE64R32)   ENTRY ON SIZE ERR R0-1=N, R2-3=MAX
ZCVT_PERFORM        DC V(PERFORM)    ENTRY R14=PGTAR,R0=PGEXT,R1=PMRET
ZCVT_PMCHECK        DC V(PMCHECK)    ENTRY R14=RETURN TO NEXT INSTR.
ZCVT_ROUNDF         DC V(ROUNDF)     ENTRY R0=REM,R1=QUO,R2=DIVISOR
ZCVT_STACKORG       DC V(STACKORG)   ENTRY PERFORM STACK ORIGIN
ZCVT_STACKPTR       DC V(STACKPTR)   ENTRY CUR ENTRY A(PG_END+4,RET)
ZCVT_STACKEND       DC V(STACKEND)   ENTRY PERFORM STACK END
ZCVT_STOPRUN        DC V(STOPRUN)    ENTRY R1=RC
ZCVT_TALPHAX        DC V(TALPHAX)    ENTRY TEST ALPHABETIC X
ZCVT_TNUMP          DC V(TNUMP)      ENTRY TEST NUMERIC P
ZCVT_TNUMX          DC V(TNUMX)      ENTRY TEST NUMERIC X
ZCVT_TNUMZ          DC V(TNUMZ)      ENTRY TEST NUMERIC Z
*
* ADDITIONAL SEPARATE MODULES LINKED WITH Z390NUC IN ZC390LIB.390
*
ZCVT_ABORT     DC V(ABORT)         MODULE  R1=ABORT ERROR MSG #
ZCVT_ABORT_ALTER   EQU    1 ABORT ALTER DUE TO BRC NOT FOUND AT TARGET
ZCVT_ABORT_CALL    EQU    2 ABORT DYNAMIC CALL - PGM NOT FOUND
ZCVT_ABORT_DISPLAY EQU    3 ABORT DISPLAY DUE TO BUFFER EXCEEDED
ZCVT_ABORT_OPEN    EQU    4 ABORT OPEN  INVALID DCB
ZCVT_ABORT_STACK   EQU    6 ABORT PEROFRM STACK OVERFLOW
ZCVT_ABORT_VERSION EQU    7 ABORT ZC390NUC INIT ZCOBOL VERSION ERROR
ZCVT_ABORT_INT128  EQU    8 ABORT INTEGER 128 CONVERSION OVERFLO
ZCVT_ABORT_DIVQ    EQU    9 ABORT DIVIDE Q IF DIVISOR 0 OR > 2**63
ZCVT_ABORT_CICS    EQU   10 ABORT THIS PGM REQUIRES EXEC CICS TRANS MGR
ZCVT_ABORT_ACCEPT  EQU   11 ABORT ACCEPT EOF
ZCVT_ABORT_MAXERR  EQU   11 ABORT MAX ERROR CODE
ZCVT_ACCEPT    DC V(ACCEPT)        MODULE  R1=A(TYPE,FLD_ADD,FLD_LEN)
ZCVT_ACCEPT_DEFAULT EQU   1 INPUT DEFAULT DDNAME=SYSIN
ZCVT_ACCEPT_CONSOLE EQU   2 INPUT VIA WTOR FROM CONSOLE
ZCVT_ACCEPT_DDNAME  EQU   3 INPUT FROM DDNAME WITH DDNAME ADDR IN R3
ZCVT_ACCEPT_DATE    EQU   4 RETURN DAY OF WEEK PIC 9(8) MMDDYYYY
ZCVT_ACCEPT_TIME    EQU   5 RETURN DAY OF WEEK PIC 9(8) HHMMSSTH
ZCVT_ACCEPT_DOW     EQU   6 RETURN DAY OF WEEK PIC 9 1-7
ZCVT_DISPLAY   DC V(DISPLAY)       MODULE  R1=A(ADDR,LEN,TYPE)
ZCVT_INSPECT   DC V(INSPECT)       MODULE  R0=TYPE,R1=PARMLIST
ZCVT_TALLYING      EQU   0 INSPECT TALLYING
ZCVT_REPLACING     EQU   4 INSPECT REPLACING
ZCVT_CONVERTING    EQU   8 INSPECT CONVERTING
*
* SHARED DATA AREAS
*
               DS 0D
ZCVT_ZERO      DC XL16'00'   BINARY ZEROS
ZCVT_HIGH_VALUES DC XL16'00' BINARY FF'S
ZCVT_PWORK     DS PL8     CVD/CVB WORK
ZCVT_PWORK1    DS PL16    DIV DIVIDEND, CVDG/CVBG WORK
ZCVT_PWORK2    DS PL16    DIV DIVISOR
ZCVT_PWORK3    DS PL16    DIV QUOTIENT
ZCVT_PWORK4    DS PL16    DIV REMAINDER
ZCVT_NDDX      DS XL16    DIV DIVIDEND HOLD AREA
ZCVT_WORKAREA  DS XL256   GEN_INSPECT PARMS, GEN_EDIT WORK, ETC.
*
* END OF ZC390CVT
*
ZCVT_END   EQU   *
ZC390PVT DSECT
PVTPGM   DS    CL8  ZCOBOL PGM NAME
PVTDATE  DS    CL8  ZCOBOL COMPILE DATE
PVTTIME  DS    CL8  ZCOBOL COMPILE TIME
PVTVER   DS    CL8  ZCOBOL COMPILER VERSION
PVTCICS  DS    C    ZCOBOL EXEC CICS PGM
PVTEXTND DS    C    ZCOBOL EXTENDED PRECISION
PVTTRUNC DS    C    ZCOBOL TRUNCATE TO PICTURE
PVTR64   DS    C    ZCOBOL USE 64 BIT REGISTERS
DFHEISTG DSECT
         DS    18F  SAVE AREA
DFHEIEIB DS    A    EIB POINTER
DFHEICAP DS    A    COMMAREA POINTER
DFHEICAL DS    H    COMMAREA LENGTH, COPY OF EIBCALEN
DFHEILEN DS    A    LENGTH OF DSA SET BY DFHEIENT
DFHEIAID DS    A    ADDRESS OF HANDLE AID BLOCK (DSECT=DFHADBLK)
DFHEIHCN DS    A    ADDRESS OF HANDLE CONDITION BLOCK (DSECT=DFHHCBLK)
DFHEIINV DS    CL8  INVOKING PROGRAM FOR ASSIGN
DFHEIRET DS    CL8  RETURN PROGRAM FOR ASSIGN
DFHEIUSR DS    0D   USER PROGRAM STORAGE (SEE DFHEIEND FOR END)
ZC_WS    EQU   DFHEISTG
*         ENVIRONMENT DIVISION.
*         DATA DIVISION.
*         WORKING-STORAGE SECTION.
*         01  WORDSEND.
*           02  FILLER   PIC X    VALUE X'C3'.
*           02  WORDMSG.
*               03  FILLER   PIC X(10).
*               03  WORDLEN  PIC 9(4) COMP.
*         77  KEYINDS  PIC X(18).
*         77  KEYINTAB REDEFINES KEYINDS OCCURS 18 TIMES PIC X.
*         77  KEYIDX   PIC 9(4) COMP.
*         77  RECAREA  PIC X(80).
*         77  RECLEN   PIC 9(4) COMP.
*         77  DUMP1    PIC X(6)   VALUE 'ABCDEF'.
*         77  DUMP2    PIC X(4)   VALUE 'STUV'.
*         77  DUMP3    PIC X(11)  VALUE 'PQRSTUVWXYZ'.
*         77  DUMP4    PIC X(26)  VALUE 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
*         77  DUMP5    PIC X(22)  VALUE 'ALPHA BETA GAMMA DELTA'.
*         01  KEYTABLE PIC X(19)
*                      VALUE X'F1F2F3F4F5F6F7F8F97A7B7CC1C2C3C4C5C6FF'.
*         01  KEYTAB REDEFINES KEYTABLE.
*             02  KEYS  OCCURS 19 TIMES PIC X.
*         01  HEAD.
*             02  FILLER  PIC X(6)  VALUE X'27F5C311C1D1'.
*             02  FILLER  PIC X(24) VALUE 'TESTBEC4 TEST HANDLE AID'.
*             02  FILLER  PIC X(3)  VALUE X'11C261'.
*             02  FILLER  PIC X(31)
*                         VALUE 'PRESS PF KEYS 1-18 IN ANY ORDER'.
*             02  FILLER  PIC X(3)  VALUE X'11C3F1'.
*             02  FILLER  PIC X(25) VALUE 'CLEAR WILL END TASK EARLY'.
*         77  HEADL    PIC 9(4) COMP.
*         01  TAIL.
*             02  FILLER  PIC X(4)  VALUE X'C3114C61'.
*             02  FILLER  PIC X(34)
*                         VALUE 'TESTBEC4 ENDED OK, NOW PRESS CLEAR'.
*         77  TAILL    PIC 9(4) COMP.
*         01  WORDS.
*             02  FILLER  PIC X(3)  VALUE X'11C6E7'.
*             02  FILLER  PIC X(7)  VALUE 'that'.
*             02  FILLER  PIC 9(4)  VALUE 8  COMP.
*             02  FILLER  PIC X(3)  VALUE X'11C7F4'.
*             02  FILLER  PIC X(7)  VALUE 'the'.
*             02  FILLER  PIC 9(4)  VALUE 7  COMP.
*             02  FILLER  PIC X(3)  VALUE X'11C6D8'.
*             02  FILLER  PIC X(7)  VALUE 'go'.
*             02  FILLER  PIC 9(4)  VALUE 6  COMP.
*             02  FILLER  PIC X(3)  VALUE X'11C7E7'.
*             02  FILLER  PIC X(7)  VALUE 'rage'.
*             02  FILLER  PIC 9(4)  VALUE 8  COMP.
*             02  FILLER  PIC X(3)  VALUE X'114AC7'.
*             02  FILLER  PIC X(7)  VALUE 'Thomas'.
*             02  FILLER  PIC 9(4)  VALUE 10 COMP.
*             02  FILLER  PIC X(3)  VALUE X'11C77E'.
*             02  FILLER  PIC X(7)  VALUE 'of'.
*             02  FILLER  PIC 9(4)  VALUE 6  COMP.
*             02  FILLER  PIC X(3)  VALUE X'11C6D1'.
*             02  FILLER  PIC X(7)  VALUE 'Do'.
*             02  FILLER  PIC 9(4)  VALUE 6  COMP.
*             02  FILLER  PIC X(3)  VALUE X'11C6F1'.
*             02  FILLER  PIC X(7)  VALUE 'night,'.
*             02  FILLER  PIC 9(4)  VALUE 10 COMP.
*             02  FILLER  PIC X(3)  VALUE X'11C76C'.
*             02  FILLER  PIC X(7)  VALUE 'against'.
*             02  FILLER  PIC 9(4)  VALUE 11 COMP.
*             02  FILLER  PIC X(3)  VALUE X'11C6E2'.
*             02  FILLER  PIC X(7)  VALUE 'into'.
*             02  FILLER  PIC 9(4)  VALUE 8  COMP.
*             02  FILLER  PIC X(3)  VALUE X'11C8C5'.
*             02  FILLER  PIC X(7)  VALUE 'light.'.
*             02  FILLER  PIC 9(4)  VALUE 10 COMP.
*             02  FILLER  PIC X(3)  VALUE X'11C761'.
*             02  FILLER  PIC X(7)  VALUE 'Rage,'.
*             02  FILLER  PIC 9(4)  VALUE 9  COMP.
*             02  FILLER  PIC X(3)  VALUE X'114AC1'.
*             02  FILLER  PIC X(7)  VALUE 'Dylan'.
*             02  FILLER  PIC 9(4)  VALUE 9  COMP.
*             02  FILLER  PIC X(3)  VALUE X'11C66C'.
*             02  FILLER  PIC X(7)  VALUE 'good'.
*             02  FILLER  PIC 9(4)  VALUE 8  COMP.
*             02  FILLER  PIC X(3)  VALUE X'11C8C1'.
*             02  FILLER  PIC X(7)  VALUE 'the'.
*             02  FILLER  PIC 9(4)  VALUE 7  COMP.
*             02  FILLER  PIC X(3)  VALUE X'11C65B'.
*             02  FILLER  PIC X(7)  VALUE 'gentle'.
*             02  FILLER  PIC 9(4)  VALUE 10 COMP.
*             02  FILLER  PIC X(3)  VALUE X'11C7F8'.
*             02  FILLER  PIC X(7)  VALUE 'dying'.
*             02  FILLER  PIC 9(4)  VALUE 9  COMP.
*             02  FILLER  PIC X(3)  VALUE X'11C6D4'.
*             02  FILLER  PIC X(7)  VALUE 'not'.
*             02  FILLER  PIC 9(4)  VALUE 7  COMP.
*         01  FILLER REDEFINES WORDS.
*             02  WORDENT OCCURS 18 TIMES PIC X(12).
*         01  SEGS.
*             02  ADUMP1  PIC 9(9) COMP USAGE IS POINTER.
*             02  ADUMP2  PIC 9(9) COMP USAGE IS POINTER.
*             02  ADUMP3  PIC 9(9) COMP USAGE IS POINTER.
*             02  ADUMP4  PIC 9(9) COMP USAGE IS POINTER.
*             02  ADUMP5  PIC 9(9) COMP USAGE IS POINTER.
*         01  LENS.
*             02  LDUMP1  PIC 9(9) COMP.
*             02  LDUMP2  PIC 9(9) COMP.
*             02  LDUMP3  PIC 9(9) COMP.
*             02  LDUMP4  PIC 9(9) COMP.
*             02  LDUMP5  PIC 9(9) COMP.
*         COPY DFHAID.
*      * AID VALUES
*        01  DFHAID.
*          02  DFHNULL  PIC X VALUE X'00'.
*          02  DFHENTER PIC X VALUE X'7D'.
*          02  DFHPF1   PIC X VALUE X'F1'.
*          02  DFHPF2   PIC X VALUE X'F2'.
*          02  DFHPF3   PIC X VALUE X'F3'.
*          02  DFHPF4   PIC X VALUE X'F4'.
*          02  DFHPF5   PIC X VALUE X'F5'.
*          02  DFHPF6   PIC X VALUE X'F6'.
*          02  DFHPF7   PIC X VALUE X'F7'.
*          02  DFHPF8   PIC X VALUE X'F8'.
*          02  DFHPF9   PIC X VALUE X'F9'.
*          02  DFHPF10  PIC X VALUE X'7A'.
*          02  DFHPF11  PIC X VALUE X'7B'.
*          02  DFHPF12  PIC X VALUE X'7C'.
*          02  DFHPF13  PIC X VALUE X'C1'.
*          02  DFHPF14  PIC X VALUE X'C2'.
*          02  DFHPF15  PIC X VALUE X'C3'.
*          02  DFHPF16  PIC X VALUE X'C4'.
*          02  DFHPF17  PIC X VALUE X'C5'.
*          02  DFHPF18  PIC X VALUE X'C6'.
*          02  DFHPF19  PIC X VALUE X'C7'.
*          02  DFHPF20  PIC X VALUE X'C8'.
*          02  DFHPF21  PIC X VALUE X'C9'.
*          02  DFHPF22  PIC X VALUE X'4A'.
*          02  DFHPF23  PIC X VALUE X'4B'.
*          02  DFHPF24  PIC X VALUE X'4C'.
*          02  DFHPA1   PIC X VALUE X'6C'.
*          02  DFHPA2   PIC X VALUE X'6E'.
*          02  DFHPA3   PIC X VALUE X'6B'.
*          02  DFHCLEAR PIC X VALUE X'6D'.
*
*      * EXEC INTERFACE BLOCK
*            02  EIBHEAD  PIC X(8).
*            02  EIBTIME  PIC 9(7) COMP-3.
*            02  EIBDATE  PIC 9(7) COMP-3.
*            02  EIBTRNID PIC X(4).
*            02  EIBTASKN PIC 9(7) COMP-3.
*            02  EIBTRMID PIC X(4).
*            02  FILLER   PIC X(2).
*            02  EIBCPOSN PIC 9(4) COMP.
*            02  EIBCALEN PIC 9(4) COMP.
*            02  EIBAID   PIC X.
*            02  EIBFN    PIC 9(4) COMP.
*            02  EIBRCODE PIC X(6).
*            02  EIBREQID PIC X(8).
*            02  EIBDS    PIC X(8).
*            02  EIBRSRCE PIC X(8).
*            02  EIBRESP  PIC 9(9) COMP.
*            02  EIBRESP2 PIC 9(9) COMP.
*            02  EIBPROG  PIC X(8).
*            02  EIBDTFRM PIC X.
         PRINT LIST,GEN,LISTUSE TURN PRINT LISTING ON FOR USER CODE GEN
TESTBEC4  CSECT                SWITCH TO PROCEDURE CODE AHEAD OF WS
         L     ZC_R0,0(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHEIBLK_PTR STORE PARM POINTER
         L     ZC_R0,4(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHCOMMAREA_PTR STORE PARM POINTER
         MVI   ZC_FILLER_V1,X'C3'
         LARL  ZC_R1,=CL6'ABCDEF'
         MVC   DUMP1,0(ZC_R1)
         LARL  ZC_R1,=CL4'STUV'
         MVC   DUMP2,0(ZC_R1)
         LARL  ZC_R1,=CL12'PQRSTUVWXYZ'
         MVC   DUMP3,0(ZC_R1)
         LARL  ZC_R1,=CL26'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
         MVC   DUMP4,0(ZC_R1)
         LARL  ZC_R1,=CL22'ALPHA BETA GAMMA DELTA'
         MVC   DUMP5,0(ZC_R1)
         LARL  ZC_R1,=XL20'F1F2F3F4F5F6F7F8F97A7B7CC1C2C3C4C5C6FF'
         MVC   KEYTABLE,1(ZC_R1)
         LARL  ZC_R1,=XL6'27F5C311C1D1'
         MVC   ZC_FILLER_V2,0(ZC_R1)
         LARL  ZC_R1,=CL24'TESTBEC4 TEST HANDLE AID'
         MVC   ZC_FILLER_V3,0(ZC_R1)
         LARL  ZC_R1,=XL4'11C261'
         MVC   ZC_FILLER_V4,1(ZC_R1)
         LARL  ZC_R1,=CL32'PRESS PF KEYS 1-18 IN ANY ORDER'
         MVC   ZC_FILLER_V5,0(ZC_R1)
         LARL  ZC_R1,=XL4'11C3F1'
         MVC   ZC_FILLER_V6,1(ZC_R1)
         LARL  ZC_R1,=CL26'CLEAR WILL END TASK EARLY'
         MVC   ZC_FILLER_V7,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114C61'
         MVC   ZC_FILLER_V8,0(ZC_R1)
         LARL  ZC_R1,=CL34'TESTBEC4 ENDED OK, NOW PRESS CLEAR'
         MVC   ZC_FILLER_V9,0(ZC_R1)
         LARL  ZC_R1,=XL4'11C6E7'
         MVC   ZC_FILLER_V10,1(ZC_R1)
         LARL  ZC_R1,=CL8'that'
         MVC   ZC_FILLER_V11,0(ZC_R1)
         MVHHI ZC_FILLER_V12,8
         LARL  ZC_R1,=XL4'11C7F4'
         MVC   ZC_FILLER_V13,1(ZC_R1)
         LARL  ZC_R1,=CL8'the'
         MVC   ZC_FILLER_V14,0(ZC_R1)
         MVHHI ZC_FILLER_V15,7
         LARL  ZC_R1,=XL4'11C6D8'
         MVC   ZC_FILLER_V16,1(ZC_R1)
         LARL  ZC_R1,=CL8'go'
         MVC   ZC_FILLER_V17,0(ZC_R1)
         MVHHI ZC_FILLER_V18,6
         LARL  ZC_R1,=XL4'11C7E7'
         MVC   ZC_FILLER_V19,1(ZC_R1)
         LARL  ZC_R1,=CL8'rage'
         MVC   ZC_FILLER_V20,0(ZC_R1)
         MVHHI ZC_FILLER_V21,8
         LARL  ZC_R1,=XL4'114AC7'
         MVC   ZC_FILLER_V22,1(ZC_R1)
         LARL  ZC_R1,=CL8'Thomas'
         MVC   ZC_FILLER_V23,0(ZC_R1)
         MVHHI ZC_FILLER_V24,10
         LARL  ZC_R1,=XL4'11C77E'
         MVC   ZC_FILLER_V25,1(ZC_R1)
         LARL  ZC_R1,=CL8'of'
         MVC   ZC_FILLER_V26,0(ZC_R1)
         MVHHI ZC_FILLER_V27,6
         LARL  ZC_R1,=XL4'11C6D1'
         MVC   ZC_FILLER_V28,1(ZC_R1)
         LARL  ZC_R1,=CL8'Do'
         MVC   ZC_FILLER_V29,0(ZC_R1)
         MVHHI ZC_FILLER_V30,6
         LARL  ZC_R1,=XL4'11C6F1'
         MVC   ZC_FILLER_V31,1(ZC_R1)
         LARL  ZC_R1,=CL8'night,'
         MVC   ZC_FILLER_V32,0(ZC_R1)
         MVHHI ZC_FILLER_V33,10
         LARL  ZC_R1,=XL4'11C76C'
         MVC   ZC_FILLER_V34,1(ZC_R1)
         LARL  ZC_R1,=CL8'against'
         MVC   ZC_FILLER_V35,0(ZC_R1)
         MVHHI ZC_FILLER_V36,11
         LARL  ZC_R1,=XL4'11C6E2'
         MVC   ZC_FILLER_V37,1(ZC_R1)
         LARL  ZC_R1,=CL8'into'
         MVC   ZC_FILLER_V38,0(ZC_R1)
         MVHHI ZC_FILLER_V39,8
         LARL  ZC_R1,=XL4'11C8C5'
         MVC   ZC_FILLER_V40,1(ZC_R1)
         LARL  ZC_R1,=CL8'light.'
         MVC   ZC_FILLER_V41,0(ZC_R1)
         MVHHI ZC_FILLER_V42,10
         LARL  ZC_R1,=XL4'11C761'
         MVC   ZC_FILLER_V43,1(ZC_R1)
         LARL  ZC_R1,=CL8'Rage,'
         MVC   ZC_FILLER_V44,0(ZC_R1)
         MVHHI ZC_FILLER_V45,9
         LARL  ZC_R1,=XL4'114AC1'
         MVC   ZC_FILLER_V46,1(ZC_R1)
         LARL  ZC_R1,=CL8'Dylan'
         MVC   ZC_FILLER_V47,0(ZC_R1)
         MVHHI ZC_FILLER_V48,9
         LARL  ZC_R1,=XL4'11C66C'
         MVC   ZC_FILLER_V49,1(ZC_R1)
         LARL  ZC_R1,=CL8'good'
         MVC   ZC_FILLER_V50,0(ZC_R1)
         MVHHI ZC_FILLER_V51,8
         LARL  ZC_R1,=XL4'11C8C1'
         MVC   ZC_FILLER_V52,1(ZC_R1)
         LARL  ZC_R1,=CL8'the'
         MVC   ZC_FILLER_V53,0(ZC_R1)
         MVHHI ZC_FILLER_V54,7
         LARL  ZC_R1,=XL4'11C65B'
         MVC   ZC_FILLER_V55,1(ZC_R1)
         LARL  ZC_R1,=CL8'gentle'
         MVC   ZC_FILLER_V56,0(ZC_R1)
         MVHHI ZC_FILLER_V57,10
         LARL  ZC_R1,=XL4'11C7F8'
         MVC   ZC_FILLER_V58,1(ZC_R1)
         LARL  ZC_R1,=CL8'dying'
         MVC   ZC_FILLER_V59,0(ZC_R1)
         MVHHI ZC_FILLER_V60,9
         LARL  ZC_R1,=XL4'11C6D4'
         MVC   ZC_FILLER_V61,1(ZC_R1)
         LARL  ZC_R1,=CL8'not'
         MVC   ZC_FILLER_V62,0(ZC_R1)
         MVHHI ZC_FILLER_V63,7
         MVI   DFHNULL,X'00'
         MVI   DFHENTER,X'7D'
         MVI   DFHPF1,X'F1'
         MVI   DFHPF2,X'F2'
         MVI   DFHPF3,X'F3'
         MVI   DFHPF4,X'F4'
         MVI   DFHPF5,X'F5'
         MVI   DFHPF6,X'F6'
         MVI   DFHPF7,X'F7'
         MVI   DFHPF8,X'F8'
         MVI   DFHPF9,X'F9'
         MVI   DFHPF10,X'7A'
         MVI   DFHPF11,X'7B'
         MVI   DFHPF12,X'7C'
         MVI   DFHPF13,X'C1'
         MVI   DFHPF14,X'C2'
         MVI   DFHPF15,X'C3'
         MVI   DFHPF16,X'C4'
         MVI   DFHPF17,X'C5'
         MVI   DFHPF18,X'C6'
         MVI   DFHPF19,X'C7'
         MVI   DFHPF20,X'C8'
         MVI   DFHPF21,X'C9'
         MVI   DFHPF22,X'4A'
         MVI   DFHPF23,X'4B'
         MVI   DFHPF24,X'4C'
         MVI   DFHPA1,X'6C'
         MVI   DFHPA2,X'6E'
         MVI   DFHPA3,X'6B'
         MVI   DFHCLEAR,X'6D'
         MVI   ZC_FILLER_V64,C' '
         MVI   ZC_FILLER_V65,C' '
         MVI   ZC_FILLER_V66,C' '
         MVI   ZC_FILLER_V67,C' '
         MVI   ZC_FILLER_V68,C' '
         MVHHI RETURN_CODE,0
*             MOVE LENGTH OF HEAD TO HEADL.
*ZC    181         MOVE  LENGTH,OF,HEAD,TO,HEADL
         MVHHI HEADL,92
*             MOVE LENGTH OF TAIL TO TAILL.
*      *  MVC   KEYINDS,=18X'FF'   MARK ALL KEYS UNPRESSED
*ZC    182         MOVE  LENGTH,OF,TAIL,TO,TAILL
         MVHHI TAILL,38
*             MOVE HIGH-VALUES TO KEYINDS.
*      *  MVC   WORDWCC,WCC        SET WORD WCC
*ZC    184         MOVE  HIGH_VALUES,TO,KEYINDS
         MVI   KEYINDS,X'FF'
         MVC   KEYINDS+1(18-1),KEYINDS
*             EXEC CICS SEND FROM(HEAD) LENGTH(HEADL) END-EXEC.
*ZC    186         EXEC  CICS,SEND,FROM(HEAD),LENGTH(HEADL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),HEADL   SET LENGTH FROM LABEL
         LA    R0,HEAD           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         J     P0404BYP_0684   EXIT
*
P0404    DS    0H
P0404FN  DS    XL2                FUNCTION CODE
P0404EIB DS    AL4                EIB
P0404TCT DS    AL4                TCTTE
P0404FRM DS    AL4                FROM
P0404LEN DS    AL2                LENGTH
P0404NOH DS    X                  FF=NOHANDLE
         DS    X
P0404RSP DS    AL4                RESP
P0404RS2 DS    AL4                RESP2
P0404END EQU   *                  END MARKER
*
P0404BYP_0684 DS 0H
*      * HANDLE PF KEYS 1-18
*             EXEC CICS HANDLE AID
*                  ANYKEY(PROCKEY)
*                  CLEAR PA1 PA2 PA3
*                  PF19 PF20 PF21 PF22 PF23 PF24
*ZC    190         EXEC  CICS,HANDLE,AID,ANYKEY(PROCKEY),CLEAR,PA1,PA2,X
               PA3,PF19,PF20,PF21,PF22,PF23,PF24
         LARL  R1,P0206         ADDRESS SOURCE
         LARL  R15,P0206        ADDRESS TARGET
         XC    0(P0206END-P0206,R15),0(R1) XC IT
         LARL  R1,=X'0206'         ADDRESS SOURCE
         LARL  R15,P0206FN        ADDRESS TARGET
         MVC   0(L'P0206FN,R15),0(R1) MVC IT
         LARL  R1,P0206EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0206TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0206ADS        R1=ADDRESS AID NUMBERS
         LARL  R14,P0206ADR       R14=ADDRESSES OR FF IF CANCEL
         MVI   0(R1),1       SET AID NUMBER
         LARL  R0,PG_PROCKEY     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),33-30    SET AID NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),34-30    SET AID NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),35-30    SET AID NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),36-30    SET AID NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),55-30    SET AID NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),56-30    SET AID NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),57-30    SET AID NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),58-30    SET AID NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),59-30    SET AID NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         MVI   0(R1),60-30    SET AID NUMBER
         MVI   0(R14),X'FF'       SET CANCEL INDICATOR
         AHI   R1,1               BUMP AID NUMBER POINTER
         AHI   R14,4              BUMP AID ADDRESS POINTER
         LA    R0,DFHEIAID        ADDRESS OF DFHEIAID
         LARL  R1,P0206AID         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0206)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         J     P0206BYP_0693   EXIT
*
P0206    DS    0H
P0206FN  DS    XL2                FUNCTION CODE
P0206EIB DS    AL4                EIB
P0206TCT DS    AL4                TCTTE
P0206AID DS    AL4                A(DFHEIAID)
P0206ADS DS    XL30               ROOM FOR 30 AIDS
P0206ADR DS    30AL4              ROOM FOR 30 ADDRESSES, FF......=CLEAR
P0206RSP DS    AL4                RESP
P0206RS2 DS    AL4                RESP2
P0206END EQU   *                  END MARKER
         DS    0H
*
P0206BYP_0693 DS 0H
*                  END-EXEC.
*         KEYPRESS.
PG_KEYPRESS  DS    0H
*             MOVE 1 TO KEYIDX.
*ZC    197         MOVE  1,TO,KEYIDX
         MVHHI KEYIDX,1
*             EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.
*ZC    198         EXEC  CICS,RECEIVE,INTO(RECAREA),LENGTH(RECLEN)
         LARL  R1,P0402         ADDRESS SOURCE
         LARL  R15,P0402        ADDRESS TARGET
         XC    0(P0402END-P0402,R15),0(R1) XC IT
         LARL  R1,=X'0402'         ADDRESS SOURCE
         LARL  R15,P0402FN        ADDRESS TARGET
         MVC   0(L'P0402FN,R15),0(R1) MVC IT
         LARL  R1,P0402EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0402TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R15,P0402ADB       ADDRESS TARGET
         MVC   0(4,R15),DFHEIAID  SET AID BLOCK ADDRESS
         LA    R0,RECAREA           R0=ADDRESS OF INTO
         LARL  R1,P0402INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'RECAREA         R0=LENGTH OF INTO
         LARL  R1,P0402INL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,RECLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0402LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0402HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0402)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0402NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0402BYP_0708   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0402BYP_0708   EXIT IF NONE
* LENGERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0402BYP_0708) ENTRYPOINT FOR IGNORE CONDITION
*
P0402    DS    0H
P0402FN  DS    XL2                FUNCTION CODE
P0402EIB DS    AL4                EIB
P0402TCT DS    AL4                TCTTE
P0402ADB DS    AL4                ADBLK
P0402INT DS    AL4                INTO
P0402INL DS    AL2                L'INTO
P0402LEN DS    AL4                LENGTH
P0402TGR DS    XL4                TGET RESPONSE
P0402HCN DS    AL4                A(DFHEIHCN)
P0402AID DS    AL4                HANDLE AID ADDRESS
P0402NOW DS    X                  FF=NOWAIT
         DS    X
P0402NOH DS    X                  FF=NOHANDLE
         DS    X
P0402RSP DS    AL4                RESP
P0402RS2 DS    AL4                RESP2
P0402END EQU   *                  END MARKER
         DS    0H
*
P0402BYP_0708 DS 0H
         LARL  R15,P0402AID       ADDRESS TARGET
         ICM   R0,15,0(R15)       ANY HANDLE AID ?
         JZ    P0402_0708_01  EXIT IF NONE
         BR    R0                 GO TO HANDLE AID ROUTINE
*
P0402_0708_01 EQU *
*      *  CLI   EIBAID,CLEAR       CLEAR PRESSED ?
*      *  BE    RETURN             END TASK IF IT IS
*      *  B     KEYPRESS           LOOP
*             IF EIBAID = DFHCLEAR THEN GO TO ALLDONE
*ZC    202         IF    EIBAID,=,DFHCLEAR,THEN
         CLC   EIBAID,DFHCLEAR
         BRC   15-ZC_EQ,PG_IF_1_1
*ZC    202         GO    TO,ALLDONE
         J     PG_ALLDONE
*             ELSE GO TO KEYPRESS.
*ZC    203         ELSE
         J     PG_IF_1_E
PG_IF_1_1  DS    0H  ELSE
*      *  LA    R3,KEYTAB          ADDRESS KEY TABLE
*      *  SR    R4,R4              CLEAR R4
*      *  KEYLOOP  EQU   *
*      *  CLC   0(1,R3),EIBAID     FOUND AID ?
*      *  BE    GETWORD            EXIT TO PROCESS IT
*      *  AHI   R4,1               BUMP INDEX
*      *  AHI   R3,1               BUMP TABLE POINTER
*      *  CLI   0(R3),X'FF'        STOPPER ?
*      *  BE    ABEND              EXIT IF BAD AID
*      *  B     KEYLOOP
*ZC    203         GO    TO,KEYPRESS
         J     PG_KEYPRESS
PG_IF_1_E  DS    0H  END_IF
*         PROCKEY.
PG_KEYPRESS_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_PROCKEY  DS    0H
*             IF EIBAID = KEYS (KEYIDX) THEN GO TO GETWORD.
*ZC    216         IF    EIBAID,=,KEYS,'(',KEYIDX,')',THEN
         LH    ZC_R2,KEYIDX
         BCTR  ZC_R2,0
         MSFI  ZC_R2,1 L'KEYS
         LA    ZC_R2,KEYS(ZC_R2)
         CLC   EIBAID,0(ZC_R2)
         BRC   15-ZC_EQ,PG_IF_2_1
*ZC    216         GO    TO,GETWORD
         J     PG_GETWORD
PG_IF_2_1  DS    0H  END_IF
*             ADD 1 TO KEYIDX
*ZC    217         ADD   1,TO,KEYIDX
         LH    ZC_R0,KEYIDX
         AHI   ZC_R0,1
         STH   ZC_R0,KEYIDX
*             IF KEYS (KEYIDX) = X'FF' THEN GO TO ABEND.
*ZC    218         IF    KEYS,'(',KEYIDX,')',=,X'FF',THEN
         LH    ZC_R2,KEYIDX
         BCTR  ZC_R2,0
         MSFI  ZC_R2,1 L'KEYS
         LA    ZC_R2,KEYS(ZC_R2)
         CLI   0(ZC_R2),X'FF'
         BRC   15-ZC_EQ,PG_IF_3_1
*ZC    218         GO    TO,ABEND
         J     PG_ABEND
PG_IF_3_1  DS    0H  END_IF
*             GO TO PROCKEY.
*      * GETWORD  EQU   *
*ZC    219         GO    TO,PROCKEY
         J     PG_PROCKEY
*         GETWORD.
*      * GOT A VALID AID
*      *  LA    R5,KEYINDS(R4)     INDEX TO KEY INDICATORS
*      *  MVI   0(R5),X'00'        RESET INDICATOR
PG_PROCKEY_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GETWORD  DS    0H
*             MOVE LOW-VALUE TO KEYINTAB (KEYIDX).
*      *  MS    R4,=F'12'          INDEX TO WORD LIST
*      *  LA    R4,WORDS(R4)       + WORD BASE
*      *  MVC   WORDMSG(12),0(R4)  MOVE WORD
*ZC    225         MOVE  LOW_VALUE,TO,KEYINTAB,'(',KEYIDX,')'
         LH    ZC_R2,KEYIDX
         BCTR  ZC_R2,0
         MSFI  ZC_R2,1 L'KEYINTAB
         LA    ZC_R2,KEYINTAB(ZC_R2)
         MVI   0(ZC_R2),X'00'
*             MOVE WORDENT (KEYIDX) TO WORDMSG.
*ZC    229         MOVE  WORDENT,'(',KEYIDX,')',TO,WORDMSG
         LH    ZC_R2,KEYIDX
         BCTR  ZC_R2,0
         MSFI  ZC_R2,12 L'WORDENT
         LA    ZC_R2,WORDENT(ZC_R2)
         MVC   WORDMSG,0(ZC_R2)
*             EXEC CICS SEND FROM(WORDSEND) LENGTH(WORDLEN) END-EXEC.
*ZC    230         EXEC  CICS,SEND,FROM(WORDSEND),LENGTH(WORDLEN)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),WORDLEN   SET LENGTH FROM LABEL
         LA    R0,WORDSEND           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*      *  OC    KEYINDS,KEYINDS    ALL DONE YET ?
*      *  BNZ   KEYPRESS           LOOP
*             IF KEYINDS NOT = LOW-VALUES THEN GO TO KEYPRESS.
*ZC    233         IF    KEYINDS,NOT,=,LOW_VALUES,THEN
         LARL  ZC_R1,=(18)X'00'
         CLC   KEYINDS,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_4_1
*ZC    233         GO    TO,KEYPRESS
         J     PG_KEYPRESS
PG_IF_4_1  DS    0H  END_IF
*             EXEC CICS SEND FROM(TAIL) LENGTH(TAILL) END-EXEC.
*ZC    234         EXEC  CICS,SEND,FROM(TAIL),LENGTH(TAILL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),TAILL   SET LENGTH FROM LABEL
         LA    R0,TAIL           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*         ALLDONE.
*      * TEST DUMP
PG_GETWORD_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ALLDONE  DS    0H
*             EXEC CICS DUMP TRANSACTION DUMPCODE('MEL1') COMPLETE
*ZC    237         EXEC  CICS,DUMP,TRANSACTION,DUMPCODE('MEL1'),COMPLETX
                              E
         LARL  R1,P1C02         ADDRESS SOURCE
         LARL  R15,P1C02        ADDRESS TARGET
         XC    0(P1C02END-P1C02,R15),0(R1) XC IT
         LARL  R1,=X'1C02'         ADDRESS SOURCE
         LARL  R15,P1C02FN        ADDRESS TARGET
         MVC   0(L'P1C02FN,R15),0(R1) MVC IT
         LARL  R1,=CL4'MEL1'         ADDRESS SOURCE
         LARL  R15,P1C02DCD        ADDRESS TARGET
         MVC   0(L'P1C02DCD,R15),0(R1) MVC IT
         LARL  R1,P1C02CMP         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P1C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1C02)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         J     P1C02BYP_0835   EXIT
*
P1C02    EQU   *
P1C02FN  DS    XL2                FUNCTION CODE
P1C02EIB DS    AL4                EIB
P1C02TCT DS    AL4                TCTTE
P1C02DCD DS    CL4                DUMPCODE
P1C02FRM DS    AL4                FROM
P1C02LEN DS    AL4                LENGTH/FLENGTH
P1C02SEG DS    AL4                SEGMENTLIST
P1C02LST DS    AL4                LENGTHLIST
P1C02NSG DS    AL4                NUMSEGMENTS
P1C02CMP DS    X                  X'FF'=COMPLETE
P1C02RSP DS    AL4                RESP
P1C02RS2 DS    AL4                RESP2
P1C02END EQU   *                  END MARKER
         DS    0H
*
P1C02BYP_0835 DS 0H
*                  END-EXEC.
*             MOVE ADDRESS OF DUMP1 TO ADUMP1.
*ZC    239         MOVE  ADDRESS,OF,DUMP1,TO,ADUMP1
         LA    ZC_R0,DUMP1
         ST    ZC_R0,ADUMP1
*             MOVE ADDRESS OF DUMP2 TO ADUMP2.
*ZC    240         MOVE  ADDRESS,OF,DUMP2,TO,ADUMP2
         LA    ZC_R0,DUMP2
         ST    ZC_R0,ADUMP2
*             MOVE ADDRESS OF DUMP3 TO ADUMP3.
*ZC    241         MOVE  ADDRESS,OF,DUMP3,TO,ADUMP3
         LA    ZC_R0,DUMP3
         ST    ZC_R0,ADUMP3
*             MOVE ADDRESS OF DUMP4 TO ADUMP4.
*ZC    242         MOVE  ADDRESS,OF,DUMP4,TO,ADUMP4
         LA    ZC_R0,DUMP4
         ST    ZC_R0,ADUMP4
*             MOVE ADDRESS OF DUMP5 TO ADUMP5.
*ZC    243         MOVE  ADDRESS,OF,DUMP5,TO,ADUMP5
         LA    ZC_R0,DUMP5
         ST    ZC_R0,ADUMP5
*             MOVE LENGTH OF DUMP1 TO LDUMP1.
*ZC    244         MOVE  LENGTH,OF,DUMP1,TO,LDUMP1
         MVHI  LDUMP1,6
*             MOVE LENGTH OF DUMP2 TO LDUMP2.
*ZC    245         MOVE  LENGTH,OF,DUMP2,TO,LDUMP2
         MVHI  LDUMP2,4
*             MOVE LENGTH OF DUMP3 TO LDUMP3.
*ZC    246         MOVE  LENGTH,OF,DUMP3,TO,LDUMP3
         MVHI  LDUMP3,11
*             MOVE LENGTH OF DUMP4 TO LDUMP4.
*ZC    247         MOVE  LENGTH,OF,DUMP4,TO,LDUMP4
         MVHI  LDUMP4,26
*             MOVE LENGTH OF DUMP5 TO LDUMP5.
*ZC    248         MOVE  LENGTH,OF,DUMP5,TO,LDUMP5
         MVHI  LDUMP5,22
*             EXEC CICS DUMP TRANSACTION DUMPCODE('MEL2')
*                  FROM(KEYTAB) LENGTH(19)
*                  SEGMENTLIST(SEGS) LENGTHLIST(LENS) NUMSEGMENTS(5)
*ZC    249         EXEC  CICS,DUMP,TRANSACTION,DUMPCODE('MEL2'),FROM(KEX
               YTAB),LENGTH(19),SEGMENTLIST(SEGS),LENGTHLIST(LENS),NUMSX
               EGMENTS(5)
         LARL  R1,P1C02         ADDRESS SOURCE
         LARL  R15,P1C02        ADDRESS TARGET
         XC    0(P1C02END-P1C02,R15),0(R1) XC IT
         LARL  R1,=X'1C02'         ADDRESS SOURCE
         LARL  R15,P1C02FN        ADDRESS TARGET
         MVC   0(L'P1C02FN,R15),0(R1) MVC IT
         LARL  R1,=CL4'MEL2'         ADDRESS SOURCE
         LARL  R15,P1C02DCD        ADDRESS TARGET
         MVC   0(L'P1C02DCD,R15),0(R1) MVC IT
         LA    R14,KEYTAB          LOAD STORAGE START
         LARL  R1,P1C02FRM         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,=AL2(19)         ADDRESS SOURCE
         LARL  R15,P1C02LEN+2        ADDRESS TARGET
         MVC   0(2,R15),0(R1) MVC IT
         LARL  R1,=A(SEGS)         ADDRESS SOURCE
         LARL  R15,P1C02SEG        ADDRESS TARGET
         MVC   0(L'P1C02SEG,R15),0(R1) MVC IT
         LARL  R1,=A(LENS)         ADDRESS SOURCE
         LARL  R15,P1C02LST        ADDRESS TARGET
         MVC   0(L'P1C02LST,R15),0(R1) MVC IT
         LARL  R1,=A(5)         ADDRESS SOURCE
         LARL  R15,P1C02NSG        ADDRESS TARGET
         MVC   0(L'P1C02NSG,R15),0(R1) MVC IT
         LARL  R1,P1C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1C02)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
*                  END-EXEC.
*             EXEC CICS RETURN END-EXEC.
*ZC    253         EXEC  CICS,RETURN
         LARL  R1,P0E08         ADDRESS SOURCE
         LARL  R15,P0E08        ADDRESS TARGET
         XC    0(P0E08END-P0E08,R15),0(R1) XC IT
         LARL  R1,=X'0E08'         ADDRESS SOURCE
         LARL  R15,P0E08FN        ADDRESS TARGET
         MVC   0(L'P0E08FN,R15),0(R1) MVC IT
* SPECIAL LINKAGE
         LARL  R1,P0E08           R1=PARAMETER LIST
         LARL  R14,P0E08RTN_0922 RETURN ADDRESS
         LRL   R15,=V(LCL0E08)    R15=EXTERNAL RETURN MODULE ADDRESS
         BR    R15                GO TO IT
*
P0E08RTN_0922 EQU *
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E08BYP_0922   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(0)             IGNORE HERE IS NOT PERMITTED
*
P0E08    DS    0H
P0E08FN  DS    XL2                FUNCTION CODE
P0E08TRN DS    CL4                TRANSID
P0E08COM DS    AL4                COMMAREA ADDRESS
P0E08CLN DS    XL2                COMMAREA LENGTH
P0E08IMM DS    X                  FF=IMMEDIATE
         DS    X
P0E08CNR DS    X                  FF=CLEANER
         DS    X
P0E08RSP DS    AL4                RESP
P0E08RS2 DS    AL4                RESP2
P0E08END EQU   *                  END MARKER
         DS    0H
*
P0E08BYP_0922 DS 0H
*         ABEND.
PG_ALLDONE_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ABEND  DS    0H
*             EXEC CICS ABEND ABCODE('BEC4') END-EXEC.
*ZC    255         EXEC  CICS,ABEND,ABCODE('BEC4')
         LARL  R1,P0E0C         ADDRESS SOURCE
         LARL  R15,P0E0C        ADDRESS TARGET
         XC    0(P0E0CEND-P0E0C,R15),0(R1) XC IT
         LARL  R1,=X'0E0C'         ADDRESS SOURCE
         LARL  R15,P0E0CFN        ADDRESS TARGET
         MVC   0(L'P0E0CFN,R15),0(R1) MVC IT
         LARL  R1,=CL4'BEC4'         ADDRESS SOURCE
         LARL  R15,CICS_ABEND_0929_ABCODE        ADDRESS TARGET
         MVC   0(L'CICS_ABEND_0929_ABCODE,R15),0(R1) MVC IT
         LARL  R1,P0E0CEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0CTCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0C)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
         DC    X'0000'            ABEND POINT
         DC    X'FE'              FE=TAKE DUMP  FF=NODUMP
         DC    C'ABEND'           MARKER
CICS_ABEND_0929_ABCODE DC CL4' ' ABEND CODE IF ANY
*
P0E0C    DS    0H
P0E0CFN  DS    XL2                FUNCTION CODE
P0E0CEIB DS    AL4                EIB
P0E0CTCT DS    AL4                TCTTE
P0E0CCAN DS    X                  FF=CANCEL
         DS    X
P0E0CNOH DS    X                  FF=NOHANDLE
         DS    X
P0E0CRSP DS    AL4                RESP
P0E0CRS2 DS    AL4                RESP2
P0E0CEND EQU   *                  END MARKER
         DS    0H
*
PG_ABEND_END  L     ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
SN_END_PROCEDURE  DS 0H SECTION
*        PROCEDURE END
         LH    ZC_R1,RETURN_CODE
         L     ZC_R15,ZCVT_GOBACK
         BASR  ZC_R14,ZC_R15
         LTORG
* ZCOBOL WORKING STORAGE SECTION DATA ITEMS
* LVL DATA NAME                      ADDR     LEN      DUP TYP PIC     X
                  VALUE
* 01  WORDSEND                       00000070 0000000D 1   X           X
                  
* 02  ZC_FILLER_V1                   00000070 00000001 1   X   X       X
                  X''C3''
* 02  WORDMSG                        00000071 0000000C 1   X           X
                  
* 03  FILLER                         00000071 0000000A 1   X   X(10)   X
                  
* 03  WORDLEN                        0000007B 00000002 1   H   9(4)    X
                  
* 01  KEYINDS                        0000007D 00000012 1   X   X(18)   X
                  
* 01  KEYINTAB                       0000007D 00000001 18   X   X      X
                   
* 01  KEYIDX                         0000008F 00000002 1   H   9(4)    X
                  
* 01  RECAREA                        00000091 00000050 1   X   X(80)   X
                  
* 01  RECLEN                         000000E1 00000002 1   H   9(4)    X
                  
* 01  DUMP1                          000000E3 00000006 1   X   X(6)    X
                  ''ABCDEF''
* 01  DUMP2                          000000E9 00000004 1   X   X(4)    X
                  ''STUV''
* 01  DUMP3                          000000ED 0000000B 1   X   X(11)   X
                  ''PQRSTUVWXYZ''
* 01  DUMP4                          000000F8 0000001A 1   X   X(26)   X
                  ''ABCDEFGHIJKLMNOPQRSTUVWXYZ''
* 01  DUMP5                          00000112 00000016 1   X   X(22)   X
                  ''ALPHA BETA GAMMA DELTA''
* 01  KEYTABLE                       00000128 00000013 1   X   X(19)   X
                  X''F1F2F3F4F5F6F7F8F97A7B7CC1C2C3C4C5C6FF''
* 01  KEYTAB                         00000128 00000013 1   X           X
                  
* 02  KEYS                           00000128 00000001 19   X   X      X
                   
* 01  HEAD                           0000013B 0000005C 1   X           X
                  
* 02  ZC_FILLER_V2                   0000013B 00000006 1   X   X(6)    X
                  X''27F5C311C1D1''
* 02  ZC_FILLER_V3                   00000141 00000018 1   X   X(24)   X
                  ''TESTBEC4 TEST HANDLE AID''
* 02  ZC_FILLER_V4                   00000159 00000003 1   X   X(3)    X
                  X''11C261''
* 02  ZC_FILLER_V5                   0000015C 0000001F 1   X   X(31)   X
                  ''PRESS PF KEYS 1-18 IN ANY ORDER''
* 02  ZC_FILLER_V6                   0000017B 00000003 1   X   X(3)    X
                  X''11C3F1''
* 02  ZC_FILLER_V7                   0000017E 00000019 1   X   X(25)   X
                  ''CLEAR WILL END TASK EARLY''
* 01  HEADL                          00000197 00000002 1   H   9(4)    X
                  
* 01  TAIL                           00000199 00000026 1   X           X
                  
* 02  ZC_FILLER_V8                   00000199 00000004 1   X   X(4)    X
                  X''C3114C61''
* 02  ZC_FILLER_V9                   0000019D 00000022 1   X   X(34)   X
                  ''TESTBEC4 ENDED OK, NOW PRESS CLEAR''
* 01  TAILL                          000001BF 00000002 1   H   9(4)    X
                  
* 01  WORDS                          000001C1 000000D8 1   X           X
                  
* 02  ZC_FILLER_V10                  000001C1 00000003 1   X   X(3)    X
                  X''11C6E7''
* 02  ZC_FILLER_V11                  000001C4 00000007 1   X   X(7)    X
                  ''that''
* 02  ZC_FILLER_V12                  000001CB 00000002 1   H   9(4)    X
                  8
* 02  ZC_FILLER_V13                  000001CD 00000003 1   X   X(3)    X
                  X''11C7F4''
* 02  ZC_FILLER_V14                  000001D0 00000007 1   X   X(7)    X
                  ''the''
* 02  ZC_FILLER_V15                  000001D7 00000002 1   H   9(4)    X
                  7
* 02  ZC_FILLER_V16                  000001D9 00000003 1   X   X(3)    X
                  X''11C6D8''
* 02  ZC_FILLER_V17                  000001DC 00000007 1   X   X(7)    X
                  ''go''
* 02  ZC_FILLER_V18                  000001E3 00000002 1   H   9(4)    X
                  6
* 02  ZC_FILLER_V19                  000001E5 00000003 1   X   X(3)    X
                  X''11C7E7''
* 02  ZC_FILLER_V20                  000001E8 00000007 1   X   X(7)    X
                  ''rage''
* 02  ZC_FILLER_V21                  000001EF 00000002 1   H   9(4)    X
                  8
* 02  ZC_FILLER_V22                  000001F1 00000003 1   X   X(3)    X
                  X''114AC7''
* 02  ZC_FILLER_V23                  000001F4 00000007 1   X   X(7)    X
                  ''Thomas''
* 02  ZC_FILLER_V24                  000001FB 00000002 1   H   9(4)    X
                  10
* 02  ZC_FILLER_V25                  000001FD 00000003 1   X   X(3)    X
                  X''11C77E''
* 02  ZC_FILLER_V26                  00000200 00000007 1   X   X(7)    X
                  ''of''
* 02  ZC_FILLER_V27                  00000207 00000002 1   H   9(4)    X
                  6
* 02  ZC_FILLER_V28                  00000209 00000003 1   X   X(3)    X
                  X''11C6D1''
* 02  ZC_FILLER_V29                  0000020C 00000007 1   X   X(7)    X
                  ''Do''
* 02  ZC_FILLER_V30                  00000213 00000002 1   H   9(4)    X
                  6
* 02  ZC_FILLER_V31                  00000215 00000003 1   X   X(3)    X
                  X''11C6F1''
* 02  ZC_FILLER_V32                  00000218 00000007 1   X   X(7)    X
                  ''night,''
* 02  ZC_FILLER_V33                  0000021F 00000002 1   H   9(4)    X
                  10
* 02  ZC_FILLER_V34                  00000221 00000003 1   X   X(3)    X
                  X''11C76C''
* 02  ZC_FILLER_V35                  00000224 00000007 1   X   X(7)    X
                  ''against''
* 02  ZC_FILLER_V36                  0000022B 00000002 1   H   9(4)    X
                  11
* 02  ZC_FILLER_V37                  0000022D 00000003 1   X   X(3)    X
                  X''11C6E2''
* 02  ZC_FILLER_V38                  00000230 00000007 1   X   X(7)    X
                  ''into''
* 02  ZC_FILLER_V39                  00000237 00000002 1   H   9(4)    X
                  8
* 02  ZC_FILLER_V40                  00000239 00000003 1   X   X(3)    X
                  X''11C8C5''
* 02  ZC_FILLER_V41                  0000023C 00000007 1   X   X(7)    X
                  ''light.''
* 02  ZC_FILLER_V42                  00000243 00000002 1   H   9(4)    X
                  10
* 02  ZC_FILLER_V43                  00000245 00000003 1   X   X(3)    X
                  X''11C761''
* 02  ZC_FILLER_V44                  00000248 00000007 1   X   X(7)    X
                  ''Rage,''
* 02  ZC_FILLER_V45                  0000024F 00000002 1   H   9(4)    X
                  9
* 02  ZC_FILLER_V46                  00000251 00000003 1   X   X(3)    X
                  X''114AC1''
* 02  ZC_FILLER_V47                  00000254 00000007 1   X   X(7)    X
                  ''Dylan''
* 02  ZC_FILLER_V48                  0000025B 00000002 1   H   9(4)    X
                  9
* 02  ZC_FILLER_V49                  0000025D 00000003 1   X   X(3)    X
                  X''11C66C''
* 02  ZC_FILLER_V50                  00000260 00000007 1   X   X(7)    X
                  ''good''
* 02  ZC_FILLER_V51                  00000267 00000002 1   H   9(4)    X
                  8
* 02  ZC_FILLER_V52                  00000269 00000003 1   X   X(3)    X
                  X''11C8C1''
* 02  ZC_FILLER_V53                  0000026C 00000007 1   X   X(7)    X
                  ''the''
* 02  ZC_FILLER_V54                  00000273 00000002 1   H   9(4)    X
                  7
* 02  ZC_FILLER_V55                  00000275 00000003 1   X   X(3)    X
                  X''11C65B''
* 02  ZC_FILLER_V56                  00000278 00000007 1   X   X(7)    X
                  ''gentle''
* 02  ZC_FILLER_V57                  0000027F 00000002 1   H   9(4)    X
                  10
* 02  ZC_FILLER_V58                  00000281 00000003 1   X   X(3)    X
                  X''11C7F8''
* 02  ZC_FILLER_V59                  00000284 00000007 1   X   X(7)    X
                  ''dying''
* 02  ZC_FILLER_V60                  0000028B 00000002 1   H   9(4)    X
                  9
* 02  ZC_FILLER_V61                  0000028D 00000003 1   X   X(3)    X
                  X''11C6D4''
* 02  ZC_FILLER_V62                  00000290 00000007 1   X   X(7)    X
                  ''not''
* 02  ZC_FILLER_V63                  00000297 00000002 1   H   9(4)    X
                  7
* 01  FILLER                         000001C1 000000D8 1   X           X
                  
* 02  WORDENT                        000001C1 0000000C 18   X   X(12)  X
                   
* 01  SEGS                           00000299 00000014 1   X           X
                  
* 02  ADUMP1                         00000299 00000004 1   A   9(9)    X
                  
* 02  ADUMP2                         0000029D 00000004 1   A   9(9)    X
                  
* 02  ADUMP3                         000002A1 00000004 1   A   9(9)    X
                  
* 02  ADUMP4                         000002A5 00000004 1   A   9(9)    X
                  
* 02  ADUMP5                         000002A9 00000004 1   A   9(9)    X
                  
* 01  LENS                           000002AD 00000014 1   X           X
                  
* 02  LDUMP1                         000002AD 00000004 1   F   9(9)    X
                  
* 02  LDUMP2                         000002B1 00000004 1   F   9(9)    X
                  
* 02  LDUMP3                         000002B5 00000004 1   F   9(9)    X
                  
* 02  LDUMP4                         000002B9 00000004 1   F   9(9)    X
                  
* 02  LDUMP5                         000002BD 00000004 1   F   9(9)    X
                  
* 01  DFHAID                         000002C1 0000001E 1   X           X
                  
* 02  DFHNULL                        000002C1 00000001 1   X   X       X
                  X''00''
* 02  DFHENTER                       000002C2 00000001 1   X   X       X
                  X''7D''
* 02  DFHPF1                         000002C3 00000001 1   X   X       X
                  X''F1''
* 02  DFHPF2                         000002C4 00000001 1   X   X       X
                  X''F2''
* 02  DFHPF3                         000002C5 00000001 1   X   X       X
                  X''F3''
* 02  DFHPF4                         000002C6 00000001 1   X   X       X
                  X''F4''
* 02  DFHPF5                         000002C7 00000001 1   X   X       X
                  X''F5''
* 02  DFHPF6                         000002C8 00000001 1   X   X       X
                  X''F6''
* 02  DFHPF7                         000002C9 00000001 1   X   X       X
                  X''F7''
* 02  DFHPF8                         000002CA 00000001 1   X   X       X
                  X''F8''
* 02  DFHPF9                         000002CB 00000001 1   X   X       X
                  X''F9''
* 02  DFHPF10                        000002CC 00000001 1   X   X       X
                  X''7A''
* 02  DFHPF11                        000002CD 00000001 1   X   X       X
                  X''7B''
* 02  DFHPF12                        000002CE 00000001 1   X   X       X
                  X''7C''
* 02  DFHPF13                        000002CF 00000001 1   X   X       X
                  X''C1''
* 02  DFHPF14                        000002D0 00000001 1   X   X       X
                  X''C2''
* 02  DFHPF15                        000002D1 00000001 1   X   X       X
                  X''C3''
* 02  DFHPF16                        000002D2 00000001 1   X   X       X
                  X''C4''
* 02  DFHPF17                        000002D3 00000001 1   X   X       X
                  X''C5''
* 02  DFHPF18                        000002D4 00000001 1   X   X       X
                  X''C6''
* 02  DFHPF19                        000002D5 00000001 1   X   X       X
                  X''C7''
* 02  DFHPF20                        000002D6 00000001 1   X   X       X
                  X''C8''
* 02  DFHPF21                        000002D7 00000001 1   X   X       X
                  X''C9''
* 02  DFHPF22                        000002D8 00000001 1   X   X       X
                  X''4A''
* 02  DFHPF23                        000002D9 00000001 1   X   X       X
                  X''4B''
* 02  DFHPF24                        000002DA 00000001 1   X   X       X
                  X''4C''
* 02  DFHPA1                         000002DB 00000001 1   X   X       X
                  X''6C''
* 02  DFHPA2                         000002DC 00000001 1   X   X       X
                  X''6E''
* 02  DFHPA3                         000002DD 00000001 1   X   X       X
                  X''6B''
* 02  DFHCLEAR                       000002DE 00000001 1   X   X       X
                  X''6D''
* 01  DEBUG_ITEM                     000002DF 00000058 1   X           X
                  
* 02  DEBUG_LINE                     000002DF 00000006 1   X   X(6)    X
                  
* 02  ZC_FILLER_V64                  000002E5 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_NAME                     000002E6 0000001E 1   X   X(30)   X
                  
* 02  ZC_FILLER_V65                  00000304 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_SUB_1                    00000305 00000004 1   Z   9999    X
                  
* 02  ZC_FILLER_V66                  00000309 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_SUB_2                    0000030A 00000004 1   Z   9999    X
                  
* 02  ZC_FILLER_V67                  0000030E 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_SUB_3                    0000030F 00000004 1   Z   9999    X
                  
* 02  ZC_FILLER_V68                  00000313 00000001 1   X   X       X
                  SPACE
* 02  DEBUG_CONTENTS                 00000314 00000023 1   X   X(35)   X
                  
* 01  RETURN_CODE                    00000337 00000002 1   H   9(4)    X
                  0
* 01  ZC_DFHCOMMAREA_PTR             00000339 00000004 1   A           X
                  
* 01  ZC_DFHEIBLK_PTR                0000033D 00000004 1   A           X
                  
* 01  ZC_ZC_LK_END_PTR               00000341 00000004 1   A           X
                  
DFHEISTG DSECT
ZC_WS_LOC_1 EQU *-ZC_WS CHECK WORDSEND WS LOC
WORDSEND    DS  0CL13
ZC_WS_LOC_2 EQU *-ZC_WS CHECK ZC_FILLER_V1 WS LOC
ZC_FILLER_V1    DC XL1'C3'
ZC_WS_LOC_3 EQU *-ZC_WS CHECK WORDMSG WS LOC
WORDMSG     DS  0CL12
ZC_WS_LOC_4 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  CL10
ZC_WS_LOC_5 EQU *-ZC_WS CHECK WORDLEN WS LOC
WORDLEN     DS  HL2
ZC_WS_LOC_6 EQU *-ZC_WS CHECK KEYINDS WS LOC
KEYINDS     DS  CL18
         ORG   KEYINDS  START REDEFINE
ZC_WS_LOC_7 EQU *-ZC_WS CHECK KEYINTAB WS LOC
KEYINTAB    DS  18CL1
ZC_WS_LOC_8 EQU *-ZC_WS CHECK KEYIDX WS LOC
KEYIDX      DS  HL2
ZC_WS_LOC_9 EQU *-ZC_WS CHECK RECAREA WS LOC
RECAREA     DS  CL80
ZC_WS_LOC_10 EQU *-ZC_WS CHECK RECLEN WS LOC
RECLEN      DS  HL2
ZC_WS_LOC_11 EQU *-ZC_WS CHECK DUMP1 WS LOC
DUMP1       DC CL6'ABCDEF'
ZC_WS_LOC_12 EQU *-ZC_WS CHECK DUMP2 WS LOC
DUMP2       DC CL4'STUV'
ZC_WS_LOC_13 EQU *-ZC_WS CHECK DUMP3 WS LOC
DUMP3       DC CL11'PQRSTUVWXYZ'
ZC_WS_LOC_14 EQU *-ZC_WS CHECK DUMP4 WS LOC
DUMP4       DC CL26'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
ZC_WS_LOC_15 EQU *-ZC_WS CHECK DUMP5 WS LOC
DUMP5       DC CL22'ALPHA BETA GAMMA DELTA'
ZC_WS_LOC_16 EQU *-ZC_WS CHECK KEYTABLE WS LOC
KEYTABLE    DC XL19'F1F2F3F4F5F6F7F8F97A7B7CC1C2C3C4C5C6FF'
         ORG   KEYTABLE  START REDEFINE
ZC_WS_LOC_17 EQU *-ZC_WS CHECK KEYTAB WS LOC
KEYTAB      DS  0CL19
ZC_WS_LOC_18 EQU *-ZC_WS CHECK KEYS WS LOC
KEYS        DS  19CL1
ZC_WS_LOC_19 EQU *-ZC_WS CHECK HEAD WS LOC
HEAD        DS  0CL92
ZC_WS_LOC_20 EQU *-ZC_WS CHECK ZC_FILLER_V2 WS LOC
ZC_FILLER_V2    DC XL6'27F5C311C1D1'
ZC_WS_LOC_21 EQU *-ZC_WS CHECK ZC_FILLER_V3 WS LOC
ZC_FILLER_V3    DC CL24'TESTBEC4 TEST HANDLE AID'
ZC_WS_LOC_22 EQU *-ZC_WS CHECK ZC_FILLER_V4 WS LOC
ZC_FILLER_V4    DC XL3'11C261'
ZC_WS_LOC_23 EQU *-ZC_WS CHECK ZC_FILLER_V5 WS LOC
ZC_FILLER_V5    DC CL31'PRESS PF KEYS 1-18 IN ANY ORDER'
ZC_WS_LOC_24 EQU *-ZC_WS CHECK ZC_FILLER_V6 WS LOC
ZC_FILLER_V6    DC XL3'11C3F1'
ZC_WS_LOC_25 EQU *-ZC_WS CHECK ZC_FILLER_V7 WS LOC
ZC_FILLER_V7    DC CL25'CLEAR WILL END TASK EARLY'
ZC_WS_LOC_26 EQU *-ZC_WS CHECK HEADL WS LOC
HEADL       DS  HL2
ZC_WS_LOC_27 EQU *-ZC_WS CHECK TAIL WS LOC
TAIL        DS  0CL38
ZC_WS_LOC_28 EQU *-ZC_WS CHECK ZC_FILLER_V8 WS LOC
ZC_FILLER_V8    DC XL4'C3114C61'
ZC_WS_LOC_29 EQU *-ZC_WS CHECK ZC_FILLER_V9 WS LOC
ZC_FILLER_V9    DC CL34'TESTBEC4 ENDED OK, NOW PRESS CLEAR'
ZC_WS_LOC_30 EQU *-ZC_WS CHECK TAILL WS LOC
TAILL       DS  HL2
ZC_WS_LOC_31 EQU *-ZC_WS CHECK WORDS WS LOC
WORDS       DS  0CL216
ZC_WS_LOC_32 EQU *-ZC_WS CHECK ZC_FILLER_V10 WS LOC
ZC_FILLER_V10    DC XL3'11C6E7'
ZC_WS_LOC_33 EQU *-ZC_WS CHECK ZC_FILLER_V11 WS LOC
ZC_FILLER_V11    DC CL7'that'
ZC_WS_LOC_34 EQU *-ZC_WS CHECK ZC_FILLER_V12 WS LOC
ZC_FILLER_V12    DC AL2(8)                  RPI 1065
ZC_WS_LOC_35 EQU *-ZC_WS CHECK ZC_FILLER_V13 WS LOC
ZC_FILLER_V13    DC XL3'11C7F4'
ZC_WS_LOC_36 EQU *-ZC_WS CHECK ZC_FILLER_V14 WS LOC
ZC_FILLER_V14    DC CL7'the'
ZC_WS_LOC_37 EQU *-ZC_WS CHECK ZC_FILLER_V15 WS LOC
ZC_FILLER_V15    DC AL2(7)                  RPI 1065
ZC_WS_LOC_38 EQU *-ZC_WS CHECK ZC_FILLER_V16 WS LOC
ZC_FILLER_V16    DC XL3'11C6D8'
ZC_WS_LOC_39 EQU *-ZC_WS CHECK ZC_FILLER_V17 WS LOC
ZC_FILLER_V17    DC CL7'go'
ZC_WS_LOC_40 EQU *-ZC_WS CHECK ZC_FILLER_V18 WS LOC
ZC_FILLER_V18    DC AL2(6)                  RPI 1065
ZC_WS_LOC_41 EQU *-ZC_WS CHECK ZC_FILLER_V19 WS LOC
ZC_FILLER_V19    DC XL3'11C7E7'
ZC_WS_LOC_42 EQU *-ZC_WS CHECK ZC_FILLER_V20 WS LOC
ZC_FILLER_V20    DC CL7'rage'
ZC_WS_LOC_43 EQU *-ZC_WS CHECK ZC_FILLER_V21 WS LOC
ZC_FILLER_V21    DC AL2(8)                  RPI 1065
ZC_WS_LOC_44 EQU *-ZC_WS CHECK ZC_FILLER_V22 WS LOC
ZC_FILLER_V22    DC XL3'114AC7'
ZC_WS_LOC_45 EQU *-ZC_WS CHECK ZC_FILLER_V23 WS LOC
ZC_FILLER_V23    DC CL7'Thomas'
ZC_WS_LOC_46 EQU *-ZC_WS CHECK ZC_FILLER_V24 WS LOC
ZC_FILLER_V24    DC AL2(10)                  RPI 1065
ZC_WS_LOC_47 EQU *-ZC_WS CHECK ZC_FILLER_V25 WS LOC
ZC_FILLER_V25    DC XL3'11C77E'
ZC_WS_LOC_48 EQU *-ZC_WS CHECK ZC_FILLER_V26 WS LOC
ZC_FILLER_V26    DC CL7'of'
ZC_WS_LOC_49 EQU *-ZC_WS CHECK ZC_FILLER_V27 WS LOC
ZC_FILLER_V27    DC AL2(6)                  RPI 1065
ZC_WS_LOC_50 EQU *-ZC_WS CHECK ZC_FILLER_V28 WS LOC
ZC_FILLER_V28    DC XL3'11C6D1'
ZC_WS_LOC_51 EQU *-ZC_WS CHECK ZC_FILLER_V29 WS LOC
ZC_FILLER_V29    DC CL7'Do'
ZC_WS_LOC_52 EQU *-ZC_WS CHECK ZC_FILLER_V30 WS LOC
ZC_FILLER_V30    DC AL2(6)                  RPI 1065
ZC_WS_LOC_53 EQU *-ZC_WS CHECK ZC_FILLER_V31 WS LOC
ZC_FILLER_V31    DC XL3'11C6F1'
ZC_WS_LOC_54 EQU *-ZC_WS CHECK ZC_FILLER_V32 WS LOC
ZC_FILLER_V32    DC CL7'night,'
ZC_WS_LOC_55 EQU *-ZC_WS CHECK ZC_FILLER_V33 WS LOC
ZC_FILLER_V33    DC AL2(10)                  RPI 1065
ZC_WS_LOC_56 EQU *-ZC_WS CHECK ZC_FILLER_V34 WS LOC
ZC_FILLER_V34    DC XL3'11C76C'
ZC_WS_LOC_57 EQU *-ZC_WS CHECK ZC_FILLER_V35 WS LOC
ZC_FILLER_V35    DC CL7'against'
ZC_WS_LOC_58 EQU *-ZC_WS CHECK ZC_FILLER_V36 WS LOC
ZC_FILLER_V36    DC AL2(11)                  RPI 1065
ZC_WS_LOC_59 EQU *-ZC_WS CHECK ZC_FILLER_V37 WS LOC
ZC_FILLER_V37    DC XL3'11C6E2'
ZC_WS_LOC_60 EQU *-ZC_WS CHECK ZC_FILLER_V38 WS LOC
ZC_FILLER_V38    DC CL7'into'
ZC_WS_LOC_61 EQU *-ZC_WS CHECK ZC_FILLER_V39 WS LOC
ZC_FILLER_V39    DC AL2(8)                  RPI 1065
ZC_WS_LOC_62 EQU *-ZC_WS CHECK ZC_FILLER_V40 WS LOC
ZC_FILLER_V40    DC XL3'11C8C5'
ZC_WS_LOC_63 EQU *-ZC_WS CHECK ZC_FILLER_V41 WS LOC
ZC_FILLER_V41    DC CL7'light.'
ZC_WS_LOC_64 EQU *-ZC_WS CHECK ZC_FILLER_V42 WS LOC
ZC_FILLER_V42    DC AL2(10)                  RPI 1065
ZC_WS_LOC_65 EQU *-ZC_WS CHECK ZC_FILLER_V43 WS LOC
ZC_FILLER_V43    DC XL3'11C761'
ZC_WS_LOC_66 EQU *-ZC_WS CHECK ZC_FILLER_V44 WS LOC
ZC_FILLER_V44    DC CL7'Rage,'
ZC_WS_LOC_67 EQU *-ZC_WS CHECK ZC_FILLER_V45 WS LOC
ZC_FILLER_V45    DC AL2(9)                  RPI 1065
ZC_WS_LOC_68 EQU *-ZC_WS CHECK ZC_FILLER_V46 WS LOC
ZC_FILLER_V46    DC XL3'114AC1'
ZC_WS_LOC_69 EQU *-ZC_WS CHECK ZC_FILLER_V47 WS LOC
ZC_FILLER_V47    DC CL7'Dylan'
ZC_WS_LOC_70 EQU *-ZC_WS CHECK ZC_FILLER_V48 WS LOC
ZC_FILLER_V48    DC AL2(9)                  RPI 1065
ZC_WS_LOC_71 EQU *-ZC_WS CHECK ZC_FILLER_V49 WS LOC
ZC_FILLER_V49    DC XL3'11C66C'
ZC_WS_LOC_72 EQU *-ZC_WS CHECK ZC_FILLER_V50 WS LOC
ZC_FILLER_V50    DC CL7'good'
ZC_WS_LOC_73 EQU *-ZC_WS CHECK ZC_FILLER_V51 WS LOC
ZC_FILLER_V51    DC AL2(8)                  RPI 1065
ZC_WS_LOC_74 EQU *-ZC_WS CHECK ZC_FILLER_V52 WS LOC
ZC_FILLER_V52    DC XL3'11C8C1'
ZC_WS_LOC_75 EQU *-ZC_WS CHECK ZC_FILLER_V53 WS LOC
ZC_FILLER_V53    DC CL7'the'
ZC_WS_LOC_76 EQU *-ZC_WS CHECK ZC_FILLER_V54 WS LOC
ZC_FILLER_V54    DC AL2(7)                  RPI 1065
ZC_WS_LOC_77 EQU *-ZC_WS CHECK ZC_FILLER_V55 WS LOC
ZC_FILLER_V55    DC XL3'11C65B'
ZC_WS_LOC_78 EQU *-ZC_WS CHECK ZC_FILLER_V56 WS LOC
ZC_FILLER_V56    DC CL7'gentle'
ZC_WS_LOC_79 EQU *-ZC_WS CHECK ZC_FILLER_V57 WS LOC
ZC_FILLER_V57    DC AL2(10)                  RPI 1065
ZC_WS_LOC_80 EQU *-ZC_WS CHECK ZC_FILLER_V58 WS LOC
ZC_FILLER_V58    DC XL3'11C7F8'
ZC_WS_LOC_81 EQU *-ZC_WS CHECK ZC_FILLER_V59 WS LOC
ZC_FILLER_V59    DC CL7'dying'
ZC_WS_LOC_82 EQU *-ZC_WS CHECK ZC_FILLER_V60 WS LOC
ZC_FILLER_V60    DC AL2(9)                  RPI 1065
ZC_WS_LOC_83 EQU *-ZC_WS CHECK ZC_FILLER_V61 WS LOC
ZC_FILLER_V61    DC XL3'11C6D4'
ZC_WS_LOC_84 EQU *-ZC_WS CHECK ZC_FILLER_V62 WS LOC
ZC_FILLER_V62    DC CL7'not'
ZC_WS_LOC_85 EQU *-ZC_WS CHECK ZC_FILLER_V63 WS LOC
ZC_FILLER_V63    DC AL2(7)                  RPI 1065
         ORG   WORDS  START REDEFINE
ZC_WS_LOC_86 EQU *-ZC_WS CHECK FILLER WS LOC
            DS  0CL216
ZC_WS_LOC_87 EQU *-ZC_WS CHECK WORDENT WS LOC
WORDENT     DS  18CL12
ZC_WS_LOC_88 EQU *-ZC_WS CHECK SEGS WS LOC
SEGS        DS  0CL20
ZC_WS_LOC_89 EQU *-ZC_WS CHECK ADUMP1 WS LOC
ADUMP1      DS  AL4
ZC_WS_LOC_90 EQU *-ZC_WS CHECK ADUMP2 WS LOC
ADUMP2      DS  AL4
ZC_WS_LOC_91 EQU *-ZC_WS CHECK ADUMP3 WS LOC
ADUMP3      DS  AL4
ZC_WS_LOC_92 EQU *-ZC_WS CHECK ADUMP4 WS LOC
ADUMP4      DS  AL4
ZC_WS_LOC_93 EQU *-ZC_WS CHECK ADUMP5 WS LOC
ADUMP5      DS  AL4
ZC_WS_LOC_94 EQU *-ZC_WS CHECK LENS WS LOC
LENS        DS  0CL20
ZC_WS_LOC_95 EQU *-ZC_WS CHECK LDUMP1 WS LOC
LDUMP1      DS  FL4
ZC_WS_LOC_96 EQU *-ZC_WS CHECK LDUMP2 WS LOC
LDUMP2      DS  FL4
ZC_WS_LOC_97 EQU *-ZC_WS CHECK LDUMP3 WS LOC
LDUMP3      DS  FL4
ZC_WS_LOC_98 EQU *-ZC_WS CHECK LDUMP4 WS LOC
LDUMP4      DS  FL4
ZC_WS_LOC_99 EQU *-ZC_WS CHECK LDUMP5 WS LOC
LDUMP5      DS  FL4
ZC_WS_LOC_100 EQU *-ZC_WS CHECK DFHAID WS LOC
DFHAID      DS  0CL30
ZC_WS_LOC_101 EQU *-ZC_WS CHECK DFHNULL WS LOC
DFHNULL     DC XL1'00'
ZC_WS_LOC_102 EQU *-ZC_WS CHECK DFHENTER WS LOC
DFHENTER    DC XL1'7D'
ZC_WS_LOC_103 EQU *-ZC_WS CHECK DFHPF1 WS LOC
DFHPF1      DC XL1'F1'
ZC_WS_LOC_104 EQU *-ZC_WS CHECK DFHPF2 WS LOC
DFHPF2      DC XL1'F2'
ZC_WS_LOC_105 EQU *-ZC_WS CHECK DFHPF3 WS LOC
DFHPF3      DC XL1'F3'
ZC_WS_LOC_106 EQU *-ZC_WS CHECK DFHPF4 WS LOC
DFHPF4      DC XL1'F4'
ZC_WS_LOC_107 EQU *-ZC_WS CHECK DFHPF5 WS LOC
DFHPF5      DC XL1'F5'
ZC_WS_LOC_108 EQU *-ZC_WS CHECK DFHPF6 WS LOC
DFHPF6      DC XL1'F6'
ZC_WS_LOC_109 EQU *-ZC_WS CHECK DFHPF7 WS LOC
DFHPF7      DC XL1'F7'
ZC_WS_LOC_110 EQU *-ZC_WS CHECK DFHPF8 WS LOC
DFHPF8      DC XL1'F8'
ZC_WS_LOC_111 EQU *-ZC_WS CHECK DFHPF9 WS LOC
DFHPF9      DC XL1'F9'
ZC_WS_LOC_112 EQU *-ZC_WS CHECK DFHPF10 WS LOC
DFHPF10     DC XL1'7A'
ZC_WS_LOC_113 EQU *-ZC_WS CHECK DFHPF11 WS LOC
DFHPF11     DC XL1'7B'
ZC_WS_LOC_114 EQU *-ZC_WS CHECK DFHPF12 WS LOC
DFHPF12     DC XL1'7C'
ZC_WS_LOC_115 EQU *-ZC_WS CHECK DFHPF13 WS LOC
DFHPF13     DC XL1'C1'
ZC_WS_LOC_116 EQU *-ZC_WS CHECK DFHPF14 WS LOC
DFHPF14     DC XL1'C2'
ZC_WS_LOC_117 EQU *-ZC_WS CHECK DFHPF15 WS LOC
DFHPF15     DC XL1'C3'
ZC_WS_LOC_118 EQU *-ZC_WS CHECK DFHPF16 WS LOC
DFHPF16     DC XL1'C4'
ZC_WS_LOC_119 EQU *-ZC_WS CHECK DFHPF17 WS LOC
DFHPF17     DC XL1'C5'
ZC_WS_LOC_120 EQU *-ZC_WS CHECK DFHPF18 WS LOC
DFHPF18     DC XL1'C6'
ZC_WS_LOC_121 EQU *-ZC_WS CHECK DFHPF19 WS LOC
DFHPF19     DC XL1'C7'
ZC_WS_LOC_122 EQU *-ZC_WS CHECK DFHPF20 WS LOC
DFHPF20     DC XL1'C8'
ZC_WS_LOC_123 EQU *-ZC_WS CHECK DFHPF21 WS LOC
DFHPF21     DC XL1'C9'
ZC_WS_LOC_124 EQU *-ZC_WS CHECK DFHPF22 WS LOC
DFHPF22     DC XL1'4A'
ZC_WS_LOC_125 EQU *-ZC_WS CHECK DFHPF23 WS LOC
DFHPF23     DC XL1'4B'
ZC_WS_LOC_126 EQU *-ZC_WS CHECK DFHPF24 WS LOC
DFHPF24     DC XL1'4C'
ZC_WS_LOC_127 EQU *-ZC_WS CHECK DFHPA1 WS LOC
DFHPA1      DC XL1'6C'
ZC_WS_LOC_128 EQU *-ZC_WS CHECK DFHPA2 WS LOC
DFHPA2      DC XL1'6E'
ZC_WS_LOC_129 EQU *-ZC_WS CHECK DFHPA3 WS LOC
DFHPA3      DC XL1'6B'
ZC_WS_LOC_130 EQU *-ZC_WS CHECK DFHCLEAR WS LOC
DFHCLEAR    DC XL1'6D'
ZC_WS_LOC_153 EQU *-ZC_WS CHECK DEBUG_ITEM WS LOC
DEBUG_ITEM    DS  0CL88
ZC_WS_LOC_154 EQU *-ZC_WS CHECK DEBUG_LINE WS LOC
DEBUG_LINE    DS  CL6
ZC_WS_LOC_155 EQU *-ZC_WS CHECK ZC_FILLER_V64 WS LOC
ZC_FILLER_V64    DC CL1' '
ZC_WS_LOC_156 EQU *-ZC_WS CHECK DEBUG_NAME WS LOC
DEBUG_NAME    DS  CL30
ZC_WS_LOC_157 EQU *-ZC_WS CHECK ZC_FILLER_V65 WS LOC
ZC_FILLER_V65    DC CL1' '
ZC_WS_LOC_158 EQU *-ZC_WS CHECK DEBUG_SUB_1 WS LOC
DEBUG_SUB_1    DS  ZL4
ZC_WS_LOC_159 EQU *-ZC_WS CHECK ZC_FILLER_V66 WS LOC
ZC_FILLER_V66    DC CL1' '
ZC_WS_LOC_160 EQU *-ZC_WS CHECK DEBUG_SUB_2 WS LOC
DEBUG_SUB_2    DS  ZL4
ZC_WS_LOC_161 EQU *-ZC_WS CHECK ZC_FILLER_V67 WS LOC
ZC_FILLER_V67    DC CL1' '
ZC_WS_LOC_162 EQU *-ZC_WS CHECK DEBUG_SUB_3 WS LOC
DEBUG_SUB_3    DS  ZL4
ZC_WS_LOC_163 EQU *-ZC_WS CHECK ZC_FILLER_V68 WS LOC
ZC_FILLER_V68    DC CL1' '
ZC_WS_LOC_164 EQU *-ZC_WS CHECK DEBUG_CONTENTS WS LOC
DEBUG_CONTENTS    DS  CL35
ZC_WS_LOC_165 EQU *-ZC_WS CHECK RETURN_CODE WS LOC
RETURN_CODE    DC AL2(0)                  RPI 1065
ZC_WS_LOC_166 EQU *-ZC_WS CHECK ZC_DFHCOMMAREA_PTR WS LOC
ZC_DFHCOMMAREA_PTR    DS  AL4
ZC_WS_LOC_167 EQU *-ZC_WS CHECK ZC_DFHEIBLK_PTR WS LOC
ZC_DFHEIBLK_PTR    DS  AL4
ZC_WS_LOC_168 EQU *-ZC_WS CHECK ZC_ZC_LK_END_PTR WS LOC
ZC_ZC_LK_END_PTR    DS  AL4
* ZCOBOL LINKAGE SECTION DATA ITEMS
* LVL DATA NAME                      ADDR     LEN      DUP TYP PIC     X
                  VALUE
* 01  DFHCOMMAREA                    00000000 00000054 1   X           X
                  
* 01  DFHEIBLK                       00000000 00000054 1   X           X
                  
* 02  EIBHEAD                        00000000 00000008 1   X   X(8)    X
                  
* 02  EIBTIME                        00000008 00000004 1   P   9(7)    X
                  
* 02  EIBDATE                        0000000C 00000004 1   P   9(7)    X
                  
* 02  EIBTRNID                       00000010 00000004 1   X   X(4)    X
                  
* 02  EIBTASKN                       00000014 00000004 1   P   9(7)    X
                  
* 02  EIBTRMID                       00000018 00000004 1   X   X(4)    X
                  
* 02  FILLER                         0000001C 00000002 1   X   X(2)    X
                  
* 02  EIBCPOSN                       0000001E 00000002 1   H   9(4)    X
                  
* 02  EIBCALEN                       00000020 00000002 1   H   9(4)    X
                  
* 02  EIBAID                         00000022 00000001 1   X   X       X
                  
* 02  EIBFN                          00000023 00000002 1   H   9(4)    X
                  
* 02  EIBRCODE                       00000025 00000006 1   X   X(6)    X
                  
* 02  EIBREQID                       0000002B 00000008 1   X   X(8)    X
                  
* 02  EIBDS                          00000033 00000008 1   X   X(8)    X
                  
* 02  EIBRSRCE                       0000003B 00000008 1   X   X(8)    X
                  
* 02  EIBRESP                        00000043 00000004 1   F   9(9)    X
                  
* 02  EIBRESP2                       00000047 00000004 1   F   9(9)    X
                  
* 02  EIBPROG                        0000004B 00000008 1   X   X(8)    X
                  
* 02  EIBDTFRM                       00000053 00000001 1   X   X       X
                  
* 01  ZC_LK_END                      00000000 00000001 1   X   X       X
                  
DFHEISTG DSECT
DFHCOMMAREA_DSECT   DSECT
ZC_LK_LOC_131 EQU *-DFHCOMMAREA CHECK DFHCOMMAREA LK LOC
DFHCOMMAREA    DS  0CL84
DFHEIBLK_DSECT   DSECT
ZC_LK_LOC_132 EQU *-DFHEIBLK CHECK DFHEIBLK LK LOC
DFHEIBLK    DS  0CL84
ZC_LK_LOC_133 EQU *-DFHEIBLK CHECK EIBHEAD LK LOC
EIBHEAD     DS  CL8
ZC_LK_LOC_134 EQU *-DFHEIBLK CHECK EIBTIME LK LOC
EIBTIME     DS  PL4
ZC_LK_LOC_135 EQU *-DFHEIBLK CHECK EIBDATE LK LOC
EIBDATE     DS  PL4
ZC_LK_LOC_136 EQU *-DFHEIBLK CHECK EIBTRNID LK LOC
EIBTRNID    DS  CL4
ZC_LK_LOC_137 EQU *-DFHEIBLK CHECK EIBTASKN LK LOC
EIBTASKN    DS  PL4
ZC_LK_LOC_138 EQU *-DFHEIBLK CHECK EIBTRMID LK LOC
EIBTRMID    DS  CL4
ZC_LK_LOC_139 EQU *-DFHEIBLK CHECK FILLER LK LOC
            DS  CL2
ZC_LK_LOC_140 EQU *-DFHEIBLK CHECK EIBCPOSN LK LOC
EIBCPOSN    DS  HL2
ZC_LK_LOC_141 EQU *-DFHEIBLK CHECK EIBCALEN LK LOC
EIBCALEN    DS  HL2
ZC_LK_LOC_142 EQU *-DFHEIBLK CHECK EIBAID LK LOC
EIBAID      DS  CL1
ZC_LK_LOC_143 EQU *-DFHEIBLK CHECK EIBFN LK LOC
EIBFN       DS  HL2
ZC_LK_LOC_144 EQU *-DFHEIBLK CHECK EIBRCODE LK LOC
EIBRCODE    DS  CL6
ZC_LK_LOC_145 EQU *-DFHEIBLK CHECK EIBREQID LK LOC
EIBREQID    DS  CL8
ZC_LK_LOC_146 EQU *-DFHEIBLK CHECK EIBDS LK LOC
EIBDS       DS  CL8
ZC_LK_LOC_147 EQU *-DFHEIBLK CHECK EIBRSRCE LK LOC
EIBRSRCE    DS  CL8
ZC_LK_LOC_148 EQU *-DFHEIBLK CHECK EIBRESP LK LOC
EIBRESP     DS  FL4
ZC_LK_LOC_149 EQU *-DFHEIBLK CHECK EIBRESP2 LK LOC
EIBRESP2    DS  FL4
ZC_LK_LOC_150 EQU *-DFHEIBLK CHECK EIBPROG LK LOC
EIBPROG     DS  CL8
ZC_LK_LOC_151 EQU *-DFHEIBLK CHECK EIBDTFRM LK LOC
EIBDTFRM    DS  CL1
ZC_LK_END_DSECT   DSECT
ZC_LK_LOC_152 EQU *-ZC_LK_END CHECK ZC_LK_END LK LOC
ZC_LK_END    DS  CL1
DFHEISTG DSECT
ZC_WS_DIFF EQU  *-ZC_WS-837  DIFF BETWEEN ALLOC AND CALC WS
ZC_WS_END DS   0D
         MNOTE *,'ZCOBOL TOTAL SYMBOLS                 = 168'
         MNOTE *,'ZCOBOL TOTAL SYMBOL DUPLICATES       = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL MAX DUP CHAIN    = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LEVEL 88         = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL SET INDEXES      = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LINKAGE SECTIONS = 3'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE SECTIONS      = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPHS    = 5'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPH DUP = 0'
DFHEISTG DSECT
         ORG
DFHEIEND EQU   *
         END
